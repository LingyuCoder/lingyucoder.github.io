{"tags":[{"name":"自动化测试","permalink":"http://lingyu.life/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/","url":"/async/tags/自动化测试.json","count":1},{"name":"工具","permalink":"http://lingyu.life/tags/%E5%B7%A5%E5%85%B7/","url":"/async/tags/工具.json","count":2}],"categories":[{"name":"前端工程化","permalink":"http://lingyu.life/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/","url":"/async/categories/前端工程化.json","count":7}],"url":"/async/posts/2016/03/07/new/autotest.json","date":1457280000000,"path":{"year":2016,"month":3,"day":7,"name":"new/autotest"},"subtitle":null,"title":"聊一聊前端自动化测试","permalink":"http://lingyu.life/2016/03/07/new/autotest/","content":"<p>以前不喜欢写测试，主要是觉得编写和维护测试用例非常的浪费时间。在真正写了一段时间的基础组件和基础工具后，才发现自动化测试有很多好处。测试最重要的自然是提升代码质量。代码有测试用例，虽不能说百分百无bug，但至少说明测试用例覆盖到的场景是没有问题的。有测试用例，发布前跑一下，可以杜绝各种疏忽而引起的功能bug。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"为何要测试\"><a href=\"#为何要测试\" class=\"headerlink\" title=\"为何要测试\"></a>为何要测试</h3><p>自动化测试一个重要特点就是快速反馈，反馈越迅速意味着开发效率越高。拿UI组件为例，开发过程都是打开浏览器刷新页面点点点才能确定UI组件工作情况是否符合自己预期。接入自动化测试以后，通过脚本代替这些手动点击，接入代码watch后每次保存文件都能快速得知自己的的改动是否影响功能，节省了很多时间，毕竟机器干事情比人总是要快得多。</p>\n<p>有了自动化测试，开发者会更加信任自己的代码。开发者再也不会惧怕将代码交给别人维护，不用担心别的开发者在代码里搞“破坏”。后人接手一段有测试用例的代码，修改起来也会更加从容。测试用例里非常清楚的阐释了开发者和使用者对于这端代码的期望和要求，也非常有利于代码的传承。</p>\n<h3 id=\"考虑投入产出比来做测试\"><a href=\"#考虑投入产出比来做测试\" class=\"headerlink\" title=\"考虑投入产出比来做测试\"></a>考虑投入产出比来做测试</h3><p>说了这么多测试的好处，并不代表一上来就要写出100%场景覆盖的测试用例。个人一直坚持一个观点：<strong>基于投入产出比来做测试</strong>。由于维护测试用例也是一大笔开销（毕竟没有多少测试会专门帮前端写业务测试用例，而前端使用的流程自动化工具更是没有测试参与了）。对于像基础组件、基础模型之类的不常变更且复用较多的部分，可以考虑去写测试用例来保证质量。个人比较倾向于先写少量的测试用例覆盖到80%+的场景，保证覆盖主要使用流程。一些极端场景出现的bug可以在迭代中形成测试用例沉淀，场景覆盖也将逐渐趋近100%。但对于迭代较快的业务逻辑以及生存时间不长的活动页面之类的就别花时间写测试用例了，维护测试用例的时间大了去了，成本太高。</p>\n<h2 id=\"Node-js模块的测试\"><a href=\"#Node-js模块的测试\" class=\"headerlink\" title=\"Node.js模块的测试\"></a>Node.js模块的测试</h2><p>对于Node.js的模块，测试算是比较方便的，毕竟源码和依赖都在本地，看得见摸得着。</p>\n<h3 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h3><p>测试主要使用到的工具是测试框架、断言库以及代码覆盖率工具：</p>\n<ol>\n<li>测试框架：<a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha</a>、<a href=\"http://jasmine.github.io/\" target=\"_blank\" rel=\"noopener\">Jasmine</a>等等，测试主要提供了清晰简明的语法来描述测试用例，以及对测试用例分组，测试框架会抓取到代码抛出的AssertionError，并增加一大堆附加信息，比如那个用例挂了，为什么挂等等。测试框架通常提供TDD（测试驱动开发）或BDD（行为驱动开发）的测试语法来编写测试用例，关于TDD和BDD的对比可以看一篇比较知名的文章<a href=\"http://joshldavis.com/2013/05/27/difference-between-tdd-and-bdd/\" target=\"_blank\" rel=\"noopener\">The Difference Between TDD and BDD</a>。不同的测试框架支持不同的测试语法，比如Mocha既支持TDD也支持BDD，而Jasmine只支持BDD。这里后续以Mocha的BDD语法为例</li>\n<li>断言库：<a href=\"https://shouldjs.github.io/\" target=\"_blank\" rel=\"noopener\">Should.js</a>、<a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a>、<a href=\"https://github.com/Automattic/expect.js\" target=\"_blank\" rel=\"noopener\">expect.js</a>等等，断言库提供了很多语义化的方法来对值做各种各样的判断。当然也可以不用断言库，Node.js中也可以直接使用<a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"noopener\">原生assert库</a>。这里后续以Should.js为例</li>\n<li>代码覆盖率：<a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"noopener\">istanbul</a>等等为代码在语法级分支上打点，运行了打点后的代码，根据运行结束后收集到的信息和打点时的信息来统计出当前测试用例的对源码的覆盖情况。</li>\n</ol>\n<h3 id=\"一个煎蛋的栗子\"><a href=\"#一个煎蛋的栗子\" class=\"headerlink\" title=\"一个煎蛋的栗子\"></a>一个煎蛋的栗子</h3><p>以如下的Node.js项目结构为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── index.js</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">└── test</span><br><span class=\"line\">    └── test.js</span><br></pre></td></tr></table></figure>\n\n<p>首先自然是安装工具，这里先装测试框架和断言库：<code>npm install --save-dev mocha should</code>。装完后就可以开始测试之旅了。</p>\n<p>比如当前有一段js代码，放在<code>index.js</code>里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'Hello Tmall'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>那么对于这么一个函数，首先需要定一个测试用例，这里很明显，运行函数，得到字符串<code>Hello Tmall</code>就算测试通过。那么就可以按照Mocha的写法来写一个测试用例，因此新建一个测试代码在<code>test/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should get \"Hello Tmall\"'</span>, () =&gt; &#123;</span><br><span class=\"line\">    mylib().should.be.eql(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>测试用例写完了，那么怎么知道测试结果呢？</p>\n<p>由于我们之前已经安装了Mocha，可以在node_modules里面找到它，Mocha提供了命令行工具_mocha，可以直接在<code>./node_modules/.bin/_mocha</code>找到它，运行它就可以执行测试了：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB12qJ5LVXXXXbHXFXXXXXXXXXX-930-322.png\" alt=\"Hello Tmall\"></p>\n<p>这样就可以看到测试结果了。同样我们可以故意让测试不通过，修改<code>test.js</code>代码为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should get \"Hello Taobao\"'</span>, () =&gt; &#123;</span><br><span class=\"line\">    mylib().should.be.eql(<span class=\"string\">'Hello Taobao'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>就可以看到下图了：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1Uid7LVXXXXXNXFXXXXXXXXXX-1150-706.png\" alt=\"Taobao is different with Tmall\"></p>\n<p>Mocha实际上支持很多参数来提供很多灵活的控制，比如使用<code>./node_modules/.bin/_mocha --require should</code>，Mocha在启动测试时就会自己去加载Should.js，这样<code>test/test.js</code>里就不需要手动<code>require(&#39;should&#39;);</code>了。更多参数配置可以查阅<a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha官方文档</a>。</p>\n<p>那么这些测试代码分别是啥意思呢？</p>\n<p>这里首先引入了断言库Should.js，然后引入了自己的代码，这里<code>it()</code>函数定义了一个测试用例，通过Should.js提供的api，可以非常语义化的描述测试用例。那么describe又是干什么的呢？</p>\n<p><code>describe</code>干的事情就是给测试用例分组。为了尽可能多的覆盖各种情况，测试用例往往会有很多。这时候通过分组就可以比较方便的管理（这里提一句，<code>describe</code>是可以嵌套的，也就是说外层分组了之后，内部还可以分子组）。另外还有一个非常重要的特性，就是每个分组都可以进行预处理（<code>before</code>、<code>beforeEach</code>）和后处理（<code>after</code>, <code>afterEach</code>）。</p>\n<p>如果把<code>index.js</code>源码改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">bu</span> =&gt;</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;bu&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n\n<p>为了测试不同的bu，测试用例也对应的改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> bu = <span class=\"string\">'none'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'Welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">    before(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> bu = <span class=\"string\">'Tmall'</span>);</span><br><span class=\"line\">    after(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> bu = <span class=\"string\">'none'</span>);</span><br><span class=\"line\">    it(<span class=\"string\">'should get \"Hello Tmall\"'</span>, () =&gt; &#123;</span><br><span class=\"line\">      mylib(bu).should.be.eql(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  describe(<span class=\"string\">'Welcome to Taobao'</span>, () =&gt; &#123;</span><br><span class=\"line\">    before(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> bu = <span class=\"string\">'Taobao'</span>);</span><br><span class=\"line\">    after(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> bu = <span class=\"string\">'none'</span>);</span><br><span class=\"line\">    it(<span class=\"string\">'should get \"Hello Taobao\"'</span>, () =&gt; &#123;</span><br><span class=\"line\">      mylib(bu).should.be.eql(<span class=\"string\">'Hello Taobao'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>同样运行一下<code>./node_modules/.bin/_mocha</code>就可以看到如下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1KwBQLVXXXXbkaXXXXXXXXXXX-824-456.png\" alt=\"all bu welcomes you\"></p>\n<p>这里<code>before</code>会在每个分组的所有测试用例运行前，相对的<code>after</code>则会在所有测试用例运行后执行，如果要以测试用例为粒度，可以使用<code>beforeEach</code>和<code>afterEach</code>，这两个钩子则会分别在该分组每个测试用例运行前和运行后执行。由于很多代码都需要模拟环境，可以再这些<code>before</code>或<code>beforeEach</code>做这些准备工作，然后在<code>after</code>或<code>afterEach</code>里做回收操作。</p>\n<h3 id=\"异步代码的测试\"><a href=\"#异步代码的测试\" class=\"headerlink\" title=\"异步代码的测试\"></a>异步代码的测试</h3><h4 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h4><p>这里很显然代码都是同步的，但很多情况下我们的代码都是异步执行的，那么异步的代码要怎么测试呢？</p>\n<p>比如这里<code>index.js</code>的代码变成了一段异步代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">bu, callback</span>) =&gt;</span> process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> callback(<span class=\"string\">`Hello <span class=\"subst\">$&#123;bu&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>\n\n<p>由于源代码变成异步，所以测试用例就得做改造：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'Welcome to Tmall'</span>, done =&gt; &#123;</span><br><span class=\"line\">    mylib(<span class=\"string\">'Tmall'</span>, rst =&gt; &#123;</span><br><span class=\"line\">      rst.should.be.eql(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里传入<code>it</code>的第二个参数的函数新增了一个<code>done</code>参数，当有这个参数时，这个测试用例会被认为是异步测试，只有在<code>done()</code>执行时，才认为测试结束。那如果<code>done()</code>一直没有执行呢？Mocha会触发自己的超时机制，超过一定时间（默认是2s，时长可以通过<code>--timeout</code>参数设置）就会自动终止测试，并以测试失败处理。</p>\n<p>当然，<code>before</code>、<code>beforeEach</code>、<code>after</code>、<code>afterEach</code>这些钩子，同样支持异步，使用方式和<code>it</code>一样，在传入的函数第一个参数加上done，然后在执行完成后执行即可。</p>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>平常我们直接写回调会感觉自己很low，也容易出现回调金字塔，我们可以使用Promise来做异步控制，那么对于Promise控制下的异步代码，我们要怎么测试呢？</p>\n<p>首先把源码做点改造，返回一个Promise对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">bu</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">`Hello <span class=\"subst\">$&#123;bu&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>\n\n<p>当然，如果是co党也可以直接使用co包裹：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = co.wrap(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">bu</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;bu&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对应的修改测试用例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'Welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mylib(<span class=\"string\">'Tmall'</span>).should.be.fulfilledWith(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Should.js在8.x.x版本自带了Promise支持，可以直接使用<code>fullfilled()</code>、<code>rejected()</code>、<code>fullfilledWith()</code>、<code>rejectedWith()</code>等等一系列API测试Promise对象。</p>\n<blockquote>\n<p>注意：使用should测试Promise对象时，请一定要return，一定要return，一定要return，否则断言将无效</p>\n</blockquote>\n<h4 id=\"异步运行测试\"><a href=\"#异步运行测试\" class=\"headerlink\" title=\"异步运行测试\"></a>异步运行测试</h4><p>有时候，我们可能并不只是某个测试用例需要异步，而是整个测试过程都需要异步执行。比如测试Gulp插件的一个方案就是，首先运行Gulp任务，完成后测试生成的文件是否和预期的一致。那么如何异步执行整个测试过程呢？</p>\n<p>其实Mocha提供了异步启动测试，只需要在启动Mocha的命令后加上<code>--delay</code>参数，Mocha就会以异步方式启动。这种情况下我们需要告诉Mocha什么时候开始跑测试用例，只需要执行<code>run()</code>方法即可。把刚才的<code>test/test.js</code>修改成下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mylib(<span class=\"string\">'Tmall'</span>).should.be.fulfilledWith(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  run();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>直接执行<code>./node_modules/.bin/_mocha</code>就会发生下面这样的杯具：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1ZxtSLVXXXXc_XVXXXXXXXXXX-826-178.png\" alt=\"no cases\"></p>\n<p>那么加上<code>--delay</code>试试：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB11.R0LVXXXXXqXVXXXXXXXXXX-838-306.png\" alt=\"oh my green\"></p>\n<p>熟悉的绿色又回来了！</p>\n<h4 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h4><p>单元测试玩得差不多了，可以开始试试代码覆盖率了。首先需要安装代码覆盖率工具istanbul：<code>npm install --save-dev istanbul</code>，istanbul同样有命令行工具，在<code>./node_modules/.bin/istanbul</code>可以寻觅到它的身影。Node.js端做代码覆盖率测试很简单，只需要用istanbul启动Mocha即可，比如上面那个测试用例，运行<code>./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --delay</code>，可以看到下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1xmhULVXXXXXhaXXXXXXXXXXX-1296-848.jpg\" alt=\"my first coverage\"></p>\n<p>这就是代码覆盖率结果了，因为index.js中的代码比较简单，所以直接就100%了，那么修改一下源码，加个if吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">bu</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bu === <span class=\"string\">'Tmall'</span>) <span class=\"keyword\">return</span> resolve(<span class=\"string\">`Welcome to Tmall`</span>);</span><br><span class=\"line\">  resolve(<span class=\"string\">`Hello <span class=\"subst\">$&#123;bu&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>测试用例也跟着变一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mylib(<span class=\"string\">'Tmall'</span>).should.be.fulfilledWith(<span class=\"string\">'Welcome to Tmall'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  run();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>换了姿势，我们再来一次<code>./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --delay</code>，可以得到下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1slV0LVXXXXaDXVXXXXXXXXXX-1286-830.jpg\" alt=\"coverage again\"></p>\n<blockquote>\n<p>当使用istanbul运行Mocha时，istanbul命令自己的参数放在<code>--</code>之前，需要传递给Mocha的参数放在<code>--</code>之后</p>\n</blockquote>\n<p>如预期所想，覆盖率不再是100%了，这时候我想看看哪些代码被运行了，哪些没有，怎么办呢？</p>\n<p>运行完成后，项目下会多出一个<code>coverage</code>文件夹，这里就是放代码覆盖率结果的地方，它的结构大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── coverage.json</span><br><span class=\"line\">├── lcov-report</span><br><span class=\"line\">│   ├── base.css</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   ├── prettify.css</span><br><span class=\"line\">│   ├── prettify.js</span><br><span class=\"line\">│   ├── sort-arrow-sprite.png</span><br><span class=\"line\">│   ├── sorter.js</span><br><span class=\"line\">│   └── test</span><br><span class=\"line\">│       ├── index.html</span><br><span class=\"line\">│       └── index.js.html</span><br><span class=\"line\">└── lcov.info</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>coverage.json和lcov.info：测试结果描述的json文件，这个文件可以被一些工具读取，生成可视化的代码覆盖率结果，这个文件后面接入持续集成时还会提到。</li>\n<li>lcov-report：通过上面两个文件由工具处理后生成的覆盖率结果页面，打开可以非常直观的看到代码的覆盖率</li>\n</ul>\n<p>这里<code>open coverage/lcov-report/index.html</code>可以看到文件目录，点击对应的文件进入到文件详情，可以看到<code>index.js</code>的覆盖率如图所示：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1VChTLVXXXXX2aXXXXXXXXXXX-1196-434.png\" alt=\"coverage report\"></p>\n<p>这里有四个指标，通过这些指标，可以量化代码覆盖情况：</p>\n<ul>\n<li>statements：可执行语句执行情况</li>\n<li>branches：分支执行情况，比如if就会产生两个分支，我们只运行了其中的一个</li>\n<li>Functions：函数执行情况</li>\n<li>Lines：行执行情况</li>\n</ul>\n<p>下面代码部分，没有被执行过得代码会被标红，这些标红的代码往往是bug滋生的土壤，我们要尽可能消除这些红色。为此我们添加一个测试用例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mylib = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'My First Test'</span>, () =&gt; &#123;</span><br><span class=\"line\">    it(<span class=\"string\">'Welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mylib(<span class=\"string\">'Tmall'</span>).should.be.fulfilledWith(<span class=\"string\">'Welcome to Tmall'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(<span class=\"string\">'Hello Taobao'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mylib(<span class=\"string\">'Taobao'</span>).should.be.fulfilledWith(<span class=\"string\">'Hello Taobao'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  run();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再来一次<code>./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --delay</code>，重新打开覆盖率页面，可以看到红色已经消失了，覆盖率100%。目标完成，可以睡个安稳觉了</p>\n<h3 id=\"集成到package-json\"><a href=\"#集成到package-json\" class=\"headerlink\" title=\"集成到package.json\"></a>集成到package.json</h3><p>好了，一个简单的Node.js测试算是做完了，这些测试任务都可以集中写到<code>package.json</code>的<code>scripts</code>字段中，比如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"NODE_ENV=test ./node_modules/.bin/_mocha --require should\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cov\"</span>: <span class=\"string\">\"NODE_ENV=test ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --delay\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样直接运行<code>npm run test</code>就可以跑单元测试，运行<code>npm run cov</code>就可以跑代码覆盖率测试了，方便快捷</p>\n<h3 id=\"对多个文件分别做测试\"><a href=\"#对多个文件分别做测试\" class=\"headerlink\" title=\"对多个文件分别做测试\"></a>对多个文件分别做测试</h3><p>通常我们的项目都会有很多文件，比较推荐的方法是<strong>对每个文件单独去做测试</strong>。比如代码在<code>./lib/</code>下，那么<code>./lib/</code>文件夹下的每个文件都应该对应一个<code>./test/</code>文件夹下的<code>文件名_spec.js</code>的测试文件</p>\n<p>为什么要这样呢？不能直接运行<code>index.js</code>入口文件做测试吗？</p>\n<p>直接从入口文件来测其实是黑盒测试，我们并不知道代码内部运行情况，只是看某个特定的输入能否得到期望的输出。这通常可以覆盖到一些主要场景，但是在代码内部的一些边缘场景，就很难直接通过从入口输入特定的数据来解决了。比如代码里需要发送一个请求，入口只是传入一个url，url本身正确与否只是一个方面，当时的网络状况和服务器状况是无法预知的。传入相同的url，可能由于服务器挂了，也可能因为网络抖动，导致请求失败而抛出错误，如果这个错误没有得到处理，很可能导致故障。因此我们需要把黑盒打开，对其中的每个小块做白盒测试。</p>\n<p>当然，并不是所有的模块测起来都这么轻松，前端用Node.js常干的事情就是写构建插件和自动化工具，典型的就是Gulp插件和命令行工具，那么这俩种特定的场景要怎么测试呢？</p>\n<h3 id=\"Gulp插件的测试\"><a href=\"#Gulp插件的测试\" class=\"headerlink\" title=\"Gulp插件的测试\"></a>Gulp插件的测试</h3><p>现在前端构建使用最多的就是Gulp了，它简明的API、流式构建理念、以及在内存中操作的性能，让它备受追捧。虽然现在有像webpack这样的后起之秀，但Gulp依旧凭借着其繁荣的生态圈担当着前端构建的绝对主力。目前天猫前端就是使用Gulp作为代码构建工具。</p>\n<p>用了Gulp作为构建工具，也就免不了要开发Gulp插件来满足业务定制化的构建需求，构建过程本质上其实是对源代码进行修改，如果修改过程中出现bug很可能直接导致线上故障。因此针对Gulp插件，尤其是会修改源代码的Gulp插件一定要做仔细的测试来保证质量。</p>\n<h4 id=\"又一个煎蛋的栗子\"><a href=\"#又一个煎蛋的栗子\" class=\"headerlink\" title=\"又一个煎蛋的栗子\"></a>又一个煎蛋的栗子</h4><p>比如这里有个煎蛋的Gulp插件，功能就是往所有js代码前加一句注释<code>// 天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com</code>，Gulp插件的代码大概就是这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> through = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> PluginError = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>).PluginError;</span><br><span class=\"line\"><span class=\"keyword\">const</span> DEFAULT_CONFIG = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">  config = _.defaults(config || &#123;&#125;, DEFAULT_CONFIG);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through.obj(<span class=\"function\">(<span class=\"params\">file, encoding, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.isStream()) <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> PluginError(<span class=\"string\">'gulp-welcome-to-tmall'</span>, <span class=\"string\">`Stream is not supported`</span>));</span><br><span class=\"line\">    file.contents = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">`// 天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com\\n<span class=\"subst\">$&#123;file.contents.toString()&#125;</span>`</span>);</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>对于这么一段代码，怎么做测试呢？</p>\n<p>一种方式就是直接伪造一个文件传入，Gulp内部实际上是通过vinyl-fs从操作系统读取文件并做成虚拟文件对象，然后将这个虚拟文件对象交由through2创造的Transform来改写流中的内容，而外层任务之间通过orchestrator控制，保证执行顺序（如果不了解可以看看这篇翻译文章<a href=\"https://segmentfault.com/a/1190000000711469\" target=\"_blank\" rel=\"noopener\">Gulp思维——Gulp高级技巧</a>）。当然一个插件不需要关心Gulp的任务管理机制，只需要关心传入一个vinyl对象能否正确处理。因此只需要伪造一个虚拟文件对象传给我们的Gulp插件就可以了。</p>\n<p>首先设计测试用例，考虑两个主要场景：</p>\n<ol>\n<li>虚拟文件对象是流格式的，应该抛出错误</li>\n<li>虚拟文件对象是Buffer格式的，能够正常对文件内容进行加工，加工完的文件加上<code>// 天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com</code>的头</li>\n</ol>\n<p>对于第一个测试用例，我们需要创建一个流格式的vinyl对象。而对于各第二个测试用例，我们需要创建一个Buffer格式的vinyl对象。</p>\n<p>当然，首先我们需要一个被加工的源文件，放到<code>test/src/testfile.js</code>下吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个源文件非常简单，接下来的任务就是把它分别封装成流格式的vinyl对象和Buffer格式的vinyl对象。</p>\n<h5 id=\"构建Buffer格式的虚拟文件对象\"><a href=\"#构建Buffer格式的虚拟文件对象\" class=\"headerlink\" title=\"构建Buffer格式的虚拟文件对象\"></a>构建Buffer格式的虚拟文件对象</h5><p>构建一个Buffer格式的虚拟文件对象可以用vinyl-fs读取操作系统里的文件生成vinyl对象，Gulp内部也是使用它，默认使用Buffer：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vfs = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'welcome to Tmall'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work when buffer'</span>, done =&gt; &#123;</span><br><span class=\"line\">    vfs.src(path.join(__dirname, <span class=\"string\">'src'</span>, <span class=\"string\">'testfile.js'</span>))</span><br><span class=\"line\">      .pipe(welcome())</span><br><span class=\"line\">      .on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">vf</span>) </span>&#123;</span><br><span class=\"line\">        vf.contents.toString().should.be.eql(<span class=\"string\">`// 天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com\\n'use strict';\\nconsole.log('hello world');\\n`</span>);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样测了Buffer格式后算是完成了主要功能的测试，那么要如何测试流格式呢？</p>\n<h5 id=\"构建流格式的虚拟文件对象\"><a href=\"#构建流格式的虚拟文件对象\" class=\"headerlink\" title=\"构建流格式的虚拟文件对象\"></a>构建流格式的虚拟文件对象</h5><p>方案一和上面一样直接使用vinyl-fs，增加一个参数<code>buffer: false</code>即可：</p>\n<p>把代码修改成这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vfs = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> PluginError = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>).PluginError;</span><br><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'welcome to Tmall'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work when buffer'</span>, done =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// blabla</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should throw PluginError when stream'</span>, done =&gt; &#123;</span><br><span class=\"line\">    vfs.src(path.join(__dirname, <span class=\"string\">'src'</span>, <span class=\"string\">'testfile.js'</span>), &#123;</span><br><span class=\"line\">      buffer: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">      .pipe(welcome())</span><br><span class=\"line\">      .on(<span class=\"string\">'error'</span>, e =&gt; &#123;</span><br><span class=\"line\">        e.should.be.instanceOf(PluginError);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样vinyl-fs直接从文件系统读取文件并生成流格式的vinyl对象。</p>\n<p>如果内容并不来自于文件系统，而是来源于一个已经存在的可读流，要怎么把它封装成一个流格式的vinyl对象呢？</p>\n<p>这样的需求可以借助<code>vinyl-source-stream</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> source = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-source-stream'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vfs = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> PluginError = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-util'</span>).PluginError;</span><br><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'welcome to Tmall'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should work when buffer'</span>, done =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// blabla</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should throw PluginError when stream'</span>, done =&gt; &#123;</span><br><span class=\"line\">    fs.createReadStream(path.join(__dirname, <span class=\"string\">'src'</span>, <span class=\"string\">'testfile.js'</span>))</span><br><span class=\"line\">      .pipe(source())</span><br><span class=\"line\">      .pipe(welcome())</span><br><span class=\"line\">      .on(<span class=\"string\">'error'</span>, e =&gt; &#123;</span><br><span class=\"line\">        e.should.be.instanceOf(PluginError);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里首先通过<code>fs.createReadStream</code>创建了一个可读流，然后通过vinyl-source-stream把这个可读流包装成流格式的vinyl对象，并交给我们的插件做处理</p>\n<blockquote>\n<p>Gulp插件执行错误时请抛出PluginError，这样能够让gulp-plumber这样的插件进行错误管理，防止错误终止构建进程，这在gulp watch时非常有用</p>\n</blockquote>\n<h4 id=\"模拟Gulp运行\"><a href=\"#模拟Gulp运行\" class=\"headerlink\" title=\"模拟Gulp运行\"></a>模拟Gulp运行</h4><p>我们伪造的对象已经可以跑通功能测试了，但是这数据来源终究是自己伪造的，并不是用户日常的使用方式。如果采用最接近用户使用的方式来做测试，测试结果才更加可靠和真实。那么问题来了，怎么模拟真实的Gulp环境来做Gulp插件的测试呢？</p>\n<p>首先模拟一下我们的项目结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   └── testfile.js</span><br><span class=\"line\">├── gulpfile.js</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── testfile.js</span><br></pre></td></tr></table></figure>\n\n<p>一个简易的项目结构，源码放在src下，通过gulpfile来指定任务，构建结果放在build下。按照我们平常使用方式在<code>test</code>目录下搭好架子，并且写好gulpfile.js：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> welcome = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, cb =&gt; del(<span class=\"string\">'build'</span>, cb));</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'clean'</span>], () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/**/*'</span>)</span><br><span class=\"line\">    .pipe(welcome())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'build'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接着在测试代码里来模拟Gulp运行了，这里有两种方案：</p>\n<ol>\n<li>使用child_process库提供的<code>spawn</code>或<code>exec</code>开子进程直接跑<code>gulp</code>命令，然后测试build目录下是否是想要的结果</li>\n<li>直接在当前进程获取gulpfile中的Gulp实例来运行Gulp任务，然后测试build目录下是否是想要的结果</li>\n</ol>\n<p>开子进程进行测试有一些坑，istanbul测试代码覆盖率时时无法跨进程的，因此开子进程测试，首先需要子进程执行命令时加上istanbul，然后还需要手动去收集覆盖率数据，当开启多个子进程时还需要自己做覆盖率结果数据合并，相当麻烦。</p>\n<p>那么不开子进程怎么做呢？可以借助run-gulp-task这个工具来运行，其内部的机制就是首先获取gulpfile文件内容，在文件尾部加上<code>module.exports = gulp;</code>后require gulpfile从而获取Gulp实例，然后将Gulp实例递交给run-sequence调用内部未开放的API<code>gulp.run</code>来运行。</p>\n<p>我们采用不开子进程的方式，把运行Gulp的过程放在<code>before</code>钩子中，测试代码变成下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> run = <span class=\"built_in\">require</span>(<span class=\"string\">'run-gulp-task'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CWD = process.cwd();</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'welcome to Tmall'</span>, () =&gt; &#123;</span><br><span class=\"line\">  before(<span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    process.chdir(__dirname);</span><br><span class=\"line\">    run(<span class=\"string\">'default'</span>, path.join(__dirname, <span class=\"string\">'gulpfile.js'</span>))</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.chdir(CWD);</span><br><span class=\"line\">        done(e);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should work'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fs.readFileSync(path.join(__dirname, <span class=\"string\">'build'</span>, <span class=\"string\">'testfile.js'</span>)).toString().should.be.eql(<span class=\"string\">`// 天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com\\n'use strict';\\nconsole.log('hello world');\\n`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样由于不需要开子进程，代码覆盖率测试也可以和普通Node.js模块一样了</p>\n<h3 id=\"测试命令行输出\"><a href=\"#测试命令行输出\" class=\"headerlink\" title=\"测试命令行输出\"></a>测试命令行输出</h3><h4 id=\"双一个煎蛋的栗子\"><a href=\"#双一个煎蛋的栗子\" class=\"headerlink\" title=\"双一个煎蛋的栗子\"></a>双一个煎蛋的栗子</h4><p>当然前端写工具并不只限于Gulp插件，偶尔还会写一些辅助命令啥的，这些辅助命令直接在终端上运行，结果也会直接展示在终端上。比如一个简单的使用commander实现的命令行工具：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in index.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(path.join(__dirname, <span class=\"string\">'package.json'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">program.version(pkg.version)</span><br><span class=\"line\">  .usage(<span class=\"string\">'[options] &lt;file&gt;'</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">'-t, --test'</span>, <span class=\"string\">'Run test'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">file, prog</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prog.test) <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = program;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in bin/cli</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'../index.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\">!program.args[<span class=\"number\">0</span>] &amp;&amp; program.help();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"cli-test\"</span>: <span class=\"string\">\"./bin/cli\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拦截输出\"><a href=\"#拦截输出\" class=\"headerlink\" title=\"拦截输出\"></a>拦截输出</h4><p>要测试命令行工具，自然要模拟用户输入命令，这一次依旧选择不开子进程，直接用伪造一个<code>process.argv</code>交给<code>program.parse</code>即可。命令输入了问题也来了，数据是直接<code>console.log</code>的，要怎么拦截呢？</p>\n<p>这可以借助sinon来拦截<code>console.log</code>，而且sinon非常贴心的提供了mocha-sinon方便测试用，这样<code>test.js</code>大致就是这个样子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'should'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'mocha-sinon'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'../index'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> uncolor = <span class=\"built_in\">require</span>(<span class=\"string\">'uncolor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'cli-test'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst;</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sinon.stub(<span class=\"built_in\">console</span>, <span class=\"string\">'log'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      rst = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should print \"test\"'</span>, () =&gt; &#123;</span><br><span class=\"line\">    program.parse([</span><br><span class=\"line\">      <span class=\"string\">'node'</span>,</span><br><span class=\"line\">      <span class=\"string\">'./bin/cli'</span>,</span><br><span class=\"line\">      <span class=\"string\">'-t'</span>,</span><br><span class=\"line\">      <span class=\"string\">'file.js'</span></span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uncolor(rst).trim().should.be.eql(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PS：由于命令行输出时经常会使用colors这样的库来添加颜色，因此在测试时记得用uncolor把这些颜色移除</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Node.js相关的单元测试就扯这么多了，还有很多场景像服务器测试什么的就不扯了，因为我不会。当然前端最主要的工作还是写页面，接下来扯一扯如何对页面上的组件做测试。</p>\n<h2 id=\"页面测试\"><a href=\"#页面测试\" class=\"headerlink\" title=\"页面测试\"></a>页面测试</h2><p>对于浏览器里跑的前端代码，做测试要比Node.js模块要麻烦得多。Node.js模块纯js代码，使用V8运行在本地，测试用的各种各样的依赖和工具都能快速的安装，而前端代码不仅仅要测试js，CSS等等，更麻烦的事需要模拟各种各样的浏览器，比较常见的前端代码测试方案有下面几种：</p>\n<ol>\n<li>构建一个测试页面，人肉直接到虚拟机上开各种浏览器跑测试页面（比如公司的f2etest）。这个方案的缺点就是不好做代码覆盖率测试，也不好持续化集成，同时人肉工作较多</li>\n<li>使用PhantomJS构建一个伪造的浏览器环境跑单元测试，好处是解决了代码覆盖率问题，也可以做持续集成。这个方案的缺点是PhantomJS毕竟是Qt的webkit，并不是真实浏览器环境，PhantomJS也有各种各样兼容性坑</li>\n<li>通过Karma调用本机各种浏览器进行测试，好处是可以跨浏览器做测试，也可以测试覆盖率，但持续集成时需要注意只能开PhantomJS做测试，毕竟集成的Linux环境不可能有浏览器。这可以说是目前看到的最好的前端代码测试方式了</li>\n</ol>\n<blockquote>\n<p>这里以gulp为构建工具做测试，后面在React组件测试部分再介绍以webpack为构建工具做测试</p>\n</blockquote>\n<h3 id=\"叒一个煎蛋的栗子\"><a href=\"#叒一个煎蛋的栗子\" class=\"headerlink\" title=\"叒一个煎蛋的栗子\"></a>叒一个煎蛋的栗子</h3><p>前端代码依旧是js，一样可以用Mocha+Should.js来做单元测试。打开node_modules下的Mocha和Should.js，你会发现这些优秀的开源工具已经非常贴心的提供了可在浏览器中直接运行的版本：<code>mocha/mocha.js</code>和<code>should/should.min.js</code>，只需要把他们通过<code>script</code>标签引入即可，另外Mocha还需要引入自己的样式<code>mocha/mocha.css</code></p>\n<p>首先看一下我们的前端项目结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── gulpfile.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">└── test</span><br><span class=\"line\">    ├── test.html</span><br><span class=\"line\">    └── test.js</span><br></pre></td></tr></table></figure>\n\n<p>比如这里源码<code>src/index.js</code>就是定义一个全局函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  ctn.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'tmall'</span>);</span><br><span class=\"line\">  ctn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com'</span>));</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(ctn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而测试页面<code>test/test.html</code>大致上是这个样子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../node_modules/mocha/mocha.css\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../node_modules/mocha/mocha.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../node_modules/should/should.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mocha\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../src/index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"test.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>head里引入了测试框架Mocha和断言库Should.js，测试的结果会被显示在<code>&lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</code>这个容器里，而<code>test/test.js</code>里则是我们的测试的代码。</p>\n<p>前端页面上测试和Node.js上测试没啥太大不同，只是需要指定Mocha使用的UI，并需要手动调用<code>mocha.run()</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mocha.ui(<span class=\"string\">'bdd'</span>);</span><br><span class=\"line\">describe(<span class=\"string\">'Welcome to Tmall'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.render();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'Hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'tmall'</span>).textContent.should.be.eql(<span class=\"string\">'天猫前端招人，有意向的请发送简历至lingyucoder@gmail.com'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">mocha.run();</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器里打开<code>test/test.html</code>页面，就可以看到效果了：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB11u5oLVXXXXbQXXXXXXXXXXXX-1656-492.png\" alt=\"test page\"></p>\n<p>在不同的浏览器里打开这个页面，就可以看到当前浏览器的测试了。这种方式能兼容最多的浏览器，当然要跨机器之前记得把资源上传到一个测试机器都能访问到的地方，比如CDN。</p>\n<p>测试页面有了，那么来试试接入PhantomJS吧</p>\n<h3 id=\"使用PhantomJS进行测试\"><a href=\"#使用PhantomJS进行测试\" class=\"headerlink\" title=\"使用PhantomJS进行测试\"></a>使用PhantomJS进行测试</h3><p>PhantomJS是一个模拟的浏览器，它能执行js，甚至还有webkit渲染引擎，只是没有浏览器的界面上渲染结果罢了。我们可以使用它做很多事情，比如对网页进行截图，写爬虫爬取异步渲染的页面，以及接下来要介绍的——对页面做测试。</p>\n<p>当然，这里我们不是直接使用PhantomJS，而是使用mocha-phantomjs来做测试。<code>npm install --save-dev mocha-phantomjs</code>安装完成后，就可以运行命令<code>./node_modules/.bin/mocha-phantomjs ./test/test.html</code>来对上面那个<code>test/test.html</code>的测试了：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1qUt1LVXXXXaRaXXXXXXXXXXX-934-324.png\" alt=\"PhantomJS test\"></p>\n<p>单元测试没问题了，接下来就是代码覆盖率测试</p>\n<h4 id=\"覆盖率打点\"><a href=\"#覆盖率打点\" class=\"headerlink\" title=\"覆盖率打点\"></a>覆盖率打点</h4><p>首先第一步，改写我们的<code>gulpfile.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> istanbul = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-istanbul'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">'src/**/*.js'</span>])</span><br><span class=\"line\">    .pipe(istanbul(&#123;</span><br><span class=\"line\">      coverageVariable: <span class=\"string\">'__coverage__'</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'build-test'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里把覆盖率结果保存到<code>__coverage__</code>里面，把打完点的代码放到<code>build-test</code>目录下，比如刚才的<code>src/index.js</code>的代码，在运行<code>gulp test</code>后，会生成<code>build-test/index.js</code>，内容大致是这个样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __cov_WzFiasMcIh_mBvAjOuQiQg = (<span class=\"built_in\">Function</span>(<span class=\"string\">'return this'</span>))();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!__cov_WzFiasMcIh_mBvAjOuQiQg.__coverage__) &#123; __cov_WzFiasMcIh_mBvAjOuQiQg.__coverage__ = &#123;&#125;; &#125;</span><br><span class=\"line\">__cov_WzFiasMcIh_mBvAjOuQiQg = __cov_WzFiasMcIh_mBvAjOuQiQg.__coverage__;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(__cov_WzFiasMcIh_mBvAjOuQiQg[<span class=\"string\">'/Users/lingyu/gitlab/dev/mui/test-page/src/index.js'</span>])) &#123;</span><br><span class=\"line\">   __cov_WzFiasMcIh_mBvAjOuQiQg[<span class=\"string\">'/Users/lingyu/gitlab/dev/mui/test-page/src/index.js'</span>] = &#123;<span class=\"string\">\"path\"</span>:<span class=\"string\">\"/Users/lingyu/gitlab/dev/mui/test-page/src/index.js\"</span>,<span class=\"string\">\"s\"</span>:&#123;<span class=\"string\">\"1\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"2\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"3\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"4\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"5\"</span>:<span class=\"number\">0</span>&#125;,<span class=\"string\">\"b\"</span>:&#123;&#125;,<span class=\"string\">\"f\"</span>:&#123;<span class=\"string\">\"1\"</span>:<span class=\"number\">0</span>&#125;,<span class=\"string\">\"fnMap\"</span>:&#123;<span class=\"string\">\"1\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"(anonymous_1)\"</span>,<span class=\"string\">\"line\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"loc\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">16</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">27</span>&#125;&#125;&#125;&#125;,<span class=\"string\">\"statementMap\"</span>:&#123;<span class=\"string\">\"1\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">0</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">6</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">1</span>&#125;&#125;,<span class=\"string\">\"2\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">2</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">42</span>&#125;&#125;,<span class=\"string\">\"3\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">3</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">2</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">3</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">34</span>&#125;&#125;,<span class=\"string\">\"4\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">2</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">85</span>&#125;&#125;,<span class=\"string\">\"5\"</span>:&#123;<span class=\"string\">\"start\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">5</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">2</span>&#125;,<span class=\"string\">\"end\"</span>:&#123;<span class=\"string\">\"line\"</span>:<span class=\"number\">5</span>,<span class=\"string\">\"column\"</span>:<span class=\"number\">33</span>&#125;&#125;&#125;,<span class=\"string\">\"branchMap\"</span>:&#123;&#125;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__cov_WzFiasMcIh_mBvAjOuQiQg = __cov_WzFiasMcIh_mBvAjOuQiQg[<span class=\"string\">'/Users/lingyu/gitlab/dev/mui/test-page/src/index.js'</span>];</span><br><span class=\"line\">__cov_WzFiasMcIh_mBvAjOuQiQg.s[<span class=\"string\">'1'</span>]++;<span class=\"built_in\">window</span>.render=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;__cov_WzFiasMcIh_mBvAjOuQiQg.f[<span class=\"string\">'1'</span>]++;__cov_WzFiasMcIh_mBvAjOuQiQg.s[<span class=\"string\">'2'</span>]++;<span class=\"keyword\">var</span> ctn=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);__cov_WzFiasMcIh_mBvAjOuQiQg.s[<span class=\"string\">'3'</span>]++;ctn.setAttribute(<span class=\"string\">'id'</span>,<span class=\"string\">'tmall'</span>);__cov_WzFiasMcIh_mBvAjOuQiQg.s[<span class=\"string\">'4'</span>]++;ctn.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'天猫前端招人\\uFF0C有意向的请发送简历至lingyucoder@gmail.com'</span>));__cov_WzFiasMcIh_mBvAjOuQiQg.s[<span class=\"string\">'5'</span>]++;<span class=\"built_in\">document</span>.body.appendChild(ctn);&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这都什么鬼！不管了，反正运行它就好。把<code>test/test.html</code>里面引入的代码从<code>src/index.js</code>修改为<code>build-test/index.js</code>，保证页面运行时使用的是编译后的代码。</p>\n<h4 id=\"编写钩子\"><a href=\"#编写钩子\" class=\"headerlink\" title=\"编写钩子\"></a>编写钩子</h4><p>运行数据会存放到变量<code>__coverage__</code>里，但是我们还需要一段钩子代码在单元测试结束后获取这个变量里的内容。把钩子代码放在<code>test/hook.js</code>下，里面内容这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  afterEnd: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">runner</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coverage = runner.page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.__coverage__;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (coverage) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Writing coverage to coverage/coverage.json'</span>);</span><br><span class=\"line\">      fs.write(<span class=\"string\">'coverage/coverage.json'</span>, <span class=\"built_in\">JSON</span>.stringify(coverage), <span class=\"string\">'w'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'No coverage data generated'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样准备工作工作就大功告成了，执行命令<code>./node_modules/.bin/mocha-phantomjs ./test/test.html --hooks ./test/hook.js</code>，可以看到如下图结果，同时覆盖率结果被写入到<code>coverage/coverage.json</code>里面了。</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1goylLVXXXXc8XXXXXXXXXXXX-1356-416.png\" alt=\"coverage hook\"></p>\n<h4 id=\"生成页面\"><a href=\"#生成页面\" class=\"headerlink\" title=\"生成页面\"></a>生成页面</h4><p>有了结果覆盖率结果就可以生成覆盖率页面了，首先看看覆盖率概况吧。执行命令<code>./node_modules/.bin/istanbul report --root coverage text-summary</code>，可以看到下图：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1dC5kLVXXXXXRXpXXXXXXXXXX-1338-354.png\" alt=\"coverage summary\"></p>\n<p>还是原来的配方，还是想熟悉的味道。接下来运行<code>./node_modules/.bin/istanbul report --root coverage lcov</code>生成覆盖率页面，执行完后<code>open coverage/lcov-report/index.html</code>，点击进入到<code>src/index.js</code>：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1ZqV.LVXXXXXFXVXXXXXXXXXX-1480-470.png\" alt=\"coverage page\"></p>\n<p>一颗赛艇！这样我们对前端代码就能做覆盖率测试了</p>\n<h3 id=\"接入Karma\"><a href=\"#接入Karma\" class=\"headerlink\" title=\"接入Karma\"></a>接入Karma</h3><p><a href=\"https://karma-runner.github.io/0.13/index.html\" target=\"_blank\" rel=\"noopener\">Karma</a>是一个测试集成框架，可以方便地以插件的形式集成测试框架、测试环境、覆盖率工具等等。Karma已经有了一套相当完善的插件体系，这里尝试在PhantomJS、Chrome、FireFox下做测试，首先需要使用npm安装一些依赖：</p>\n<ol>\n<li>karma：框架本体</li>\n<li>karma-mocha：Mocha测试框架</li>\n<li>karma-coverage：覆盖率测试</li>\n<li>karma-spec-reporter：测试结果输出</li>\n<li>karma-phantomjs-launcher：PhantomJS环境</li>\n<li>phantomjs-prebuilt: PhantomJS最新版本</li>\n<li>karma-chrome-launcher：Chrome环境</li>\n<li>karma-firefox-launcher：Firefox环境</li>\n</ol>\n<p>安装完成后，就可以开启我们的Karma之旅了。还是之前的那个项目，我们把该清除的清除，只留下源文件和而是文件，并增加一个karma.conf.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── karma.conf.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">└── test</span><br><span class=\"line\">    └── test.js</span><br></pre></td></tr></table></figure>\n\n<p><code>karma.conf.js</code>是Karma框架的配置文件，在这个例子里，它大概是这个样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>],</span><br><span class=\"line\">    files: [</span><br><span class=\"line\">      <span class=\"string\">'./node_modules/should/should.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'src/**/*.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'test/**/*.js'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"string\">'src/**/*.js'</span>: [<span class=\"string\">'coverage'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [<span class=\"string\">'karma-mocha'</span>, <span class=\"string\">'karma-phantomjs-launcher'</span>, <span class=\"string\">'karma-chrome-launcher'</span>, <span class=\"string\">'karma-firefox-launcher'</span>, <span class=\"string\">'karma-coverage'</span>, <span class=\"string\">'karma-spec-reporter'</span>],</span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>, <span class=\"string\">'Firefox'</span>, <span class=\"string\">'Chrome'</span>],</span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>],</span><br><span class=\"line\">    coverageReporter: &#123;</span><br><span class=\"line\">      dir: <span class=\"string\">'coverage'</span>,</span><br><span class=\"line\">      reporters: [&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">        subdir: <span class=\"string\">'.'</span>,</span><br><span class=\"line\">        file: <span class=\"string\">'coverage.json'</span>,</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'lcov'</span>,</span><br><span class=\"line\">        subdir: <span class=\"string\">'.'</span></span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text-summary'</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这些配置都是什么意思呢？这里挨个说明一下：</p>\n<ul>\n<li>frameworks: 使用的测试框架，这里依旧是我们熟悉又亲切的Mocha</li>\n<li>files：测试页面需要加载的资源，上面的test目录下已经没有test.html了，所有需要加载内容都在这里指定，如果是CDN上的资源，直接写URL也可以，不过建议尽可能使用本地资源，这样测试更快而且即使没网也可以测试。这个例子里，第一行载入的是断言库Should.js，第二行是src下的所有代码，第三行载入测试代码</li>\n<li>preprocessors：配置预处理器，在上面files载入对应的文件前，如果在这里配置了预处理器，会先对文件做处理，然后载入处理结果。这个例子里，需要对src目录下的所有资源添加覆盖率打点（这一步之前是通过gulp-istanbul来做，现在karma-coverage框架可以很方便的处理，也不需要钩子啥的了）。后面做React组件测试时也会在这里使用webpack</li>\n<li>plugins：安装的插件列表</li>\n<li>browsers：需要测试的浏览器，这里我们选择了PhantomJS、FireFox、Chrome</li>\n<li>reporters：需要生成哪些代码报告</li>\n<li>coverageReporter：覆盖率报告要如何生成，这里我们期望生成和之前一样的报告，包括覆盖率页面、lcov.info、coverage.json、以及命令行里的提示</li>\n</ul>\n<p>好了，配置完成，来试试吧，运行<code>./node_modules/karma/bin/karma start --single-run</code>，可以看到如下输出：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1QzGnLVXXXXXeXpXXXXXXXXXX-2076-1632.jpg\" alt=\"run karma\"></p>\n<p>可以看到，Karma首先会在9876端口开启一个本地服务，然后分别启动PhantomJS、FireFox、Chrome去加载这个页面，收集到测试结果信息之后分别输出，这样跨浏览器测试就解决啦。如果要新增浏览器就安装对应的浏览器插件，然后在<code>browsers</code>里指定一下即可，非常灵活方便。</p>\n<p>那如果我的mac电脑上没有IE，又想测IE，怎么办呢？可以直接运行<code>./node_modules/karma/bin/karma start</code>启动本地服务器，然后使用其他机器开对应浏览器直接访问本机的9876端口（当然这个端口是可配置的）即可，同样移动端的测试也可以采用这个方法。这个方案兼顾了前两个方案的优点，弥补了其不足，是目前看到最优秀的前端代码测试方案了</p>\n<h3 id=\"React组件测试\"><a href=\"#React组件测试\" class=\"headerlink\" title=\"React组件测试\"></a>React组件测试</h3><p>去年React旋风一般席卷全球，当然天猫也在技术上紧跟时代脚步。天猫商家端业务已经全面切入React，形成了React组件体系，几乎所有新业务都采用React开发，而老业务也在不断向React迁移。React大红大紫，这里单独拉出来讲一讲React+webpack的打包方案如何进行测试</p>\n<blockquote>\n<p>这里只聊React Web，不聊React Native</p>\n</blockquote>\n<blockquote>\n<p>事实上天猫目前并未采用webpack打包，而是Gulp+Babel编译React CommonJS代码成AMD模块使用，这是为了能够在新老业务使用上更加灵活，当然也有部分业务采用webpack打包并上线</p>\n</blockquote>\n<h4 id=\"叕一个煎蛋的栗子\"><a href=\"#叕一个煎蛋的栗子\" class=\"headerlink\" title=\"叕一个煎蛋的栗子\"></a>叕一个煎蛋的栗子</h4><p>这里创建一个React组件，目录结构大致这样（这里略过CSS相关部分，只要跑通了，集成CSS像PostCSS、Less都没啥问题）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── demo</span><br><span class=\"line\">├── karma.conf.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   └── index.jsx</span><br><span class=\"line\">├── test</span><br><span class=\"line\">│   └── index_spec.jsx</span><br><span class=\"line\">├── webpack.dev.js</span><br><span class=\"line\">└── webpack.pub.js</span><br></pre></td></tr></table></figure>\n\n<p>React组件源码<code>src/index.jsx</code>大概是这个样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Welcome</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Welcome.displayName = <span class=\"string\">'Welcome'</span>;</span><br><span class=\"line\">Welcome.propTypes = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * content of element</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  content: React.PropTypes.string</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Welcome.defaultProps = &#123;</span><br><span class=\"line\">  content: <span class=\"string\">'Hello Tmall'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Welcome;</span><br></pre></td></tr></table></figure>\n\n<p>那么对应的<code>test/index_spec.jsx</code>则大概是这个样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'should'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Welcome <span class=\"keyword\">from</span> <span class=\"string\">'../src/index.jsx'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TestUtils <span class=\"keyword\">from</span> <span class=\"string\">'react-addons-test-utils'</span>;</span><br><span class=\"line\">describe(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(container);</span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(container);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'Hello Tmall'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cp = ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Welcome</span>/&gt;</span></span>, container);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> welcome = TestUtils.findRenderedComponentWithType(cp, Welcome);</span><br><span class=\"line\">    ReactDOM.findDOMnode(welcome).textContent.should.be.eql(<span class=\"string\">'Hello Tmall'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于是测试React，自然要使用React的TestUtils，这个工具库提供了不少方便查找节点和组件的方法，最重要的是它提供了模拟事件的API，这可以说是UI测试最重要的一个功能。更多关于TestUtils的使用请参考<a href=\"https://facebook.github.io/react/docs/test-utils.html\" target=\"_blank\" rel=\"noopener\">React官网</a>，这里就不扯了…</p>\n<p>代码有了，测试用例也有了，接下就差跑起来了。<code>karma.conf.js</code>肯定就和上面不一样了，首先它要多一个插件<code>karma-webpack</code>，因为我们的React组件是需要webpack打包的，不打包的代码压根就没法运行。另外还需要注意代码覆盖率测试也出现了变化。因为现在多了一层Babel编译，Babel编译ES6、ES7源码生成ES5代码后会产生很多polyfill代码，因此如果对build完成之后的代码做覆盖率测试会包含这些polyfill代码，这样测出来的覆盖率显然是不可靠的，这个问题可以通过<code>isparta-loader</code>来解决。React组件的<code>karma.conf.js</code>大概是这个样子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>],</span><br><span class=\"line\">    files: [</span><br><span class=\"line\">      <span class=\"string\">'./node_modules/phantomjs-polyfill/bind-polyfill.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'test/**/*_spec.jsx'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    plugins: [<span class=\"string\">'karma-webpack'</span>, <span class=\"string\">'karma-mocha'</span>,, <span class=\"string\">'karma-chrome-launcher'</span>, <span class=\"string\">'karma-firefox-launcher'</span>, <span class=\"string\">'karma-phantomjs-launcher'</span>, <span class=\"string\">'karma-coverage'</span>, <span class=\"string\">'karma-spec-reporter'</span>],</span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>, <span class=\"string\">'Firefox'</span>, <span class=\"string\">'Chrome'</span>],</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"string\">'test/**/*_spec.jsx'</span>: [<span class=\"string\">'webpack'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>],</span><br><span class=\"line\">    coverageReporter: &#123;</span><br><span class=\"line\">      dir: <span class=\"string\">'coverage'</span>,</span><br><span class=\"line\">      reporters: [&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">        subdir: <span class=\"string\">'.'</span>,</span><br><span class=\"line\">        file: <span class=\"string\">'coverage.json'</span>,</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'lcov'</span>,</span><br><span class=\"line\">        subdir: <span class=\"string\">'.'</span></span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text-summary'</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpack: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/\\.jsx?/</span>,</span><br><span class=\"line\">          loaders: [<span class=\"string\">'babel'</span>]</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        preLoaders: [&#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">          include: [path.resolve(<span class=\"string\">'src/'</span>)],</span><br><span class=\"line\">          loader: <span class=\"string\">'isparta'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpackMiddleware: &#123;</span><br><span class=\"line\">      noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里相对于之前的karma.conf.js，主要有以下几点区别：</p>\n<ol>\n<li>由于webpack的打包功能，我们在测试代码里直接import组件代码，因此不再需要在files里手动引入组件代码</li>\n<li>预处理里面需要对每个测试文件都做webpack打包</li>\n<li>添加webpack编译相关配置，在编译源码时，需要定义preLoaders，并使用isparta-loader做代码覆盖率打点</li>\n<li>添加webpackMiddleware配置，这里noInfo作用是不需要输出webpack编译时那一大串信息</li>\n</ol>\n<p>这样配置基本上就完成了，跑一把<code>./node_modules/karma/bin/karma start --single-run</code>：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1TDN.LVXXXXXWXVXXXXXXXXXX-2100-1530.jpg\" alt=\"react karma\"></p>\n<p>很好，结果符合预期。<code>open coverage/lcov-report/index.html</code>打开覆盖率页面：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1UBWaLVXXXXXuXVXXXXXXXXXX-1782-938.jpg\" alt=\"react coverage\"></p>\n<p>鹅妹子音！！！直接对jsx代码做的覆盖率测试！这样React组件的测试大体上就完工了</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>前端的代码测试主要难度是如何模拟各种各样的浏览器环境，Karma给我们提供了很好地方式，对于本地有的浏览器能自动打开并测试，本地没有的浏览器则提供直接访问的页面。前端尤其是移动端浏览器种类繁多，很难做到完美，但我们可以通过这种方式实现主流浏览器的覆盖，保证每次上线大多数用户没有问题。</p>\n<h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>测试结果有了，接下来就是把这些测试结果接入到持续集成之中。持续集成是一种非常优秀的多人开发实践，通过代码push触发钩子，实现自动运行编译、测试等工作。接入持续集成后，我们的每一次push代码，每个Merge Request都会生成对应的测试结果，项目的其他成员可以很清楚地了解到新代码是否影响了现有的功能，在接入自动告警后，可以在代码提交阶段就快速发现错误，提升开发迭代效率。</p>\n<p>持续集成会在每次集成时提供一个几乎空白的虚拟机器，并拷贝用户提交的代码到机器本地，通过读取用户项目下的持续集成配置，自动化的安装环境和依赖，编译和测试完成后生成报告，在一段时间之后释放虚拟机器资源。</p>\n<h3 id=\"开源的持续集成\"><a href=\"#开源的持续集成\" class=\"headerlink\" title=\"开源的持续集成\"></a>开源的持续集成</h3><p>开源比较出名的持续集成服务当属<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis</a>，而代码覆盖率则通过<a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"noopener\">Coveralls</a>，只要有GitHub账户，就可以很轻松的接入Travis和Coveralls，在网站上勾选了需要持续集成的项目以后，每次代码push就会触发自动化测试。这两个网站在跑完测试以后，会自动生成测试结果的小图片</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1veJ7LVXXXXXMaXXXXXXXXXXX-420-64.png\" alt=\"build result\"></p>\n<p>Travis会读取项目下的<code>travis.yml</code>文件，一个简单的例子：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"stable\"</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"4.0.0\"</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"5.0.0\"</span></span><br><span class=\"line\"><span class=\"attr\">script:</span> <span class=\"string\">\"npm run test\"</span></span><br><span class=\"line\"><span class=\"attr\">after_script:</span> <span class=\"string\">\"npm install coveralls@2.10.0 &amp;&amp; cat ./coverage/lcov.info | coveralls\"</span></span><br></pre></td></tr></table></figure>\n\n<p>language定义了运行环境的语言，而对应的node_js可以定义需要在哪几个Node.js版本做测试，比如这里的定义，代表着会分别在最新稳定版、4.0.0、5.0.0版本的Node.js环境下做测试</p>\n<p>而script则是测试利用的命令，一般情况下，都应该把自己这个项目开发所需要的命令都写在package.json的scripts里面，比如我们的测试方法<code>./node_modules/karma/bin/karma start --single-run</code>就应当这样写到scripts里：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"./node_modules/karma/bin/karma start --single-run\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而after_script则是在测试完成之后运行的命令，这里需要上传覆盖率结果到coveralls，只需要安装coveralls库，然后获取lcov.info上传给Coveralls即可</p>\n<blockquote>\n<p>更多配置请参照Travis官网介绍</p>\n</blockquote>\n<p>这样配置后，每次push的结果都可以上Travis和Coveralls看构建和代码覆盖率结果了</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1eC41LVXXXXXhapXXXXXXXXXX-2074-806.png\" alt=\"travis\"></p>\n<p><img src=\"https://img.alicdn.com/tps/TB1KSacLVXXXXXxXVXXXXXXXXXX-1924-1468.jpg\" alt=\"coveralls\"></p>\n<h3 id=\"内网的持续集成\"><a href=\"#内网的持续集成\" class=\"headerlink\" title=\"内网的持续集成\"></a>内网的持续集成</h3><p>当然，我们的工作相关代码肯定不能发到GitHub上，但这并不意味着我们不能做持续集成了。内网有<a href=\"cise.alibaba-inc.com\">CISE平台</a>和<a href=\"ci.uitest.taobao.net/task\">UITest平台</a>可以做同样的事情。</p>\n<p>对于需要加入持续集成的项目，大致上需要如下几步：</p>\n<ol>\n<li>开启项目持续集成功能</li>\n<li>创建配置文件</li>\n<li>配置插件和命令</li>\n<li>将测试结果标志写入README</li>\n</ol>\n<h4 id=\"开启项目持续集成\"><a href=\"#开启项目持续集成\" class=\"headerlink\" title=\"开启项目持续集成\"></a>开启项目持续集成</h4><p>GitLab项目页面 -&gt; 左侧菜单Setting -&gt; 左侧菜单Services -&gt; CISE -&gt; 勾选Active -&gt; SAVE CHANGES，这样就可以开启项目持续集成了</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1zf88LVXXXXXuaXXXXXXXXXXX-2746-692.jpg\" alt=\"cise open\"></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>与开源的Travis相同，CISE需要在项目下创建一个<code>.cise.yml</code>，内容大致如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stage:</span></span><br><span class=\"line\">  <span class=\"attr\">node-4:</span></span><br><span class=\"line\">    <span class=\"attr\">prepare:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 nvm, 存在则不重复安装</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ls</span> <span class=\"string\">/root/nvm</span> <span class=\"string\">||</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">http://gitlab.alibaba-inc.com/node/nvm.git</span> <span class=\"string\">--depth</span> <span class=\"number\">1</span> <span class=\"string\">/root/nvm</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">'source /root/nvm/nvm.sh'</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/root/.bashrc</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nvm</span> <span class=\"string\">use</span> <span class=\"number\">4.0</span><span class=\"number\">.0</span> <span class=\"string\">||</span> <span class=\"string\">nvm</span> <span class=\"string\">install</span> <span class=\"number\">4.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nvm</span> <span class=\"string\">alias</span> <span class=\"string\">default</span> <span class=\"number\">4.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 tnpm, 存在则不重新安装</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">-v</span> <span class=\"string\">||</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">--silent</span> <span class=\"string\">-g</span> <span class=\"string\">tnpm</span> <span class=\"string\">--registry=http://registry.npm.alibaba-inc.com</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">@ali/def-ci</span> <span class=\"string\">--silent</span></span><br><span class=\"line\">      <span class=\"comment\"># --unsafe-perm: http://gitlab.alibaba-inc.com/uitest/knight/issues/6</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">install</span> <span class=\"string\">--silent</span> <span class=\"string\">--unsafe-perm</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">node</span> <span class=\"string\">-v;</span> <span class=\"string\">npm</span> <span class=\"string\">-v;</span> <span class=\"string\">tnpm</span> <span class=\"string\">-v</span></span><br><span class=\"line\">    <span class=\"attr\">unit_test:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">fed-ci</span> <span class=\"string\">--repo</span> <span class=\"string\">$&#123;scm_url&#125;</span> <span class=\"string\">--branch</span> <span class=\"string\">$&#123;scm_branch&#125;</span> <span class=\"string\">--commitId</span> <span class=\"string\">$&#123;source_version&#125;</span> <span class=\"string\">--ciseBuildId</span> <span class=\"string\">$&#123;build_idx&#125;</span> <span class=\"string\">--ciseId</span> <span class=\"string\">$&#123;task_id&#125;</span> <span class=\"string\">--empId</span> <span class=\"string\">$&#123;creator_emp_id&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">node-5:</span></span><br><span class=\"line\">    <span class=\"attr\">prepare:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 nvm, 存在则不重复安装</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ls</span> <span class=\"string\">/root/nvm</span> <span class=\"string\">||</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">http://gitlab.alibaba-inc.com/node/nvm.git</span> <span class=\"string\">--depth</span> <span class=\"number\">1</span> <span class=\"string\">/root/nvm</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">'source /root/nvm/nvm.sh'</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/root/.bashrc</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nvm</span> <span class=\"string\">use</span> <span class=\"number\">5.0</span><span class=\"number\">.0</span> <span class=\"string\">||</span> <span class=\"string\">nvm</span> <span class=\"string\">install</span> <span class=\"number\">5.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nvm</span> <span class=\"string\">alias</span> <span class=\"string\">default</span> <span class=\"number\">5.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 tnpm, 存在则不重新安装</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">-v</span> <span class=\"string\">||</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">--silent</span> <span class=\"string\">-g</span> <span class=\"string\">tnpm</span> <span class=\"string\">--registry=http://registry.npm.alibaba-inc.com</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">@ali/def-ci</span> <span class=\"string\">--silent</span></span><br><span class=\"line\">      <span class=\"comment\"># --unsafe-perm: http://gitlab.alibaba-inc.com/uitest/knight/issues/6</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tnpm</span> <span class=\"string\">install</span> <span class=\"string\">--silent</span> <span class=\"string\">--unsafe-perm</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">node</span> <span class=\"string\">-v;</span> <span class=\"string\">npm</span> <span class=\"string\">-v;</span> <span class=\"string\">tnpm</span> <span class=\"string\">-v</span></span><br><span class=\"line\">    <span class=\"attr\">unit_test:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">fed-ci</span> <span class=\"string\">--repo</span> <span class=\"string\">$&#123;scm_url&#125;</span> <span class=\"string\">--branch</span> <span class=\"string\">$&#123;scm_branch&#125;</span> <span class=\"string\">--commitId</span> <span class=\"string\">$&#123;source_version&#125;</span> <span class=\"string\">--ciseBuildId</span> <span class=\"string\">$&#123;build_idx&#125;</span> <span class=\"string\">--ciseId</span> <span class=\"string\">$&#123;task_id&#125;</span> <span class=\"string\">--empId</span> <span class=\"string\">$&#123;creator_emp_id&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pipeline:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">node-4,</span> <span class=\"string\">node-5</span></span><br></pre></td></tr></table></figure>\n\n<p>CISE的配置稍微复杂一些，但是更加灵活。通过上面的配置，会分别在Node.js 4.0.0版本和Node.js 5.0.0版本进行测试，在prepare里可以清除的看到需要做哪些准备，</p>\n<h4 id=\"配置插件和命令\"><a href=\"#配置插件和命令\" class=\"headerlink\" title=\"配置插件和命令\"></a>配置插件和命令</h4><p>而在package.json里需要配置需要配置对应的scripts和ci插件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ci\"</span>: <span class=\"string\">\"./node_modules/karma/bin/karma start --single-run\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ciPlugins\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CISE会自动执行<code>npm run ci</code>，并自动收集<code>coverage/coverage.json</code>生成覆盖率结果</p>\n<h4 id=\"将测试结果标志写入README\"><a href=\"#将测试结果标志写入README\" class=\"headerlink\" title=\"将测试结果标志写入README\"></a>将测试结果标志写入README</h4><p>首先需要<code>tnpm install --save-dev @ali/def</code>安装@ali/def工具，然后在项目路径下执行<code>def ci badge</code>就可以生成markdown格式的标志了，把他们复制到自己的README里即可</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1fJiqLVXXXXbMXXXXXXXXXXXX-2092-582.jpg\" alt=\"def ci badge\"></p>\n<h4 id=\"执行测试\"><a href=\"#执行测试\" class=\"headerlink\" title=\"执行测试\"></a>执行测试</h4><p>好了，准备完成了，只需要push一下代码，就可以看到CISE平台自动创建测试任务：</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1tS5rLVXXXXbXXXXXXXXXXXXX-2752-1300.jpg\" alt=\"执行测试\"></p>\n<p>测试的结果也可以在UITest上查看</p>\n<p><img src=\"https://img.alicdn.com/tps/TB1bbCbLVXXXXXAXVXXXXXXXXXX-2100-1292.jpg\" alt=\"UITest\"></p>\n<blockquote>\n<p>Karma跑PhantomJS的方案似乎没有办法在CISE的机器上运行，原因是karma-phantomjs-launcher依赖了2+版本的phantomjs——phantomjs-prebuilt，这个库是C++实现，在CISE机器上由于C++库版本的问题无法编译通过。目前没有看到比较好的解决办法，倒是mocha-phantomjs依赖的phantomjs 1.9+版本可以在CISE机器上正常运行</p>\n</blockquote>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>项目接入持续集成在多人开发同一个仓库时候能起到很大的用途，每次push都能自动触发测试，测试没过会发生告警。如果需求采用Issues+Merge Request来管理，每个需求一个Issue+一个分支，开发完成后提交Merge Request，由项目Owner负责合并，项目质量将更有保障</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这里只是前端测试相关知识的一小部分，还有非常多的内容可以深入挖掘，而测试也仅仅是前端流程自动化的一部分。在前端技术快速发展的今天，前端项目不再像当年的刀耕火种一般，越来越多的软件工程经验被集成到前端项目中，前端项目正向工程化、流程化、自动化方向高速奔跑。还有更多优秀的提升开发效率、保证开发质量的自动化方案亟待我们挖掘。</p>\n"}