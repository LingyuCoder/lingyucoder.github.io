{"tags":[{"name":"杂谈","permalink":"http://lingyu.life/tags/%E6%9D%82%E8%B0%88/","url":"/async/tags/杂谈.json","count":6}],"categories":[{"name":"杂谈","permalink":"http://lingyu.life/categories/%E6%9D%82%E8%B0%88/","url":"/async/categories/杂谈.json","count":8}],"url":"/async/posts/2020/03/25/new/fedivision.json","date":1585065600000,"path":{"year":2020,"month":3,"day":25,"name":"new/fedivision"},"subtitle":null,"title":"聊一聊分工","permalink":"http://lingyu.life/2020/03/25/new/fedivision/","content":"<blockquote>\n<p>劳动生产力最大的进步，以及劳动在任何地方的运用中体现的大部分的技能、熟练度和判断力似乎都是分工的结果  ——《国富论》亚当斯密</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"分工\"><a href=\"#分工\" class=\"headerlink\" title=\"分工\"></a>分工</h3><p>每个人的物质需求都是非常多样的，比如我们吃的蔬菜来自于菜农的耕种，吃的猪肉来自屠宰场，而屠宰场的猪又是来自于养殖场，我们穿的衣服纽扣是有专门的纽扣工厂生产，而布料又是来自于布料工厂。我们的生存、生活下的所有需求，基本上都是来自于分工，要想自己满足所有需求，估计只能回归原始人住山洞啃树皮了。</p>\n<p>而分工的产生，本质上是一种市场行为，通过互通有无、以物易物的方式，将自己所负责的单一指责生产的产品放到市场上，交换其他人生产的产品。比如菜农将自己种植的蔬菜放到菜市场出售，换取猪肉和大米满足自己的需求。分工之下对生产力的提升主要从三个方面：</p>\n<h4 id=\"熟练度\"><a href=\"#熟练度\" class=\"headerlink\" title=\"熟练度\"></a>熟练度</h4><p>这三方面很好理解，首先，当分工细化职责单一下，熟练度的提升能大幅提高生产力，而最直观的就是那些所谓“民间高手”的视频，以无比惊人的手速完成常人看起来需要非常精细的操作，银行员工几秒数完一踏钞票、飞饼师傅几秒做一个飞饼并且往后直接抛到锅中等等。人类是有肌肉记忆的，所谓“无他，唯手熟尔”，做得多了有了肌肉记忆，也就驾轻就熟了。</p>\n<h4 id=\"专注\"><a href=\"#专注\" class=\"headerlink\" title=\"专注\"></a>专注</h4><p>其次，当职责单一，只需要专注一件事情。专注带来的效率提升也很明显，这也就是番茄工作法的由来。通过将自己25分钟的时间专注在一件事情上，保证25分钟内的产出。一个人的精力也是有限的，一般一天也就10-12个番茄。而专注的生产力提升对于脑力劳动非常明显，人类的思维自然而然会将一个个松散的思维组织成一定结构，当被打断后这些结构化的思维会瞬间消失，重新构建这个结构需要时间，更重要的是有些点可能会遗忘。</p>\n<h4 id=\"共性\"><a href=\"#共性\" class=\"headerlink\" title=\"共性\"></a>共性</h4><p>最后，当所做的事情被限制在一定范围后，就能很容易发现这些事情之间存在的共性，以及他们之间隐藏的关联关系。通过提取共性，我们可以找到毫无创造力的机械化劳作部分，并尝试这利用一些工具来简化这些机械性的劳作，比如刀削面机器人。</p>\n<h4 id=\"市场\"><a href=\"#市场\" class=\"headerlink\" title=\"市场\"></a>市场</h4><p>而当我们通过细化分工并大幅度提升了生产力之后，就会出现生产过剩的情况，毕竟纽扣工人生产大量的纽扣，自己一年也用不了几个。因此我们就需要一个市场，将这些过剩的产品放到市场上，换取自己需要的其他部分。市场本质上为分工后的每个部分提供了相互建立联系的土壤。而对于工厂内部，则通过其他方式来让节点间建立联系，也许是一些传输带，也可能是一些叉车，一些其他员工。</p>\n<p>需要注意的是，如果市场规模不够大，对于特定产品需求有限，也就是对特定商品的生产力要求有限，在这种情况下很多时候就会分工的粒度就会放粗。比如做家具的，当大的家具企业为全国各个市场提供家具时，必然是高度机械化的流水线生产的。而当一个小的村庄内做一些家具，就可以直接找本地的木工生产，同时木工可能还会兼职做些其他的比如帮忙修修房梁。而随着市场规模的扩大，市场内的个体的分工粒度越细，市场内的个体对市场的依赖程度也越高。</p>\n<h3 id=\"分工与架构\"><a href=\"#分工与架构\" class=\"headerlink\" title=\"分工与架构\"></a>分工与架构</h3><p>那么我们平常做技术架构，做分层，做模块划分，本质上也是一种分工</p>\n<h4 id=\"模块单一职责\"><a href=\"#模块单一职责\" class=\"headerlink\" title=\"模块单一职责\"></a>模块单一职责</h4><p>在程序设计领域面向对象设计的SOLID原则中，第一个就是The Single Responsibility，单一职责。我们通常都会保证一段代码只负责一个功能，然后通过一些胶水代码将这些独立的模块组装起来形成一个负责一定功能的模块，最后再通过模块间的联系形成整个应用。而对于指责相似的模块，我们会采用相同的方式统一管理，采用相同的规范实现。</p>\n<p>比如最近我在做一个名为深度搭建的方案，主要是针对一些交互相对复杂的页面提供细粒度的搭建能力。通用的营销活动的楼层搭建粒度太粗，无法满足需求：</p>\n<ul>\n<li>只有一种楼层模块，无法进行扩展</li>\n<li>模块的职责并不单一，即负责拉取数据处理业务逻辑，又负责复杂用户交互，同时又负责页面渲染</li>\n<li>模块与模块之前无法很好的建立联系</li>\n</ul>\n<p>因此在深度搭建的方案中，我将模块根据指责划分为数据模块、容器模块、渲染模块。数据模块负责拉取服务端接口的数据，并对外定义了一些action来触发数据的改变。而容器模块则负责处理一些沉淀下来的模式，比如无尽列表。渲染模块则负责最终的页面绘制与渲染，比如无尽列表中的每个商品的样式。</p>\n<p>数据模块将数据递交给容器模块，容器模块根据自身的模式将数据拆分递交给渲染模块进行渲染。用户行为发生时，渲染模块和容器模块将用户行为递交给数据模块触发数据的更新。</p>\n<p>在这种场景下，数据模块处理了业务逻辑，容器模块处理了交互，渲染模块处理了UI，这些模块都是可以通过搭建平台动态组装，动态适配，进而组装成一个页面。</p>\n<h4 id=\"模块间的联系\"><a href=\"#模块间的联系\" class=\"headerlink\" title=\"模块间的联系\"></a>模块间的联系</h4><p>将页面的模块按照指责划分成数据模块、容器模块、渲染模块后，每个模块自身其实都是一个黑盒子。对外会有一些接口。比如数据模块对外吐出数据，以及提供一些action，而容器模块提供了一些接受用户操作后触发的action，渲染模块接受数据。每个模块将自己的能力输出，那么就需要在他们之间建立联系，将数据模块的数据交给交互模块和渲染模块，将容器模块的交互行为与数据模块的action绑定。而这个工作只能由页面完成。页面会将每个模块的输入和输出根据动态配置的名称进行映射绑定。</p>\n<p>比如一个无尽列表模块提供下拉的行为，搭建时就需要给它定一个行为名称比如loadmore，然后在数据模块也接受一个加载下一页的行为，也给他命名成loadmore，页面就能将他们绑定到一起，让列表模块下拉时就能触发请求接口获取下一页数据。</p>\n<h4 id=\"模块的生产力\"><a href=\"#模块的生产力\" class=\"headerlink\" title=\"模块的生产力\"></a>模块的生产力</h4><p>而模块保持单一职责后，就可以提取这些模块的共性来实现生产力提升。比如数据模块都来自于统一RESTFUL实例，那么我们就可以通过规范接口的方式来用一个数据模块适配多个页面。如果服务端支持GraphQL，那我们完全可以只实现一个GraphQL数据模块来满足所有场景。</p>\n<p>而容器模块则可以通过规范交互的方式来沉淀，无尽列表可以扩展到任何情况下，毕竟移动端的交互方式大体上相似，只要稍加规范，很多模式都是重复的。现在逐渐也有一些DSL能够描述交互。</p>\n<p>最无法复用一般都是渲染模块，毕竟每个业务方都不希望与其他业务一样，而当渲染模块剥离掉了交互和数据，只关心渲染的时候，这些模块就完全可以采用比如视觉稿转UI这样的自动化的方式来生产。而就算没有这样的能力，由于这一部分指责简单明确，也完全可以交给外包或者实习生来实现，让自己做一些更有价值的事情。</p>\n<h3 id=\"分工与前端\"><a href=\"#分工与前端\" class=\"headerlink\" title=\"分工与前端\"></a>分工与前端</h3><h4 id=\"前端来自分工\"><a href=\"#前端来自分工\" class=\"headerlink\" title=\"前端来自分工\"></a>前端来自分工</h4><p>更进一步思考分工与前端这个岗位的关系，很显然的一点，前端是分工的结果。Web开发下，技术按照运行环境被划分成了用户侧与服务侧，用户侧又因为容器被划分为了客户端与前端。而前端自身又被进一步的划分，有业务前端、基础前端。业务前端根据业务线或者业务类型进一步细化如频道前端组、中后台前端组、活动前端组、应用前端组等等，而基础前端根据基础能力建设的方向来细化如中间服务组、工具平台组、智能化组等等。</p>\n<p>划分的粒度随着公司规模逐渐变细，初创公司要“全干工程师”，中小公司要“全栈工程师”或者“全端工程师”，而规模一定程度后才需要“前端工程师”。公司的规模决定了公司的业务规模，而公司的业务规模就是公司内工程师们的市场规模。而随着公司规模增大，工程师自身技术体系闭环也预发困难。</p>\n<p>小公司的工程师经常说我自己搭建了从前到后一整套工程的技术体系，而大公司的工程师则经常会说我负责体系中的一环，其他部分我并不了解。于是乎当大公司的工程师跳槽到中小公司，小公司的其他人会觉得：“这个大公司来的怎么这也不会那也不会”，而跳槽的同学只能回答：“这个部分之前都是别人负责的，自己没接触过”。而随着业务的发展，这位在大公司待过的同学就越发显得“吃过见过”了。因此有了小公司修广度，大公司修深度的说法。</p>\n<h4 id=\"市场大小\"><a href=\"#市场大小\" class=\"headerlink\" title=\"市场大小\"></a>市场大小</h4><p>因此做前端工程师首先需要认识到，自己的市场有多大，市场有多大，生产力需求的天花板就有多高。比如天猫，每天生产的都是海量的活动页面，那么活动页面这个市场本身对生产力的提升要求就会非常高，那么做诸如搭建、智能化的方案就非常有价值。而如果在一个细分的业务域或者小公司内，一共就没几个页面，做这几个页面的生产力提升就没有必要上搭建和智能化这些高大上的东西了。没错，也就是我们说的ROI。</p>\n<p>当市场足够大的时候，我们就需要做生产力的提升，也就是进一步去做分工。比如简单的方式是，让一组人开发这些模块的开发工具，一组人开发模块，一组人用这些模块组装成页面。这样，开发工具的组只需要掌握Nodejs就行了，而开发模块的组则只需要关注视觉稿，而组装页面的组则只需要关注业务需求和数据集。再更进一步，开发工具的组会发明工具链、开发模块的组会发明视觉稿转代码工具、组装页面的组则会发明页面搭建平台，生产力又进一步提升。而当市场规模不够大时，应该适度做生产力提升到一定程度满足市场需求后，将精力转移到去补足市场的缺口。由此提升自己带来的价值。</p>\n<h4 id=\"体系之下\"><a href=\"#体系之下\" class=\"headerlink\" title=\"体系之下\"></a>体系之下</h4><p>随着分工的细化，自身的技术体系的闭环愈发艰难，可替代性也逐渐减弱。分工到最后，做业务的前端如果只是成为视觉稿翻译到代码的机器，那么也就与工厂内流水线上的工人没有区别了。干了几年，自己与一个新人也就是个熟手生手的区别。几个月后生手成了熟手自然就可以替代。而日复一日缺乏创造性的重复工作也是极度枯燥的。</p>\n<p>要跳出困境，首先需要对整个体系有所理解。一个体系的中包含很多的节点，对每个节点有个概念，它输入什么、输出什么、为什么这样做，思考如果自己来负责这些节点能够做成什么样子，有机会找对应负责的工程师学习一下细节的知识，自己做一个极简的DEMO。一个铁匠铺，烧炉的师傅多少要会一点冶铁，会铸模的多少要会点冷却。这样，假如有一天，自己要出去开一间铁匠铺，虽然效率不高但至少能有一个大致上的方向，缺少的只是经验，经验完全可以在实战中积累。</p>\n<p>其次是要形成自己的技术资产。体系之下，自己负责的部分有限，而且一个很重要的点是自己所使用的生产资料都是归公司所有。降低对这些生产资料的依赖，构建自己的技术资产是非常重要的。当然这里不是鼓励重复造轮子，工程师的开源文化让很多优秀的生产资料得以开放，可以帮助我们快速构建自己的技术资产。理解这些开放的生产资料，学习其中优秀的设计和理念，并沉淀成自己独特的生产资料，然后通过工作和业务不断打磨，并一定程度上回馈开源社会。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>扯了这么多，本质上还是做技术需要有结构化的思维，自顶向下做拆分，自底向上做提炼，建立联系，形成思维金字塔，并在建立后对整个金字塔有所理解。</p>\n"}