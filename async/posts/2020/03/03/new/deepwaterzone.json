{"tags":[{"name":"杂谈","permalink":"http://lingyu.life/tags/%E6%9D%82%E8%B0%88/","url":"/async/tags/杂谈.json","count":5}],"categories":[{"name":"杂谈","permalink":"http://lingyu.life/categories/%E6%9D%82%E8%B0%88/","url":"/async/categories/杂谈.json","count":7}],"url":"/async/posts/2020/03/03/new/deepwaterzone.json","date":1583164800000,"path":{"year":2020,"month":3,"day":3,"name":"new/deepwaterzone"},"subtitle":null,"title":"聊聊前端深水区","permalink":"http://lingyu.life/2020/03/03/new/deepwaterzone/","content":"<p>去年和不少人聊天，都觉得前端已经进入深水区了。具体表现为以下几点：<br>​</p>\n<ul>\n<li>想造一些轮子，发现好做的都有兄弟团队在做了，提案被老板分分钟拍死</li>\n<li>找不到技术和个人前进的方向，难以获得机会，更别说突破</li>\n<li>业务也日益增多，完成业务累得半死没有思考的时间，混吃等死</li>\n</ul>\n<p>我在天猫的业务团队负责天猫搜索和手机天猫导购线，也在这个问题上面迷茫过，也一直在思考如何破局。在最近一些思考过程中，我逐渐发现其实我陷入了一个误区：不是前端进入深水区，而是部分页面开发进入深水区。这里首先要明确前端工程师这个概念。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>以下内容仅代表个人看法，理解尚浅请多多包涵，欢迎探讨交流<br>​</p>\n</blockquote>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>对于前端工程师，有好几种不同的理解：<br>​</p>\n<ul>\n<li>用HTML+CSS+JS开发页面的研发人员</li>\n<li>在浏览器中开发页面的研发人员</li>\n<li>与后端（服务端）概念对应，在用户侧开发的研发人员</li>\n<li>使用JS开发的研发人员</li>\n<li>…<br>​<br>这几种理解，可以说正确又可以说不正确。在过去刚出现前端工程师岗位的时候，前两种理解好像确实挺准确。但随着RN、Weex等技术发展，好像第三种理解更加符合。而随着Nodejs的发展，最后一种又显得更加合理。随着技术的不断发展，IOT、AI的出现，也许未来又会出现很多不同的理解。而站在我个人角度，我将前端定义为：“<strong>解决用户侧问题的研发人员</strong>”。这里有三个点：1. 站在用户侧 2. 解决问题 3. 研发人员。<br>​<h3 id=\"站在用户侧\"><a href=\"#站在用户侧\" class=\"headerlink\" title=\"站在用户侧\"></a>站在用户侧</h3>首先，前端站在用户测其实是非常好理解的。不管是PC浏览器、移动客户端、可穿戴设备等等都是用户直接感知到的东西，而前端目前为止开发工作中最重要的部分，就是利用这些用户触手可及的软件或硬件作为载体，将用户和背后的商业系统串联起来。在过去PC浏览器作为主要载体的时候，前端大量工作都是在浏览器内或者桌面应用内嵌的Webkit上开发各种页面，甚至是Web OS。而手机的普及和通信技术发展导致流量资费大幅下调，移动互联网大潮席卷全球，各大公司都在争先恐后的将自己的商业产品往移动互联网上搬，Mobile APP成为与用户串联的新载体，前端也就自然而然的转移到移动端进行开发，也涌现出了RN、Weex、Flutter这些与移动端开发技术深度融合的前端技术。而未来也许可穿戴设备会成为主流，那么前端也自然而然会在全新的技术挑战下催生出全新的技术体系。但不管技术怎么发展，前端工程师永远是离用户最近的那拨人。<br>​<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3>其次，前端是在解决问题。解决什么问题？在我个人理解，前端解决的是用户与商业串联时的问题。这里面可以拆分出三层：1. 用户侧的诉求：人性化的用户体验，前端做体验优化、性能优化、做动效、做互动，都是为了让用户用着舒服；2. 商业侧的诉求：准确的商业信息表达，明确将产品能力表达给用户，去为用户带来价值，我们花了大量时间做业务就是在满足这一部分诉求；3. 串联的诉求：快速高效的建立用户与商业的连接渠道，就能让业务跑得更快，前端工程化、可视化搭建都是在快速解决这类诉求；<br>​<h3 id=\"研发人员\"><a href=\"#研发人员\" class=\"headerlink\" title=\"研发人员\"></a>研发人员</h3>最后，前端作为研发人员还是要从技术的角度出发。在解决各种用户侧问题的过程中，明确方案、设计架构、开发工具、研发平台，不断沉淀、丰富自己的工具库使之能应付的问题范围不断扩大，从解决单点的问题，到解决一个特定场景下的问题，到解决一个特定形态的问题，到解决通用的问题。在这之中，除了技术上的沉淀，不断积累形成自己的方法论，以应付未来完全不同形态的问题。这个过程中，也要抬头看看其他技术人沉淀的工具能不能帮到自己，也可以把自己的工具奉献出来给大家，让大家一起完善。<br>​<h2 id=\"赋能\"><a href=\"#赋能\" class=\"headerlink\" title=\"赋能\"></a>赋能</h2>回到前端深水区这个话题，为什么说“不是前端工程师进入深水区，而是部分页面开发人员进入深水区”呢？其实本质就是：经过这几年的前端技术的发展，部分问题已经被很好的被通用方案解决了，而这个通用方案就是“赋能”。<br>​<h3 id=\"过桥\"><a href=\"#过桥\" class=\"headerlink\" title=\"过桥\"></a>过桥</h3>村子旁边有条河，很多司机开车想过河，村长只得造桥，造桥就需要找一堆木匠铁匠做材料，还要有专业造桥师傅把材料组装成桥。辛辛苦苦终于桥造好过河了。过两天回来，还是同一条河，也许是桥塌了，也许是过河位置不同了，想要再次过河，就需要再造一座桥。久而久之，河上一座座桥，当再次开车到来，看到这些桥也很犹豫，有些桥宽度不对上不去，有些桥年久失修，怕开上去走一半就掉河里了。<br>​<br>于是村长组织下开发了一座钢铁大桥，让大家都走这条大桥。但终究河流很长，想要过河只能绕路。大桥走的车不断增多，铁匠、木匠、造桥师傅觉着每天干着同样的事情没啥意思，也是走一波又来一波，钢铁大桥维护也愈发困难，毕竟还有很多车在上面跑也不可能把桥封了做一次完整的检修。<br>​<br>终于村长动员村里的高材生，做了一个自动造桥车，能够自动铺设一定宽度范围的桥，待开车过去之后再将桥回收。司机只要从村长这里租一下自动造桥车就能过桥。随着自动造桥车功能不断完善能满足的车型种类不断增多，所有的小车都能过桥了。<br>​<h3 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h3>比如上面过桥的故事中村长就是技术TL，司机就是业务，过桥好比业务需求。一开始，业务每次提出需求技术TL都要找团队里成员去开发，这些单页面开发也没有考虑复用性，于是每次来一个需求就开发一个页面，团队成员刚开始会为自己完成工作而自豪，久而久之就会觉着没有成长了；而所谓的钢铁大桥，其实就是一个超级页面，这个超级页面初期能够满足多个相似业务需求，但随着业务不断发展差异化不断增大，超级页面变得愈发臃肿。最终变得不可维护，而由于太多业务依旧在跑，也没人敢动；而自动造桥车其实就是“可视化搭建”，业务根据需要去定制自己的页面，搭建过程全程技术团队基本不需要参与，技术团队只要不断打磨可视化搭建，让其满足更多相对通用的诉求。而当实在无法满足时，别忘了我们还有钢铁大桥。<br>​<h3 id=\"消除问题\"><a href=\"#消除问题\" class=\"headerlink\" title=\"消除问题\"></a>消除问题</h3>一种对赋能的典型曲解就是：“你们前端搞赋能，就是为了转嫁成本给其他岗位”。赋能并不是让他人来我们的领域替我们做事，而是让他人能做他们想做的事而不用深入到我们的领域之中。在这里，司机不再需要找村长要工匠，不再需要关注造桥的进度和流程，他只需要将自己需要的桥的一些信息告诉自动造桥车就行了。到了业务上，业务想上线一个页面，不再需要召集开发资源，不再需要关注页面开发流程，只需要将页面信息告诉可视化搭建平台，就能实现页面的上线。<br>​<br>前端的赋能将前端的研发投入从业务需求的投入转向赋能工具的投入，这前提肯定是对于这个业务领域有很深的理解和沉淀，能归纳其中大部分业务需求的本质，从中提炼出通用的工具化技术方案。通过前端赋能的方式，消除掉了这个业务域下的问题。而目前，在集团内有相当多的产品都在做着这样的事情，只不过它们关注的问题种类不同。有些关注页面的渲染——用户侧的诉求（imgcook、fusion等等），有些关注页面和数据的绑定——商业的诉求（投放系统等等），有些关注页面的快速上线——串联的诉求（斑马、方舟、千叶等等），这些产品汇聚到一起，将一部分业务形态的问题彻底消除。<br>​<h2 id=\"金字塔\"><a href=\"#金字塔\" class=\"headerlink\" title=\"金字塔\"></a>金字塔</h2><h3 id=\"金字塔结构\"><a href=\"#金字塔结构\" class=\"headerlink\" title=\"金字塔结构\"></a>金字塔结构</h3>当一个域的问题被工具彻底消除的时候，问题不再存在，就意味着除了开发这些工具的人以外，之前解决这些问题的人将无法产生价值，必将遭到淘汰。前端是金字塔结构，金字塔顶端的人虽然人不多但是找到了问题的本质并持续探求消除问题的方案。而金字塔的腰部则是一些深入业务并利用顶部人员给出的方案与业务深度结合在业务上创造价值的人。而金字塔的底部则是完成业务需求的工具人，这一部分人终将遭到淘汰。<br>​<h3 id=\"深水区\"><a href=\"#深水区\" class=\"headerlink\" title=\"深水区\"></a>深水区</h3>所以说不是前端进入深水区，而是部分页面开发进入深水区，如会场页面、列表、表单等部分页面开发的问题已经大体上被解决，因此必然会有一部分人遭到淘汰。而随着工具的能力不断增强，赋能的强度不断增大，业务和工具之间的距离被逐渐缩短，被淘汰的人也会逐渐增多。最终这些人需要继续创造价值，只有三个方向：1. 足够理解业务并能决策业务，利用业务创造价值。2. 利用自己在业务中摸爬滚打的经验沉淀，提升工具的覆盖范围。3. 跳出当前的领域，去其他没有被工具化的领域创造价值。<br>​<h2 id=\"跳出深水区\"><a href=\"#跳出深水区\" class=\"headerlink\" title=\"跳出深水区\"></a>跳出深水区</h2><h3 id=\"理解业务\"><a href=\"#理解业务\" class=\"headerlink\" title=\"理解业务\"></a>理解业务</h3>前端很多时候不是单独负责一个业务，而是一个人负责多个业务，而且还经常拥抱变化。而与业务接触久了，就会发现一些业务上的问题，自己也会产生一些想法。这些想法可能是单纯业务上，也可能会结合技术。之前在我毕业没多久有人教育我说，要抬头做技术，低头做业务：多吸取其他技术方案，深入业务了解业务。但这个方式一开始没问题，但一段时间之后要做到低头做技术，抬头做业务：将吸取到的技术深入结合到业务之中，还需要吸取其他业务的思路，防止在一个业务之中陷入思维定式。<br>​<h3 id=\"提升工具\"><a href=\"#提升工具\" class=\"headerlink\" title=\"提升工具\"></a>提升工具</h3>现在大多数消除问题的工具，都只能消除一些特定的业务形态。而产生价值的另外一个方式，还是需要找到自己、 团队所负责业务的形态，如果它们不能被通用的工具消除，需要思考为什么，是做不到，还是不想做，然后思考怎样才能做到消除。只要有诉求，而工具无法解决，那就存在机会。当然这里还是要考虑投入产出比的。<br>​<h3 id=\"融合\"><a href=\"#融合\" class=\"headerlink\" title=\"融合\"></a>融合</h3>而前端工程师作为用户侧解决问题的研发人员，跳出已经被消除问题的业务形态，我们会发现其实还有很多目前很难被解决的问题值得我们去探索，而这些探索需要我们跳出传统的页面开发技术领域，与其他的技术领域进行结合，才有机会成为金字塔顶端的人：<br>​</li>\n<li>与图形学结合：2D、3D互动</li>\n<li>与机器学习结合：智能UI</li>\n<li>与客户端结合：Flutter</li>\n<li>与服务端结合：Serverless、Faas</li>\n<li>与硬件集合：IOT<br>​<br>技术终究是产生价值的工具，前端工程师应该站在解决用户侧问题的角度来找到问题、选用合适的工具、解决问题并沉淀不断完善工具库。不应将自己限制在手头上仅有的几个工具之中，做一个只有工具四处找问题的工具人。<br>​<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2>本来这篇文章是想放在2019个人总结里的，但是发现有一定篇幅就单独拿出来了，只是个人过去一年看到的一些事情带来的思考，都是讲大道理没什么干货。我也在扩展自己的技术领域，给自己定的目标是2020年至少一半以上书籍是非前端技术书籍。还是希望有朝一日自己能成为金字塔顶端的人，而不是站在底端待在舒适区里等着被淘汰。<br>​<br>​</li>\n</ul>\n"}