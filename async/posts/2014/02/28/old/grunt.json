{"tags":[{"name":"grunt","permalink":"http://lingyu.life/tags/grunt/","url":"/async/tags/grunt.json","count":1}],"categories":[{"name":"前端工程化","permalink":"http://lingyu.life/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/","url":"/async/categories/前端工程化.json","count":7}],"url":"/async/posts/2014/02/28/old/grunt.json","date":1393516800000,"path":{"year":2014,"month":2,"day":28,"name":"old/grunt"},"subtitle":"运用Grunt构建前端项目开发流程自动化","title":"初识Grunt","permalink":"http://lingyu.life/2014/02/28/old/grunt/","content":"<p>最近总是看到各种推荐使用Grunt的文章，说其对前端项目开发的自动化程度提升到一个新的流程。之前开发也是苦于各种文件的处理，比如之前写less的时候，每次改动都得手动去调用命令编译一次，效率很低。而Grunt正解决了这个问题，于是乎乘着这两天闲下来了，乘机学习了一下Grunt的基础用法</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是Grunt？\"><a href=\"#什么是Grunt？\" class=\"headerlink\" title=\"什么是Grunt？\"></a>什么是Grunt？</h2><p>Grunt官网首页上，最显眼的一句话就是：“Grunt JavaScript世界的构建工具”，它运行于Node.js平台</p>\n<h2 id=\"为什么要用Grunt？\"><a href=\"#为什么要用Grunt？\" class=\"headerlink\" title=\"为什么要用Grunt？\"></a>为什么要用Grunt？</h2><p>面对以下一些常见的前端开发中的问题，Grunt都可以大展拳脚</p>\n<h3 id=\"文件的压缩与合并\"><a href=\"#文件的压缩与合并\" class=\"headerlink\" title=\"文件的压缩与合并\"></a>文件的压缩与合并</h3><p>在平常的前端项目开发中，最需要顾忌的就是效率问题。为了提升用户体验，页面的加载不能过长，这也就使得“优化”在前端开发中永远是个说不完道不尽的话题。一些比较常见的优化方式有这么几种：</p>\n<ul>\n<li>JavaScript文件的优化：将多个JS文件合并成一个文件，以减少请求次数。对JavaScript文件采用压缩，消除掉所有缩进和换行，减小文件体积。使用类似uglify的压缩工具压缩JavaScript代码内部变量名称长度，减少文件体积等等</li>\n<li>CSS文件的优化：将多个CSS文件合并成一个文件，并进行压缩。道理同JS文件的合并及压缩</li>\n<li>图片文件的合并：sprite技术，也是为了减少请求次数</li>\n<li>等等等等</li>\n</ul>\n<p>这些文件的压缩合并都可以交给Grunt进行处理</p>\n<h3 id=\"代码提示\"><a href=\"#代码提示\" class=\"headerlink\" title=\"代码提示\"></a>代码提示</h3><p>无论CSS、JavaScript、HTML都是在快速发展的，这也导致了API及一些属性功能的变化。同时这些代码不像Java那样有一套完善的编码时错误提示，这也是JSHint，CSSHint等代码提示出现的原因。这些编码提示也可以通过Grunt来进行处理</p>\n<h3 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h3><p>众所周知，现在出现了很多以提升开发效率为目的的前端语言预处理方案：</p>\n<ul>\n<li>CSS相关：Less和Sass，通过简洁的语法，来提升代码的复用性</li>\n<li>JavaScript相关：CoffeeScript，类似Python的语法，友好而高效</li>\n<li>HTML：一些模板引擎如Jade</li>\n</ul>\n<p>这些预处理也可以交给Grunt来进行</p>\n<h3 id=\"一些额外的处理\"><a href=\"#一些额外的处理\" class=\"headerlink\" title=\"一些额外的处理\"></a>一些额外的处理</h3><p>有时候还会需要一些额外的需求，比如添加版本自动更新注释，CSS前缀自动补全等等。这些Grunt也提供了很多插件进行处理，方便快捷</p>\n<h2 id=\"安装Grunt\"><a href=\"#安装Grunt\" class=\"headerlink\" title=\"安装Grunt\"></a>安装Grunt</h2><h3 id=\"首先你得有一个xxx\"><a href=\"#首先你得有一个xxx\" class=\"headerlink\" title=\"首先你得有一个xxx\"></a>首先你得有一个xxx</h3><p>想要使用Grunt，首先你得有一个Node.js环境和一个npm。这俩网上教程一大把，安装也很简单，就不说了。这里只提及Grunt如何安装</p>\n<p>另外这里介绍的是Grunt 0.4.x，要求Node.js的版本在0.8.0以上，如果已经使用了Grunt 0.3.x版本的，可以先卸载，然后重新安装0.4.x版本</p>\n<h3 id=\"使用npm安装Grunt命令行\"><a href=\"#使用npm安装Grunt命令行\" class=\"headerlink\" title=\"使用npm安装Grunt命令行\"></a>使用npm安装Grunt命令行</h3><p>执行如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g grunt-cli</span></span><br></pre></td></tr></table></figure>\n<p>这样就可以在命令行使用<code>grunt</code>命令。需要注意的是，安装了grunt-cli并不等同于安装了Grunt，它只是一个命令行命令，用来调用与gruntfile文件在同一目录下的grunt的，如果没有grunt，将会给一个错误提示并退出。之所以这么设计的主要原因是，这样可以在同一个系统上安装多个版本的grunt了</p>\n<h3 id=\"安装Grunt-1\"><a href=\"#安装Grunt-1\" class=\"headerlink\" title=\"安装Grunt\"></a>安装Grunt</h3><p>使用过Node.js做过项目的人应该都对<code>package.json</code>这个文件不陌生了。Grunt安装也是通过npm安装，所以只要将其加入到<code>devDependencies</code>中就可以了。一个简单的package.json文件大概长这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"your project name\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"x.x.x\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"grunt\"</span>: <span class=\"string\">\"~0.4.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"grunt-autoprefixer\"</span>: <span class=\"string\">\"~0.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"grunt-contrib-watch\"</span>: <span class=\"string\">\"~0.5.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"grunt-contrib-concat\"</span>: <span class=\"string\">\"~0.3.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"grunt-contrib-cssmin\"</span>: <span class=\"string\">\"~0.8.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"load-grunt-tasks\"</span>: <span class=\"string\">\"~0.2.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在写完类似的<code>package.json</code>（或添加完Grunt依赖后），运行<code>npm install</code>就可以从npm自动安装了，下面几个都是grunt的可选查件，大致上介绍几个可选查件（包括上面出现的和没出现的）:</p>\n<ul>\n<li>grunt-contrib-watch: 自动监听指定文件改变并执行相关任务流的插件</li>\n<li>grunt-contrib-concat: 文本合并插件</li>\n<li>grunt-contrib-cssmin: CSS代码压缩插件</li>\n<li>grunt-autoprefixer: 为CSS属性自动添加前缀，兼容信息来自著名的<a href=\"http://caniuse.com\" target=\"_blank\" rel=\"noopener\">Can I Use</a>网站</li>\n<li>grunt-contrib-jshint：JavaScript代码提示插件</li>\n<li>grunt-contrib-uglify：JavaScript代码压缩插件</li>\n<li>load-grunt-tasks：自动加载Grunt插件的插件（好绕口）</li>\n<li>还有一大堆请参见<a href=\"http://gruntjs.com/plugins\" target=\"_blank\" rel=\"noopener\">Grunt plugins</a>，这个是官网上的，但是我显示不出来,无止境的loading，所以可以去<a href=\"https://npmjs.org\" target=\"_blank\" rel=\"noopener\">npm官网</a>上搜gruntplugin关键字</li>\n</ul>\n<p>这些插件的安装也是一样写在devDependencies中，定好需要的版本号后直接使用<code>npm install</code>命令安装可以了。或者也可以反过来，先使用<code>npm install grunt --save-dev</code>安装，然后再将依赖加入到package.json的devDependencies中</p>\n<h2 id=\"配置项目中的Grunt\"><a href=\"#配置项目中的Grunt\" class=\"headerlink\" title=\"配置项目中的Grunt\"></a>配置项目中的Grunt</h2><p>Grunt的配置都写在一个名为<code>Gruntfile.js</code>的文件中（当然，在这里面可以通过引入外部文件的方式来加载自己的配置文件），这个文件必须在项目的根目录下，也就是和<code>package.json</code>同一路径下，一个简单的<code>Gruntfile.js</code>文件大概长这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  grunt.initConfig(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//确定需要加载的package.json文件的路径</span></span><br><span class=\"line\">    pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">    <span class=\"comment\">//定义任务</span></span><br><span class=\"line\">    concat: &#123;</span><br><span class=\"line\">      dist: &#123;</span><br><span class=\"line\">        src: [</span><br><span class=\"line\">          <span class=\"string\">'src/css/*.css'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        dest: <span class=\"string\">'skyinlayer.css'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">//加载插件</span></span><br><span class=\"line\">  grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">  <span class=\"comment\">//定义默认任务列表</span></span><br><span class=\"line\">  grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'concat'</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引入package-json中的配置\"><a href=\"#引入package-json中的配置\" class=\"headerlink\" title=\"引入package.json中的配置\"></a>引入package.json中的配置</h3><p>通过<code>pkg</code>引入的<code>package.json</code>文件的JSON数据可以通过<code>&lt;% %&gt;</code>模板字符串来进行引用</p>\n<h3 id=\"定义任务\"><a href=\"#定义任务\" class=\"headerlink\" title=\"定义任务\"></a>定义任务</h3><p>定义任务部分则是定义了一个任务所需要的相关配置，比如这里定义了合并文件（concat）任务，相关配置确定了需要被合并的文件为<code>src/css/</code>下的所有后缀为<code>.css</code>的文件，合并完成的文件输出到根目录下的<code>skyinlayer.css</code>文件中。</p>\n<p>在定义任务部分可以定义多个任务，比如我写一个纯CSS的项目，也需要经过合并、添加前缀、压缩等任务，，所以可以将其修改为如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat: &#123;</span><br><span class=\"line\">  dist: &#123;</span><br><span class=\"line\">    src: [</span><br><span class=\"line\">      <span class=\"string\">'src/base.css'</span>,</span><br><span class=\"line\">      <span class=\"string\">'src/**/*.css'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    dest: <span class=\"string\">'skyinlayer.css'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">autoprefixer: &#123;</span><br><span class=\"line\">  no_dest: &#123;</span><br><span class=\"line\">    src: <span class=\"string\">'skyinlayer.css'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">cssmin: &#123;</span><br><span class=\"line\">  minify: &#123;</span><br><span class=\"line\">    src: [<span class=\"string\">'skyinlayer.css'</span>],</span><br><span class=\"line\">    dest: <span class=\"string\">'skyinlayer.min.css'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载插件\"><a href=\"#加载插件\" class=\"headerlink\" title=\"加载插件\"></a>加载插件</h3><p>由于Grunt的任务都是通过npm插件的形式被引入的，所以需要进行查件加载，通过如下语句加载：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-autoprefixer'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-cssmin'</span>);</span><br></pre></td></tr></table></figure>\n<p>这样就加载了三个插件，分别用来指向上面定义的三个任务，值得注意的是可以使用<code>load-grunt-tasks</code>来自动加载所有在<code>package.json</code>中被依赖的grunt插件，其检测的标准是插件名称以<code>grunt-</code>字符串开头。如果使用了<code>load-grunt-tasks</code>，加载就变得很简单了，一句代码搞定：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'load-grunt-tasks'</span>)(grunt);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义默认任务流程\"><a href=\"#定义默认任务流程\" class=\"headerlink\" title=\"定义默认任务流程\"></a>定义默认任务流程</h3><p>在定义完任务以及加载完插件之后，我们需要定义任务流程，确定任务执行的顺序。使用如下代码定义任务流程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'concat'</span>,<span class=\"string\">'autoprefixer'</span>,<span class=\"string\">'cssmin'</span>]);</span><br></pre></td></tr></table></figure>\n<p>这样定义完后，每次执行<code>grunt</code>命令，就会制动执行代码合并，添加前缀和CSS代码压缩三项任务了</p>\n<h3 id=\"监听文件变化\"><a href=\"#监听文件变化\" class=\"headerlink\" title=\"监听文件变化\"></a>监听文件变化</h3><p>一般情况下，我们需要多次改动代码来查看效果，有时候改动很小甚至只是一个数字。这样每次改动都需要手动执行grunt命令太麻烦了，<code>grunt-contrib-watch</code>这个插件帮我们解决了这个问题。引入<code>grunt-contrib-watch</code>插件和上面一样（如果使用了<code>load-grunt-tasks</code>，不需要额外的引入过程）。定义watch任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    files: [</span><br><span class=\"line\">      <span class=\"string\">'src/**/*'</span>,</span><br><span class=\"line\">      <span class=\"string\">'!node_modules'</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    tasks: [<span class=\"string\">'concat'</span>, <span class=\"string\">'autoprefixer'</span>, <span class=\"string\">'cssmin'</span>],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，files属性可以定义哪些文件需要监听改变，哪些不需要，而tasks则定义了文件改变后需要执行的任务流程。这样定义的话，比如我的<code>src/css/base.css</code>文件进行了变更，在保存的时候，将自动执行代码合并，前缀添加及代码压缩等任务</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Grunt其实还有很多更加深入的用法，比如读取json问价作为配置文件、根据配置文件动态的进行处理等等（比如<a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"noopener\">daneden的animate.css项目</a>），这里就只是介绍了一下基础的用法。学好了Grunt，以后也可以出去和别人吹牛逼说自己的项目工作流是自动化的啦（括弧笑）</p>\n<h2 id=\"更多详细请参考\"><a href=\"#更多详细请参考\" class=\"headerlink\" title=\"更多详细请参考\"></a>更多详细请参考</h2><p><a href=\"http://www.gruntjs.net\" target=\"_blank\" rel=\"noopener\">Grunt官网</a></p>\n<p><a href=\"http://www.w3cplus.com/blog/tags/372.html\" target=\"_blank\" rel=\"noopener\">W3CPlus的Grunt相关文章</a></p>\n"}