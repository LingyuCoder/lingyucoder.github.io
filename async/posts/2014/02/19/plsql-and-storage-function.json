{"tags":[{"name":"oracle","permalink":"http://lingyu.life/tags/oracle/","url":"/async/tags/oracle.json","count":1},{"name":"存储函数","permalink":"http://lingyu.life/tags/%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/","url":"/async/tags/存储函数.json","count":1}],"categories":[{"name":"数据库","permalink":"http://lingyu.life/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/","url":"/async/categories/数据库.json","count":1}],"url":"/async/posts/2014/02/19/plsql-and-storage-function.json","date":1392739200000,"path":{"year":2014,"month":2,"day":19,"name":"plsql-and-storage-function"},"subtitle":"PL/SQL安装使用 + 简单的存储函数编写","title":"PL/SQL编写存储函数","permalink":"http://lingyu.life/2014/02/19/plsql-and-storage-function/","content":"<p>在编写报表的时候经常会遇到数据结构不适合生成交叉报表或列式报表的情况，而生成报表的报表工具又没有强力到能够将数据转换成理想的格式。但公司的数据库是用Oracle，还是可以使用PL/SQL来对数据进行转换。这里介绍了PL/SQL安装使用以及简单的存储函数的编写</p>\n<a id=\"more\"></a>\n\n<h2 id=\"PL-SQL安装\"><a href=\"#PL-SQL安装\" class=\"headerlink\" title=\"PL/SQL安装\"></a>PL/SQL安装</h2><hr>\n<p><a href=\"https://pan.baidu.com/s/1ntwisrB\" target=\"_blank\" rel=\"noopener\">PL/SQL和Oracle920整合的压缩包</a><br>提取码：cgsf</p>\n<p>下载后由”PL_SQL_DEV_9 + Oracle920.rar”解压并安装</p>\n<h3 id=\"安装Oracle920\"><a href=\"#安装Oracle920\" class=\"headerlink\" title=\"安装Oracle920\"></a>安装Oracle920</h3><ol>\n<li>解压压缩包，建议将Oracle920文件夹放在D盘根目录下，否则需要修改其注册表文件中的路径</li>\n<li>运行注册表文件oracle.reg</li>\n<li>在环境变量中添加bin文件夹路径，如放在D盘根目录下，则添加D:\\oracle920\\bin</li>\n</ol>\n<h3 id=\"安装pl-sql\"><a href=\"#安装pl-sql\" class=\"headerlink\" title=\"安装pl/sql\"></a>安装pl/sql</h3><ol>\n<li>解压压缩包</li>\n<li>运行plsqldev906.exe安装</li>\n<li>运行chinese.exe添加中文补丁</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>若Oracle920路径不放在D盘根目录下，运行注册表文件oracle.reg文件前，用文本编辑工具打开，将所有涉及路径的地方修改成Oracle920文件夹的路径</li>\n<li>请在32位机上安装，64位自行百度解决方法</li>\n</ol>\n<h3 id=\"修改pl-sql登录时的服务器可选项\"><a href=\"#修改pl-sql登录时的服务器可选项\" class=\"headerlink\" title=\"修改pl/sql登录时的服务器可选项\"></a>修改pl/sql登录时的服务器可选项</h3><p>由于无锡、绥化的Oracle服务器IP地址出现变更，需要修改服务器地址</p>\n<p>存放地址的文件为(Oracle920所在文件夹)/Oracle920/network/ADMIN/tnsnames.ora，使用文本编辑工具打开</p>\n<p>可以看到其中有类似代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hiservice_197 &#x3D;</span><br><span class=\"line\">  (DESCRIPTION &#x3D;</span><br><span class=\"line\">    (ADDRESS_LIST &#x3D;</span><br><span class=\"line\">      (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 192.168.0.197)(PORT &#x3D; 1521))</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (CONNECT_DATA &#x3D;</span><br><span class=\"line\">      (SID &#x3D; hiservic)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>其中<code>hiservice_197</code>即为PL/SQl选择服务器的服务器名。<code>HOST = 192.168.0.197</code>定义了IP地址，<code>PORT = 1521</code>定义了端口，<code>SID = hiservic</code>定义了连接的数据库，可以根据需要进行修改，或者按照同样的规则在文档最后进行添加</p>\n<h2 id=\"PL-SQL使用\"><a href=\"#PL-SQL使用\" class=\"headerlink\" title=\"PL/SQL使用\"></a>PL/SQL使用</h2><h3 id=\"一般CRUD操作\"><a href=\"#一般CRUD操作\" class=\"headerlink\" title=\"一般CRUD操作\"></a>一般CRUD操作</h3><p>很简单，在菜单 文件-&gt;新建-&gt;SQL窗口 来创建新的SQL窗口，在窗口中敲入SQL语句，按F8执行</p>\n<p>若要通过图形界面进行新增、修改、删除，请在SQL语句后增加<code>for update</code>代码，比如原语句为<code>select * from user_info</code>，则修改为<code>select * from user_info for update</code>。</p>\n<p>在执行前，点击SQL框下的“小锁”开启增加、删除、修改权限，使用“小锁”旁边的“加号”和“减号”来新增删除数据，修改直接单击需要修改的数据格即可。</p>\n<p>修改完成后点击一下旁边的“绿勾”确认，然后点击左上角主菜单下的“提交按钮”或按F10进行提交，否则事务不会提交，修改不会生效</p>\n<h3 id=\"存储过程相关\"><a href=\"#存储过程相关\" class=\"headerlink\" title=\"存储过程相关\"></a>存储过程相关</h3><p>在有友好插件的文本编辑工具中写完存储过程后，若要全部执行，可以直接复制到同上的SQL框</p>\n<p>如需一个一个定义执行，可以在菜单 文件-&gt;新建-&gt;命令窗口 来创建命令行，然后通过复制代码的方式写入存储过程的结构和函数，最后一行加<code>/</code>来标志结束。在命令行中需要检测是否含有某结构或函数，可以使用<code>desc</code>进行查看，如检测某Object结构或Table结构是否存在，可以使用（xxxx为结构名）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc type xxxx</span><br></pre></td></tr></table></figure>\n<p>若要检测函数或表信息，则（xxxx为函数名或表名）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc xxxx</span><br></pre></td></tr></table></figure>\n<p>若需要检查编译错误，在菜单  文件-&gt;新建-&gt;程序窗口 来进行调试，比如存储函数，可以新建Function窗口，模板向导若已有代码，可以不必填写，点击确定后直接用已有代码进行覆盖即可。使用F8来编译，若编译错误，底下会显示编译错误的原因及产生错误的行数</p>\n<p>若存储过程中有输出语句如<code>DBMS_OUTPUT.PUTLINE(xxxx)</code>则在SQL窗口中运行，运行完成后点击输出标签页查看输出</p>\n<h2 id=\"一些存储函数实例\"><a href=\"#一些存储函数实例\" class=\"headerlink\" title=\"一些存储函数实例\"></a>一些存储函数实例</h2><h3 id=\"定义元数据结构\"><a href=\"#定义元数据结构\" class=\"headerlink\" title=\"定义元数据结构\"></a>定义元数据结构</h3><p>一般使用存储函数都是为了将现有的数据库表中的不规则的数据整理，生成iReport比较容易生成报表的结构。所以首先需要定义报表中需要的每一条数据的样式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">REPLACE</span> <span class=\"keyword\">TYPE</span> objectName <span class=\"keyword\">AS</span> <span class=\"keyword\">OBJECT</span> (</span><br><span class=\"line\">    property_name_1 <span class=\"built_in\">varchar2</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">    property_name_2 <span class=\"built_in\">number</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>其中<code>objectName</code>为结构名，<code>property_name_x</code>为属性名</p>\n<p>这样就定义了一个简单的有一个字符串属性，一个数字属性的元数据结构。</p>\n<h3 id=\"定义临时表结构\"><a href=\"#定义临时表结构\" class=\"headerlink\" title=\"定义临时表结构\"></a>定义临时表结构</h3><p>由于一般情况下都需要存储函数输出一整张每行都是这个结构的表，所以需要定义通过这个元数据结构组织成的表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">type</span> tableName <span class=\"keyword\">table</span> <span class=\"keyword\">of</span> objectName;</span><br></pre></td></tr></table></figure>\n<p>其中<code>tableName</code>为表结构的名称，<code>objectName</code>为这个表结构所使用元数据结构的名称</p>\n<h3 id=\"定义存储函数\"><a href=\"#定义存储函数\" class=\"headerlink\" title=\"定义存储函数\"></a>定义存储函数</h3><p>定义存储函数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">function</span> functionName(param1 <span class=\"built_in\">number</span>, param2 <span class=\"built_in\">number</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> tableName <span class=\"keyword\">pipelined</span></span><br><span class=\"line\"><span class=\"keyword\">as</span></span><br><span class=\"line\">v_row objectName;</span><br><span class=\"line\"><span class=\"comment\">--变量定义</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"comment\">--函数体</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>functionName</code>为存储函数的名称，<code>tableName</code>为存储函数返回表结构的名称，<code>objectName</code>为表结构使用的元数据结构的名称</p>\n<p>需要注意变量定义部分，所有后面使用到的变量都需要在这里先行定义</p>\n<p>这个函数中定义了两个参数<code>param1</code>和<code>param2</code>，若不需要使用参数，则第一行直接改为<code>create or replace function functionName</code>，函数名后不需要添加括号</p>\n<h3 id=\"遍历数据库中表获取数据\"><a href=\"#遍历数据库中表获取数据\" class=\"headerlink\" title=\"遍历数据库中表获取数据\"></a>遍历数据库中表获取数据</h3><p>在函数体中通过<code>for in</code>遍历已有的表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for itemName in (</span><br><span class=\"line\">    --sql语句</span><br><span class=\"line\">) loop</span><br><span class=\"line\">    --对表每一行数据进行操作</span><br><span class=\"line\">end loop;</span><br></pre></td></tr></table></figure>\n<p>这里sql语句和平常的sql语句没有太大区别，唯一的区别是可以使用变量作为<code>where</code>中的判断条件的参数，如有两个number型变量startTime，endTime，可以直接使用语句<code>where fieldName &lt; endTime and fieldName &gt;= startTime</code></p>\n<h3 id=\"将单个结果输出到变量\"><a href=\"#将单个结果输出到变量\" class=\"headerlink\" title=\"将单个结果输出到变量\"></a>将单个结果输出到变量</h3><p>有的时候只需要一个统计结果，通过sql的聚集函数来实现，若需要将其结果存入变量中，可以使用<code>into</code>来实现：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(someUtTableName.id) <span class=\"keyword\">into</span> v_number_type_var</span><br><span class=\"line\"><span class=\"keyword\">from</span> someUtTableName</span><br><span class=\"line\"><span class=\"keyword\">where</span> balabala</span><br></pre></td></tr></table></figure>\n<p>这样就将count的结果存入到名叫<code>v_number_type_var</code>的变量之中了，这个变量需要在前面先行定义</p>\n<h3 id=\"将数据组织成表\"><a href=\"#将数据组织成表\" class=\"headerlink\" title=\"将数据组织成表\"></a>将数据组织成表</h3><p>若需要将数据组织成结构，添加到返回表中：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_row := objectName('abc', 123);</span><br><span class=\"line\">pip row(v_row);</span><br></pre></td></tr></table></figure>\n<p>其中<code>objectName</code>为元数据结构，<code>v_row</code>为元数据结构的变量，这样就相当于往结果的表里增加了一行。括号里面可以使用变量，但类型必须与元数据结构定义严格一致。</p>\n<h3 id=\"在函数中增加调试用的输出\"><a href=\"#在函数中增加调试用的输出\" class=\"headerlink\" title=\"在函数中增加调试用的输出\"></a>在函数中增加调试用的输出</h3><p>在函数体中加入如下代码:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBMS_OUTPUT.PUTLINE('test information');</span><br></pre></td></tr></table></figure>\n<p>即可在运行的时候产生输出，括号内可以使用变量。在SQL框的输出标签页查看输出结果</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>使用<code>--注释内容</code>来添加单行注释</p>\n<p>使用<code>/*注释内容*/</code>来添加多行注释</p>\n<h3 id=\"调用存储函数\"><a href=\"#调用存储函数\" class=\"headerlink\" title=\"调用存储函数\"></a>调用存储函数</h3><p>已经写好的存储函数需要在sql中进行调用，在写入iReport之前可以先在pl/sql中测试一下，比如已有存储函数functionName，接受两个number参数，则：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span>(functionName(<span class=\"number\">123</span>, <span class=\"number\">456</span>))</span><br></pre></td></tr></table></figure>\n<p>若无参数，直接<code>from table(functionName())</code>即可。将其当做一张表来看，可以使用<code>group by</code>、<code>order by</code>、<code>where</code>等。select也可以选择需要的字段或改名</p>\n"}