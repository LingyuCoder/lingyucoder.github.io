{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":30},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":24},{"name":"响应式","permalink":"http://lingyu.life/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/","url":"/async/tags/响应式.json","count":3}],"categories":[{"name":"响应式","permalink":"http://lingyu.life/categories/%E5%93%8D%E5%BA%94%E5%BC%8F/","url":"/async/categories/响应式.json","count":3}],"url":"/async/posts/2014/02/14/responsive-web-design.json","date":1392307200000,"path":{"year":2014,"month":2,"day":14,"name":"responsive-web-design"},"subtitle":"读《响应式Web设计-HTML5和CSS3实践》有感（响应式网页设计部分）","title":"聊聊响应式网页设计","permalink":"http://lingyu.life/2014/02/14/responsive-web-design/","content":"<p>总是在各个地方看到响应式Web设计。一直对其很感兴趣，也只是零零散散的接触，但并没有系统的去学习响应式。这两天读了Ben Frain著（王永强 译）的《响应式Web设计-HTML5和CSS3实践》，收获颇多，在这里记录一下</p>\n<a id=\"more\"></a>\n\n<p><span class=\"image image-full\"><img src=\"/img/responsive.png\" alt=\"响应式Web设计\"></span></p>\n<p>总是在各个地方看到响应式Web设计。一直对其很感兴趣，也只是零零散散的接触，但并没有系统的去学习响应式。这两天读了Ben Frain著（王永强 译）的《响应式Web设计-HTML5和CSS3实践》，收获颇多，在这里记录一下</p>\n<p>##什么是响应式Web设计？<br>响应式网页设计： 由伊桑·马科特提出。他将弹性网格布局、弹性图片、媒体和媒体查询这三种已有的开发技巧整合，命名为响应式网页设计。它是针对任意设备对网页内容进行完美布局的一种显示机制。</p>\n<p>同时还有很多其他的叫法：流式设计、弹性布局、塑料布局、流体设计、自适应布局、跨设备设计以及弹性设计</p>\n<p>响应式Web设计倡导的是，首先针对小屏幕进行设计，然后逐步增强针对大屏幕的设计和内容</p>\n<p>##为什么要响应式？<br>###小屏幕的崛起<br>根据<a href=\"http://gs.statcounter.com\" target=\"_blank\" rel=\"noopener\">统计数据</a>，使用台式机和笔记本上网的人越来越少，使用手机、pad等小屏幕上网的人越来越多。<br>这就表示，为了能让大多数用户能在自己的网站上有较好的用户体验，必须改变传统的针对台式机浏览器设计网页的思路，为移动终端上的网页浏览提供支持。</p>\n<p>###响应还是不响应？<br>但是，并不是响应式设计就一定是最佳选择。如果预算充足，做一个真正的手机版网站更为合适。这样就可以为不同的用户，根据他们的条件（设备、位置、网速等）来提供不同的内容、设计与交互。</p>\n<p>响应式Web设计的最终目的，就是需要做出能响应各种设备大小的完美设计，同时为无论哪种设备提供好的用户体验</p>\n<p>##如何做到响应式？<br>要做到响应式，需要明确视口的概念：<code>视口指浏览器窗口内，网页实际显示的区域</code>。而不同设备上的用户体验不同，也是由于视口大小不同造成的。<br>###视口<br>这里，根据视口大小的不同，一般可以分为三个大类：</p>\n<ul>\n<li>手机等小视口：一般使用的浏览器基本都是webkit内核的现代浏览器。屏幕较小，浏览时需要排除掉所有多余的信息，将网页内容主体直观的呈现在浏览器中</li>\n<li>平板电脑等中等大小视口：同手机等小视口终端设备，也是基本使用的webkit内核的现代浏览器，分辨率稍大。可以适当添加一些额外的导航信息放入其中</li>\n<li>台式机、笔记本电脑等大视口：浏览器内核种类多种多样，现代浏览器的比例在上升，但是一些老式的浏览器依旧被广泛使用，需要兼容这些老式的浏览器。屏幕较大，可以显示所有信息（主体或是其他额外信息）。同时分辨率还在不断增大</li>\n</ul>\n<p>由于大视口设备的分辨率还在不断增大（比如博主的分辨率就是1920*1080的，经常被其他同学吐槽字太小看不见…），导致大视口设备与小视口设备的差距也在不断增大</p>\n<p>###设计方式<br>所以在响应式页面设计时，首先，需要针对小视口设备进行设计，将网页中真正需要展示的内容放入其中。然后添加一些适当的跳转链接。在视口的分辨率达到一定时（这个分辨率临界点称为断点），在小视口设备所展现的页面上，添加一些相对重要的信息，用于适配中视口设备，形成新的设计。最后，在到达又一个临界点的时候，再次增加更多的信息，形成大视口的网页设计。</p>\n<p>这是响应式页面设计真正所倡导的设计方式，由小至大，逐步扩展。但目前经常遇到的工作并不是编写新的响应式页面，更多的时候是需要将老的页面转换成响应式的。这点可以通过哪种逐步扩展的思想反过来，逐步删除一些不重要的信息，最终只留下重要的信息。或许会有人想在小视口和中视口的设计中也保留所有信息，但这样会破坏用户体验中“内容为主”的原则，而且也加大了小视口设备中页面设计的难度。</p>\n<p>##响应式的实现方式？<br>响应式的实现方式有两种： </p>\n<ol>\n<li>通过JavaScript获取当前视口大小，来动态的加载CSS文件实现</li>\n<li>通过HTML5+CSS3的媒体查询来实现<br>###JavaScript实现<br>通过JavaScript实现是相对古老的方式，主要思路就是通过JavaScript的window对象获取当前视口的宽度和高度（一般是宽度，因为页面的高度一般是动态改变的），然后根据当前视口信息确定需要添加的CSS文件，使用诸如<code>document.createStyleSheet(cssFile);</code>的代码进行CSS文件的动态添加。这种方法依赖JavaScript，同时也会造成额外的性能问题<br>###HTML5和CSS3实现<br>现在HTML5+CSS3可以通过很简单的方式来添加，比如HTML5支持根据视口信息来动态添加CSS文件：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/screen.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n更多的支持我将会在后续的博文中进行详细介绍</li>\n</ol>\n<p>而在CSS文件中，也可以根据视口信息应用样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width:</span> <span class=\"number\">960px</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">/*需要在960px以下宽度设备中使用的CSS*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>媒体查询并不是上面简单的代码就能展示的，其可以查询的信息有： </p>\n<ol>\n<li>视口高度</li>\n<li>视口宽度</li>\n<li>设备屏幕高度</li>\n<li>设备屏幕宽度</li>\n<li>设备方向（横向还是纵向）</li>\n<li>视口宽高比</li>\n<li>设备屏幕宽高比</li>\n<li>颜色的位数</li>\n<li>单色缓冲区中每像素所使用的位数</li>\n<li>屏幕或打印机的分辨率</li>\n<li>电视机的扫描方式</li>\n<li>输出设备是网格设备还是位图设备</li>\n</ol>\n<p>其中除了电视机的扫描范围和设备是否是网格还是位图的检测外，其他检测都能用min和max创建一个查询范围，可谓相当强大。</p>\n<p>也许会有一些顾虑，媒体查询是否被大多数浏览器支持。情况是，媒体查询已经被浏览器广泛支持，老版本的IE 6、7、8也可以通过JavaScript补丁进行修复。所以，没有理由拒绝使用媒体查询</p>\n<p>##响应式的效果<br>这篇博客实际上就是响应式的，使用了html5up的HTML5模板，放大缩小浏览器的可视区域，或者通过其他设备访问，将看到不一样的效果</p>\n<p>##写在最后<br>响应式Web设计需要的结果是使用有限的资源，为所有设备上的用户提供较好的用户体验。其实这个博客就是响应式的。其中涉及到较多的HTML5+CSS3的内容，所以经常需要在兼顾多种浏览器和开发成本上权衡利弊，后续会有HTML5和CSS3的文章。这两天没写文章了，之前的两天一篇文章的计划被打破了，必须加油了</p>\n"}