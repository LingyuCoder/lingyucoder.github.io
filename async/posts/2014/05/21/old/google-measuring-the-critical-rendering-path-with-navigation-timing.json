{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":21},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":17}],"categories":[{"name":"页面开发","permalink":"http://lingyu.life/categories/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/","url":"/async/categories/页面开发.json","count":16}],"url":"/async/posts/2014/05/21/old/google-measuring-the-critical-rendering-path-with-navigation-timing.json","date":1400601600000,"path":{"year":2014,"month":5,"day":21,"name":"old/google-measuring-the-critical-rendering-path-with-navigation-timing"},"subtitle":"翻译自谷歌Web开发最佳实践手册","title":"使用导航计时监测渲染关键路径","permalink":"http://lingyu.life/2014/05/21/old/google-measuring-the-critical-rendering-path-with-navigation-timing/","content":"<p>没办法监测，就没办法优化。幸运的是，浏览器提供了一系列用来监测渲染关键路径上每一步的接口，叫导航计时接口（Navigation Timing API）</p>\n<a id=\"more\"></a>\n\n<h3 id=\"长话短说\"><a href=\"#长话短说\" class=\"headerlink\" title=\"长话短说\"></a>长话短说</h3><ul>\n<li>导航计时为监测渲染关键路径提供了高分辨率的时间戳</li>\n<li>浏览器在到达渲染关键路径的不同阶段时，会触发一系列的事件</li>\n</ul>\n<h3 id=\"用于监测的时间戳\"><a href=\"#用于监测的时间戳\" class=\"headerlink\" title=\"用于监测的时间戳\"></a>用于监测的时间戳</h3><p>好的性能策略都是建立在良好的测量基础之上的。下面这张图说明了导航计时接口提供的API：</p>\n<p><img src=\"/img/google-translate/11.png\" alt=\"导航计时接口提供的API\"></p>\n<p>上面的每一个标签都提供了一个方法，用于检测每一个页面加载的高分辨率的时间戳。在这里，我们仅仅介绍除了与网络相关的时间戳的哪些一部分时间戳，剩下的我们会在以后的章节作介绍</p>\n<p>那么，这些时间戳代表着什么？</p>\n<ul>\n<li>domLoading：整个处理过程开始的时间，也就是浏览器开始解析HTML文档的第一个字节的时间</li>\n<li>domInteractive：浏览器解析完所有HTML，并完成DOM构建的时间</li>\n<li>domContentLoaded：开始构建渲染树的时间点，就是DOM构建完毕后，若没有样式以及阻塞的JavaScript运行的时间点<ul>\n<li>许多JavaScript框架都会监听这个事件，然后执行他们自己的逻辑。因此浏览器提供了EventStart和EventEnd两个时间戳来允许我们知道具体运行消耗的时间</li>\n</ul>\n</li>\n<li>domComplete：和名字一样，记录了页面上的所有资源都下载完成（包括图片）以及所有处理逻辑都结束后的时间点。这个时间点过后，浏览器旋转的加载标记将不再旋转了</li>\n<li>loadEvent：最后，浏览器触发onload事件来执行一些其他的应用逻辑</li>\n</ul>\n<h3 id=\"里程碑\"><a href=\"#里程碑\" class=\"headerlink\" title=\"里程碑\"></a>里程碑</h3><p>根据HTML的规范，浏览器会检测所有事件：什么时候应该触发事件，应该满足哪些条件等等。对于我们来说，我们只需要关注渲染关键路径上的一些“里程碑”事件：</p>\n<ul>\n<li>domIneractive：说明DOM构建完毕</li>\n<li>domContentLoaded：当DOM和CSSOM都完成后触发<ul>\n<li>如果没有“解析器阻塞”的JavaScript代码，documentContentLoaded将直接在domInteractive之后触发</li>\n</ul>\n</li>\n<li>domComplete：当页面及其所有资源全部完毕时触发</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Critical Path: Measure<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">measureCRP</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> t = <span class=\"built_in\">window</span>.performance.timing,</span></span><br><span class=\"line\">          interactive = t.domInteractive - t.domLoading,</span><br><span class=\"line\">          dcl = t.domContentLoadedEventStart - t.domLoading,</span><br><span class=\"line\">          complete = t.domComplete - t.domLoading;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> stats = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        stats.textContent = <span class=\"string\">'interactive: '</span> + interactive + <span class=\"string\">'ms, '</span> +</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"string\">'dcl: '</span> + dcl + <span class=\"string\">'ms, complete: '</span> + complete + <span class=\"string\">'ms'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.appendChild(stats);</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"measureCRP()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>web performance<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> students!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"awesome-photo.jpg\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子乍看之下可能比较吓人，但实际上非常简单，导航计时API捕获了相关的时间戳，而我们的JavaScript代码放在onload事件的回调函数中，只有触发了onload事件，才会执行。onload事件只有在domInteractive、domContentLoaded和domComplete事件都完成之后才会触发，所以我们可以捕获到这些时间戳之间的差值，算出每个阶段所耗费的时间</p>\n<p><img src=\"/img/google-translate/12.png\" alt=\"时间戳检测结果\"></p>\n<p>综上所述，我们可以获得一些“里程碑事件”以及一些简单的函数来输出测量结果。当然我们可以不将这些数据输出到页面上，而是发送这些分析的数据到专门的分析服务器（Google的分析工具就会自动做这些事），这样就能很方便的检测网页的性能，确定候选页面，并尝到优化所带来的甜头。</p>\n"}