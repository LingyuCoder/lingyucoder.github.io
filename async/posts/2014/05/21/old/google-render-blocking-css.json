{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":21},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":17}],"categories":[{"name":"容器技术","permalink":"http://lingyu.life/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/","url":"/async/categories/容器技术.json","count":5}],"url":"/async/posts/2014/05/21/old/google-render-blocking-css.json","date":1400601600000,"path":{"year":2014,"month":5,"day":21,"name":"old/google-render-blocking-css"},"subtitle":"翻译自谷歌Web开发最佳实践手册","title":"CSS的渲染阻塞","permalink":"http://lingyu.life/2014/05/21/old/google-render-blocking-css/","content":"<p>默认情况下，CSS会被看做是渲染阻塞资源，也就是说，浏览器在CSSOM建立前，已经处理过的网页内容不会被显示到页面上。所以，保证你的CSS代码能够快速从服务器获取且尽可能的简短，并注意使用媒体类型（media types）和媒体查询（media queries）去进行非阻塞的渲染。</p>\n<a id=\"more\"></a>\n\n<p>在之前的章节中，我们已经知道了要建立渲染树，必须先建立好DOM树和CSSOM树，这里有一个很重要的性能要点：HTML和CSS都是渲染阻塞资源。HTML很明显，因为如果没有创建好DOM树，浏览器都不知道有什么东西需要渲染。但CSS就不那么明显了。如果我们尝试不使用CSS的阻塞渲染去渲染一个典型的页面，会发生什么呢？</p>\n<h3 id=\"长话短说\"><a href=\"#长话短说\" class=\"headerlink\" title=\"长话短说\"></a>长话短说</h3><ul>\n<li>默认情况下CSS是渲染阻塞资源</li>\n<li>媒体类型和媒体查询可以让一些CSS变成非渲染阻塞资源</li>\n<li>所有CSS资源，无论是阻塞还是非阻塞，都需要通过浏览器进行下载</li>\n</ul>\n<h3 id=\"CSS是渲染阻塞资源\"><a href=\"#CSS是渲染阻塞资源\" class=\"headerlink\" title=\"CSS是渲染阻塞资源\"></a>CSS是渲染阻塞资源</h3><p>浏览器将会阻塞渲染直到DOM树和CSSOM树都创建完毕</p>\n<p><strong>CSS是渲染阻塞元素，尽可能快速的让浏览器下载到文件，这样可以减少阻塞的时间</strong></p>\n<p>然而，如果我们有一些只有在特定条件下才使用的样式，比如打印或是在大的显示器中显示等情况，我们当然不希望这些特定条件下才会使用的样式阻塞渲染。</p>\n<h3 id=\"媒体类型和媒体查询\"><a href=\"#媒体类型和媒体查询\" class=\"headerlink\" title=\"媒体类型和媒体查询\"></a>媒体类型和媒体查询</h3><p>CSS中的媒体类型和媒体查询就可以达到这种效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"print.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"print\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"other.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(min-width: 40em)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个媒体查询可以由一个媒体类型和查询表达式构成，查询表达式可以是任意个数，他们检测了当前设备的特点。比如，在第一个样式表申明中并没有使用媒体类型和媒体查询，因此它在所有情况下都会被应用，也就是说，它总汇总阿红才呢过渲染阻塞。而另一方面，第二个样式表仅仅在网页内容被打印时才会被应用，可能你需要在打印时改换一下布局，改变一下字体等等，因此，这个样式表不会再页面首次加载时造成渲染阻塞。而最后一个样式表提供了一个媒体查询，浏览器将判断条件是否满足。如果浏览器满足媒体查询中的条件，浏览器将在下载并处理完这个样式表之前阻塞渲染。</p>\n<p>通过使用媒体查询，我们可以根据特定的用例来定制展现的样式，比如显示和打印。同时，还能动态的判断诸如屏幕方向，缩放事件等等。在申明样式表时，重点关注媒体类型和媒体查询，他们将很大程度影响网页渲染的效率。</p>\n<p>让我们考虑如下例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>    <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>    <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"portrait.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"orientation:portrait\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"print.css\"</span>    <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"print\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>第一个样式申明将会造成渲染阻塞，它在任意情况下都会被应用；</li>\n<li>第二个样式申明也会造成渲染阻塞：“screen”是默认类型，除非你执行了一个其他类型，否则浏览器总是显示的设定媒体类型为“screen”。因此这个样式申明和第一个样式申明等价；</li>\n<li>第三个样式申明是一个动态的媒体查询，他会在页面加载完成之后进行计算。根据页面加载完成后的设备横竖屏来决定样式是否会阻塞渲染；</li>\n<li>最后一个样式申明仅仅在页面被打印的时候起作用，因此他不会在页面首次加载进浏览器中时造成渲染阻塞</li>\n</ol>\n<h3 id=\"浏览器下载\"><a href=\"#浏览器下载\" class=\"headerlink\" title=\"浏览器下载\"></a>浏览器下载</h3><p>最后，注意一下渲染阻塞只是指浏览器是否要在页面初始渲染时，是否需要渲染该资源内部的样式。无论在何种情况下，尽管非阻塞资源的优先级较低，CSS文件依旧必须要由浏览器进行下载。</p>\n"}