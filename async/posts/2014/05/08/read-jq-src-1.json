{"tags":[{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"JS技术","permalink":"http://lingyu.life/categories/JS%E6%8A%80%E6%9C%AF/","url":"/async/categories/JS技术.json","count":13}],"url":"/async/posts/2014/05/08/read-jq-src-1.json","date":1399478400000,"path":{"year":2014,"month":5,"day":8,"name":"read-jq-src-1"},"subtitle":"闲来没事读源码系列——jQuery","title":"jQuery的核心方法和类型判断","permalink":"http://lingyu.life/2014/05/08/read-jq-src-1/","content":"<p>这几天闭关读源码，jQuery读了一半了，sizzle，基础方法，promise等等都详细的看了一下，由于东西比较多，先记录第一部分，jQuery的一些核心方法以及jQuery中的类型判断，读的是jQuery-2.1.0</p>\n<a id=\"more\"></a>\n\n<p>##一些方法的缓存<br>上来先做了一下commonjs的判断和兼容</p>\n<p>之后将一些数组上和对象上的常用方法进行了缓存。另外还缓存了一个class2type对象和support对象，class2type对象将在后面的类型判断处详细介绍。而support用来保存嗅探到的浏览器特性是否支持</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*缓存一些常用方法和对象*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"comment\">/*切分数组*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice = arr.slice;</span><br><span class=\"line\"><span class=\"comment\">/*数组合并*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = arr.concat;</span><br><span class=\"line\"><span class=\"comment\">/*添加到尾部*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> push = arr.push;</span><br><span class=\"line\"><span class=\"comment\">/*查找位置*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> indexOf = arr.indexOf;</span><br><span class=\"line\"><span class=\"comment\">/*判断变量类型*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> class2type = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*对象的toString方法，用于判断变量类型*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> toString = class2type.toString;</span><br><span class=\"line\"><span class=\"comment\">/*对象的hasOwnProperty，判断属性是否在对象中*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasOwn = class2type.hasOwnProperty;</span><br><span class=\"line\"><span class=\"comment\">/*字符串的trime方法*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trim = <span class=\"string\">\"\"</span>.trim;</span><br><span class=\"line\"><span class=\"comment\">/*方法支持程度*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> support = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>之后创建了jQuery方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，其使用<code>new jQuery.fn.init</code>创建了一个jq对象并返回了，jq对象的详细实现应该在init方法中</p>\n<p>当然还有一些像缓存document，版本号，匹配<code>-ms-</code>和<code>-[\\da-z]</code>这样的正则表达式，还有一个将字符串转大写的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span> = <span class=\"built_in\">window</span>.document,</span><br><span class=\"line\"></span><br><span class=\"line\">    version = <span class=\"string\">\"2.1.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class=\"line\">        <span class=\"comment\">// Need init if jQuery is called (just allow error to be thrown if not included)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context );</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    rmsPrefix = <span class=\"regexp\">/^-ms-/</span>,</span><br><span class=\"line\">    rdashAlpha = <span class=\"regexp\">/-([\\da-z])/gi</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    fcamelCase = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> all, letter </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> letter.toUpperCase();</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>##在jQuery对象上扩展方法<br>紧接着是一系列在jq对象上扩展的方法：<br>可以看到在jq对象上扩展方法实际上就是在jQuery的prototype上扩展方法<br>这里定义了一系列在jQuery对象中操作元素集合的方法<br>####constructor<br>重新将constructor指向jQuery，防止constructor指向Object</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span>: jQuery,</span><br></pre></td></tr></table></figure>\n<p>####selector<br>每个jQuery对象都与一个selector字符串，可以用它来检测jQuery对象，默认为空字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector: <span class=\"string\">\"\"</span>,</span><br></pre></td></tr></table></figure>\n<p>####length<br>jQuery对象其实可以看做一个包含了很多dom元素和一系列扩展方法的类数组对象，其中必然会有一个length属性说明一共有多少dom元素，经常用来判断jq对象是否含有结果集</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length: <span class=\"number\">0</span>,</span><br></pre></td></tr></table></figure>\n<p>####toArray<br>类数组对象转真正数组的方法，内部和我们将arguments或NodeList等于一样，使用slice实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toArray: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call( <span class=\"keyword\">this</span> );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####get (num)<br>从jq对象中获取下标为num的元素，如果num为负数，则获取倒数第num个，也就是下表为<code>length + num</code>的元素。如果num不存在，将这个jq对象转换成真数组并返回（同样使用的slice方法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span>: function( num ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num != <span class=\"literal\">null</span> ?</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return a 'clean' array</span></span><br><span class=\"line\">        ( num &lt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[ num + <span class=\"keyword\">this</span>.length ] : <span class=\"keyword\">this</span>[ num ] ) :</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return just the object</span></span><br><span class=\"line\">        slice.call( <span class=\"keyword\">this</span> );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####pushStack (elems)<br>这是一个很重要的方法，后面很多地方会用到</p>\n<p>这个方法实际上是创建一个新的jq对象，其结果集为elems中的dom节点，将现有的jq对象放在新创建对象的prevObject中，这样就能在新jq对象中查找到现有的jq对象了，设定一下context后返回新对象的引用</p>\n<p>这种链式创建jq对象的方式可以理解为jq对象的一个链表(栈)，而我们永远拥有表头指针，使用end方法时，表头指针所指向的jq对象就会移除出链表。这也是jQuery那样链式操作的关键所在</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pushStack: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elems </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*创建一个新jq对象用来保存结果集*/</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = jQuery.merge( <span class=\"keyword\">this</span>.constructor(), elems );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*将之前的jq对象压栈*/</span></span><br><span class=\"line\">    ret.prevObject = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*context相同*/</span></span><br><span class=\"line\">    ret.context = <span class=\"keyword\">this</span>.context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*返回新创建的jq对象的引用*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####each (callback, args)<br>这个方法相信使用过jq的人都很熟悉了，对当前jq对象中的每个元素调用callback方法，并可选的为callback传入args参数。内部有一个很强大的兼容各种参数的each方法，后续会有介绍，这里直接使用它了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback, args </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.each( <span class=\"keyword\">this</span>, callback, args );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####map (callback)<br>这个方法和上面类似，不过是map方法，所以会生成一组结果，这一组结果会使用pushStack方法在jq链上创建一个新jq对象来包裹</p>\n<p>####slice<br>其实内部就是直接调用了<code>[].slice</code>切分jq对象获得dom节点数组，不同的是，这个获得的dom节点数组会使用pushStack方法在jq链上创建一个新jq对象来包裹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pushStack( jQuery.map(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem, i </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> callback.call( elem, i, elem );</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####first和last<br>这俩比较简单，获取jq对象的dom节点集中的第一个和最后一个，均使用eq方法实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">last: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq( <span class=\"number\">-1</span> );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####eq (i)<br>获取jq对象dom节点集的第i个元素，需要注意的是处理正数和负数的情况，正数为第i个，负数为倒数第i个，也就是第<code>length+i</code>个</p>\n<p>这个方法也会将生成的结果用pushStack方法在jq链上创建新的jq对象来包裹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> i </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = <span class=\"keyword\">this</span>.length,</span><br><span class=\"line\">        j = +i + ( i &lt; <span class=\"number\">0</span> ? len : <span class=\"number\">0</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pushStack( j &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; len ? [ <span class=\"keyword\">this</span>[j] ] : [] );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####end<br>操作jq链，获得之前的jq对象。这里有个判定，如果之前没有对象了，新建一个空的jq对象并返回。把jq链看做一个栈的话，实际上就是弾栈操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prevObject || <span class=\"keyword\">this</span>.constructor(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####push、sort、splice<br>这些方法仅作内部使用，直接使用数组的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push: push,</span><br><span class=\"line\">sort: arr.sort,</span><br><span class=\"line\">splice: arr.splice</span><br></pre></td></tr></table></figure>\n\n<p>##对象扩展方法jQuery.extend<br>编写jq插件的开发者肯定不会对这个方法陌生</p>\n<p>jq使用这个方法实现的混入模式，思想还是将遍历一个对象中的所有值，复制到一个已有的对象中</p>\n<p>另外jq这个函数实现了深拷贝，其实也就是递归调用extend方法，这里用了很多的jQuery自己实现的类型判断</p>\n<p>深拷贝需要注意数组和原生对象的情况，他们创建的容器是不相同的（<code>[]</code>和<code>{}</code>）</p>\n<p>另外它使用了一个options来进行缓存，防止出现循环引用导致的无限递归情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend = jQuery.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> options, name, src, copy, copyIsArray, clone,</span><br><span class=\"line\">        target = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] || &#123;&#125;,</span><br><span class=\"line\">        i = <span class=\"number\">1</span>,</span><br><span class=\"line\">        length = <span class=\"built_in\">arguments</span>.length,</span><br><span class=\"line\">        deep = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*做接口的重载*/</span></span><br><span class=\"line\">    <span class=\"comment\">// Handle a deep copy situation</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> target === <span class=\"string\">\"boolean\"</span> ) &#123;</span><br><span class=\"line\">        deep = target;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// skip the boolean and the target</span></span><br><span class=\"line\">        target = <span class=\"built_in\">arguments</span>[ i ] || &#123;&#125;;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Handle case when target is a string or something (possible in deep copy)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> target !== <span class=\"string\">\"object\"</span> &amp;&amp; !jQuery.isFunction(target) ) &#123;</span><br><span class=\"line\">        target = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// extend jQuery itself if only one argument is passed</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( i === length ) &#123;</span><br><span class=\"line\">        target = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Only deal with non-null/undefined values</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (options = <span class=\"built_in\">arguments</span>[ i ]) != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Extend the base object</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> options ) &#123;</span><br><span class=\"line\">                src = target[ name ];</span><br><span class=\"line\">                copy = options[ name ];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Prevent never-ending loop</span></span><br><span class=\"line\">                <span class=\"comment\">/*看copy中是否已经存在需要复制的对象，防止死循环*/</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( target === copy ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/*如果深拷贝，将递归复制*/</span></span><br><span class=\"line\">                <span class=\"comment\">// Recurse if we're merging plain objects or arrays</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*数组和对象分开判断，容器不一样*/</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ( copyIsArray ) &#123;</span><br><span class=\"line\">                        copyIsArray = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Never move original objects, clone them</span></span><br><span class=\"line\">                    <span class=\"comment\">/*递归拷贝*/</span></span><br><span class=\"line\">                    target[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Don't bring in undefined values</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( copy !== <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">                    target[ name ] = copy;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return the modified object</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>##在jQuery上扩展的一些内部方法和静态方法<br>有了<code>jQuery.extend</code>，我们就可以使用它在jQuery对象上申明一些静态方法或属性了，基本上每个模块都会通过这种方式申明一些内部方法和静态方法</p>\n<p>####expando<br>用于随机生成一个jq的版本号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expando: <span class=\"string\">\"jQuery\"</span> + ( version + <span class=\"built_in\">Math</span>.random() ).replace( <span class=\"regexp\">/\\D/g</span>, <span class=\"string\">\"\"</span> ),</span><br></pre></td></tr></table></figure>\n<p>####isReady<br>假设jQuery已经准备好了，当然我们有一个$().ready方法，判断dom是否加载完成，这些后面promise那块会说</p>\n<p>####error<br>没啥好说的，甩个异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> msg </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( msg );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####noop<br>一个空函数，不知道干啥用的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">noop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####isFunction (obj)<br>判断参数是否是函数，使用了jQuery.type进行判断，内部实际上用的是<code>typeof obj === &#39;function&#39;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isFunction: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.type(obj) === <span class=\"string\">\"function\"</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####isArray (obj)<br>判断参数是否是数组，由于是2.1.0版本，不兼容ie6-7，所以直接使用了<code>Array.isArray</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isArray: <span class=\"built_in\">Array</span>.isArray,</span><br></pre></td></tr></table></figure>\n<p>####isWindow (obj)<br>判断是否是window对象，这个使用window对象的<code>window.window === window</code>进行判断，但司徒正美说这种方式还是有缺陷的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isWindow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; obj === obj.window;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####isNumberic (obj)<br>这个是判断参数能否转换为数字，先通过parseFloat对参数进行转换，然后判断，很巧妙</p>\n<p>这里用到了parseFloat返回NaN、任何数与NaN计算都是NaN、NaN和0比返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isNumeric: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")</span></span><br><span class=\"line\">    <span class=\"comment\">// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")</span></span><br><span class=\"line\">    <span class=\"comment\">// subtraction forces infinities to NaN</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj - <span class=\"built_in\">parseFloat</span>( obj ) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####isPlainObject (obj)<br>判断是否是原生对象。如果不是对象，或者是DOM对象，或者是window直接排除。看它原型上是否有isPrototypeOf方法，如果有，则是原生对象，否则不是。需要注意一点的是，在ff20-时查看constructor会报错，所以用了try catch包裹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isPlainObject: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Not plain objects:</span></span><br><span class=\"line\">    <span class=\"comment\">// - Any object or value whose internal [[Class]] property is not \"[object Object]\"</span></span><br><span class=\"line\">    <span class=\"comment\">// - DOM nodes</span></span><br><span class=\"line\">    <span class=\"comment\">// - window</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( jQuery.type( obj ) !== <span class=\"string\">\"object\"</span> || obj.nodeType || jQuery.isWindow( obj ) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Support: Firefox &lt;20</span></span><br><span class=\"line\">    <span class=\"comment\">// The try/catch suppresses exceptions thrown when attempting to access</span></span><br><span class=\"line\">    <span class=\"comment\">// the \"constructor\" property of certain host objects, ie. |window.location|</span></span><br><span class=\"line\">    <span class=\"comment\">// https://bugzilla.mozilla.org/show_bug.cgi?id=814622</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( obj.constructor &amp;&amp;</span><br><span class=\"line\">                !hasOwn.call( obj.constructor.prototype, <span class=\"string\">\"isPrototypeOf\"</span> ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> ( e ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the function hasn't returned already, we're confident that</span></span><br><span class=\"line\">    <span class=\"comment\">// |obj| is a plain object, created by &#123;&#125; or constructed with new Object</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####isEmptyObject (obj)<br>是否是空对象，判断方法是遍历这个对象，只要有能遍历到的键值对，返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmptyObject: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####type (obj)<br>确定元素类型的方法，这个方法使用了class2type中存储的累心结果进行判断</p>\n<p>首先判断<code>obj==null</code>，obj如果是undefined和null，都会在这里被拦截，直接转成字符串返回就可以了</p>\n<p>然后判断如果obj是对象，那就需要通过class2type来判断了，class2type中汇总了一些常用的对象映射。如果class2type中没有找到，返回object。如果是函数，直接返回函数就行了</p>\n<p>后面会有如何创建这个class2type缓存</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( obj == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Support: Android &lt; 4.0, iOS &lt; 6 (functionish RegExp)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"object\"</span> || <span class=\"keyword\">typeof</span> obj === <span class=\"string\">\"function\"</span> ?</span><br><span class=\"line\">        class2type[ toString.call(obj) ] || <span class=\"string\">\"object\"</span> :</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####globalEval (code)<br>执行code中的代码，首先通过indexOf查找代码中是否有<code>use strict</code>，如果有，那么使用在document中创建script节点的方法执行代码，否则直接用js本身的eval</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">globalEval: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> code </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script,</span><br><span class=\"line\">        indirect = <span class=\"built_in\">eval</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    code = jQuery.trim( code );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( code ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the code includes a valid, prologue position</span></span><br><span class=\"line\">        <span class=\"comment\">// strict mode pragma, execute code by injecting a</span></span><br><span class=\"line\">        <span class=\"comment\">// script tag into the document.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( code.indexOf(<span class=\"string\">\"use strict\"</span>) === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span><br><span class=\"line\">            script.text = code;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.head.appendChild( script ).parentNode.removeChild( script );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Otherwise, avoid the DOM node creation, insertion</span></span><br><span class=\"line\">        <span class=\"comment\">// and removal by using an indirect global eval</span></span><br><span class=\"line\">            indirect( code );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####camelCase<br>将一个带连字符的字符串转驼峰形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">camelCase: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> string </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string.replace( rmsPrefix, <span class=\"string\">\"ms-\"</span> ).replace( rdashAlpha, fcamelCase );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>####nodeName<br>判断一个元素的标签名是否和传入的参数匹配，如果没有传入参数，返回元素的标签名…直接用元素的nodeName属性获得标签名，比较时注意一下全转成小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem, name </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elem.nodeName &amp;&amp; elem.nodeName.toLowerCase() === name.toLowerCase();</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####each<br>来了，用于遍历的each方法，其有一个有参数的情况</p>\n<p>在遍历时需要判断对象是类数组（注意是类数组）还是对象，类数组的话直接使用for循环，而对象使用for in。剩下就是在有无参数时候的不同调用方法了，有参数使用apply传入相应参数，如果没有使用call，传入下标和具体的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj, callback, args </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        length = obj.length,</span><br><span class=\"line\">        isArray = isArraylike( obj );</span><br><span class=\"line\">    <span class=\"comment\">/*有参数的情况下*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( args ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*数组或类数组对象*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( isArray ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">                value = callback.apply( obj[ i ], args );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( value === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*普通对象*/</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( i <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\">                value = callback.apply( obj[ i ], args );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( value === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*无参数的情况下，把当前元素和下标（键）当做参数传递*/</span></span><br><span class=\"line\">    <span class=\"comment\">// A special, fast, case for the most common use of each</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( isArray ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">                value = callback.call( obj[ i ], i, obj[ i ] );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( value === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> ( i <span class=\"keyword\">in</span> obj ) &#123;</span><br><span class=\"line\">                value = callback.call( obj[ i ], i, obj[ i ] );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( value === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####trim<br>去掉字符串的首尾空白，由于不兼容老版本IE，直接用字符串的trim了，没有用正则</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trim: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> text </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text == <span class=\"literal\">null</span> ? <span class=\"string\">\"\"</span> : trim.call( text );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####makeArray<br>讲一个类数组转化为数组，如果是数组直接push，如果不是真数组，使用merge，后面会介绍merge方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">makeArray: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> arr, results </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = results || [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( arr != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( isArraylike( <span class=\"built_in\">Object</span>(arr) ) ) &#123;</span><br><span class=\"line\">            jQuery.merge( ret,</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> arr === <span class=\"string\">\"string\"</span> ?</span><br><span class=\"line\">                [ arr ] : arr</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            push.call( ret, arr );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####inArray<br>使用indexOf判断元素是否在数组内部</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inArray: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elem, arr, i </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr == <span class=\"literal\">null</span> ? <span class=\"number\">-1</span> : indexOf.call( arr, elem, i );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####merge<br>通过遍历的方式将两个类数组合并</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">merge: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> first, second </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = +second.length,</span><br><span class=\"line\">        j = <span class=\"number\">0</span>,</span><br><span class=\"line\">        i = first.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( ; j &lt; len; j++ ) &#123;</span><br><span class=\"line\">        first[ i++ ] = second[ j ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    first.length = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####grep (elems, callback, invert)<br>将元素丢到callback中判断是否符合条件，返回所有符合条件的元素。invert为true时，返回所有不符合条件的元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep: function( elems, callback, invert ) &#123;</span><br><span class=\"line\">    var callbackInverse,</span><br><span class=\"line\">        matches &#x3D; [],</span><br><span class=\"line\">        i &#x3D; 0,</span><br><span class=\"line\">        length &#x3D; elems.length,</span><br><span class=\"line\">        callbackExpect &#x3D; !invert;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Go through the array, only saving the items</span><br><span class=\"line\">    &#x2F;&#x2F; that pass the validator function</span><br><span class=\"line\">    for ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        callbackInverse &#x3D; !callback( elems[ i ], i );</span><br><span class=\"line\">        if ( callbackInverse !&#x3D;&#x3D; callbackExpect ) &#123;</span><br><span class=\"line\">            matches.push( elems[ i ] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return matches;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####map (elems, callback, arg)<br>jq自己实现的map操作，由于jq自身是个类数组，于是乎模拟数组实现了一系列操作，map就是其中一个</p>\n<p>对数组、类数组、对象进行遍历map操作，结果放在一个数组中并返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> elems, callback, arg </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value,</span><br><span class=\"line\">        i = <span class=\"number\">0</span>,</span><br><span class=\"line\">        length = elems.length,</span><br><span class=\"line\">        isArray = isArraylike( elems ),</span><br><span class=\"line\">        ret = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Go through the array, translating each of the items to their new values</span></span><br><span class=\"line\">    <span class=\"comment\">/*数组或类数组*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( isArray ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">            value = callback( elems[ i ], i, arg );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( value != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">                ret.push( value );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Go through every key on the object,</span></span><br><span class=\"line\">    <span class=\"comment\">/*对象*/</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i <span class=\"keyword\">in</span> elems ) &#123;</span><br><span class=\"line\">            value = callback( elems[ i ], i, arg );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( value != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">                ret.push( value );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Flatten any nested arrays</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> concat.apply( [], ret );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####guid<br>一个全局的guid，用于生成独立id，每次被使用后自增</p>\n<p>####proxy<br>使用闭包的方式将对象绑定到函数的作用域链顶端，curry化的实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn, context </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp, args, proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> context === <span class=\"string\">\"string\"</span> ) &#123;</span><br><span class=\"line\">        tmp = fn[ context ];</span><br><span class=\"line\">        context = fn;</span><br><span class=\"line\">        fn = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Quick check to determine if target is callable, in the spec</span></span><br><span class=\"line\">    <span class=\"comment\">// this throws a TypeError, but we will just return undefined.</span></span><br><span class=\"line\">    <span class=\"comment\">/*必须是函数*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !jQuery.isFunction( fn ) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Simulated bind</span></span><br><span class=\"line\">    <span class=\"comment\">/*提取出参数*/</span></span><br><span class=\"line\">    args = slice.call( <span class=\"built_in\">arguments</span>, <span class=\"number\">2</span> );</span><br><span class=\"line\">    <span class=\"comment\">/*创建闭包，这个闭包使用了当前作用域的这些对象*/</span></span><br><span class=\"line\">    proxy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn.apply( context || <span class=\"keyword\">this</span>, args.concat( slice.call( <span class=\"built_in\">arguments</span> ) ) );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set the guid of unique handler to the same of original handler, so it can be removed</span></span><br><span class=\"line\">    <span class=\"comment\">/*给代理增加一个自增的guid*/</span></span><br><span class=\"line\">    proxy.guid = fn.guid = fn.guid || jQuery.guid++;</span><br><span class=\"line\">    <span class=\"comment\">/*返回代理*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>####其他<br>没啥好说的，看名字就知道了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now: <span class=\"built_in\">Date</span>.now,</span><br><span class=\"line\"></span><br><span class=\"line\">support: support</span><br></pre></td></tr></table></figure>\n\n<p>##类型判断<br>####生成class2type<br>首先是生成class2type，使用了比较巧妙的方法，对一个字符串进行切分，然后使用<code>jQuery.each</code>方法来建立class2type</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.each(<span class=\"string\">\"Boolean Number String Function Array Date RegExp Object Error\"</span>.split(<span class=\"string\">\" \"</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, name</span>) </span>&#123;</span><br><span class=\"line\">    class2type[ <span class=\"string\">\"[object \"</span> + name + <span class=\"string\">\"]\"</span> ] = name.toLowerCase();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>####判断类数组<br>判断是否是类数组对象，主要是根据是否含有大于等于0的length属性判断，含有length属性也可能是function，表明参数个数，也可能是window，需要排除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArraylike</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = obj.length,</span><br><span class=\"line\">        type = jQuery.type( obj );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( type === <span class=\"string\">\"function\"</span> || jQuery.isWindow( obj ) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( obj.nodeType === <span class=\"number\">1</span> &amp;&amp; length ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> type === <span class=\"string\">\"array\"</span> || length === <span class=\"number\">0</span> ||</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> length === <span class=\"string\">\"number\"</span> &amp;&amp; length &gt; <span class=\"number\">0</span> &amp;&amp; ( length - <span class=\"number\">1</span> ) <span class=\"keyword\">in</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>##总结<br>这一部分主要是申明了extend方法和一些在jq对象上的核心函数，以及相当多的类型判断相关</p>\n"}