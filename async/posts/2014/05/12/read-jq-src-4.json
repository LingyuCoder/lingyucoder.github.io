{"tags":[{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"JS技术","permalink":"http://lingyu.life/categories/JS%E6%8A%80%E6%9C%AF/","url":"/async/categories/JS技术.json","count":13}],"url":"/async/posts/2014/05/12/read-jq-src-4.json","date":1399824000000,"path":{"year":2014,"month":5,"day":12,"name":"read-jq-src-4"},"subtitle":"闲来没事读源码系列——jQuery","title":"jQuery的事件机制——事件对象、兼容、接口","permalink":"http://lingyu.life/2014/05/12/read-jq-src-4/","content":"<p>这篇主要介绍了jQuery中事件管理器的事件对象、兼容实现以及在jQuery对象上暴露的接口</p>\n<a id=\"more\"></a>\n\n\n<p>接上一篇 <a href=\"http://lingyu.wang/#/art/blog/2014/05/12/read-jq-src-3\" target=\"_blank\" rel=\"noopener\">jQuery的事件机制——核心篇</a></p>\n<p>##事件对象<br>jq中使用自己创立的对象传递给回调函数，这里解析一下这个事件对象：<br>###构造函数<br>jq的事件对象的构造函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.Event = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> src, props </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//内部的代码</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来接下下内部代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*兼容不使用new的情况*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> jQuery.Event) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.Event( src, props );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用于防止出现没有使用new直接调用构造函数的情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( src &amp;&amp; src.type ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.originalEvent = src;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = src.type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Events bubbling up the document may have been marked as prevented</span></span><br><span class=\"line\">    <span class=\"comment\">// by a handler lower down the tree; reflect the correct value.</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isDefaultPrevented = src.defaultPrevented ||</span><br><span class=\"line\">            <span class=\"comment\">// Support: Android &lt; 4.0</span></span><br><span class=\"line\">            src.defaultPrevented === <span class=\"literal\">undefined</span> &amp;&amp;</span><br><span class=\"line\">            src.getPreventDefault &amp;&amp; src.getPreventDefault() ?</span><br><span class=\"line\">        returnTrue :</span><br><span class=\"line\">        returnFalse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Event type</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = src;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里根据传入的是事件对象还是事件名称分别进行处理，当传入原生事件对象时，使用originalEvent指向原生事件对象，并获取它的事件名称。另外还要判断事件是否已经屏蔽默认行为了。如果传入的是字符串，直接写入到事件名称中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*通过extend添加额外属性*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( props ) &#123;</span><br><span class=\"line\">    jQuery.extend( <span class=\"keyword\">this</span>, props );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件对象可以添加一些其他属性，这里添加的属性通过props传入，直接extend就好</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*创建时间*/</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.timeStamp = src &amp;&amp; src.timeStamp || jQuery.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*jq事件对象标记*/</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>[ jQuery.expando ] = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>一个创建时的时间戳，不知道干嘛用的，至于版本号标记，主要是用来判断对象是原生事件对象还是jq自己的事件对象</p>\n<p>###原型上的方法<br>事件对象实际上是jq新建的对象，对原生事件对象进行了一层包裹，那么应该提供一些方法操作原生事件对象。我们操作原生事件对象无外乎preventDefault和stopPropagation，这里就是做了一层封装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isDefaultPrevented: returnFalse,</span><br><span class=\"line\">isPropagationStopped: returnFalse,</span><br><span class=\"line\">isImmediatePropagationStopped: returnFalse,</span><br></pre></td></tr></table></figure>\n<p>默认情况下，不会阻止默认行为，事件不会被终止。这里ImmediatePropagtaionStop其实和PropagationStop没什么区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preventDefault: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"keyword\">this</span>.originalEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isDefaultPrevented = returnTrue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( e &amp;&amp; e.preventDefault ) &#123;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>阻止默认行为，先在jq的事件对象上做个标记，然后调用原生事件的preventDefault方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"keyword\">this</span>.originalEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isPropagationStopped = returnTrue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( e &amp;&amp; e.stopPropagation ) &#123;</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">stopImmediatePropagation: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isImmediatePropagationStopped = returnTrue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stopPropagation();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>终止事件执行，同样是先在事件对象上做个标记，然后调用原生事件的pstopPropagation方法，可以看到，两个方法没什么区别</p>\n<p>##事件对象在事件机制中的使用<br>jq不嫌麻烦自己弄了个事件对象进行包装，就是为了屏蔽浏览器之间事件对象上的差异。这里jq事件对象需要根据事件的类型，来构建兼容的事件对象，同样是使用钩子的形式，调用这些钩子的地方，在事件管理器的fix方法</p>\n<p>###fix方法<br>fix方法就是将原生事件对象加工为jq自己的事件对象，内部都是用钩子来加对不同类型的事件进行加工</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( event[ jQuery.expando ] ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jq事件对象上有jq版本标记，如果标记已存在，说明是jq时间爱你对象，没必要加工了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i, prop, copy,</span><br><span class=\"line\">    <span class=\"comment\">/*获取事件的名称*/</span></span><br><span class=\"line\">    type = event.type,</span><br><span class=\"line\">    <span class=\"comment\">/*将原生事件对象缓存*/</span></span><br><span class=\"line\">    originalEvent = event,</span><br><span class=\"line\">    <span class=\"comment\">/*获取事件对象对应的钩子*/</span></span><br><span class=\"line\">    fixHook = <span class=\"keyword\">this</span>.fixHooks[ type ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*如果没有钩子，需要判断这个对象类型是鼠标事件还是键盘事件*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !fixHook ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fixHooks[ type ] = fixHook =</span><br><span class=\"line\">        rmouseEvent.test( type ) ? <span class=\"keyword\">this</span>.mouseHooks :</span><br><span class=\"line\">        rkeyEvent.test( type ) ? <span class=\"keyword\">this</span>.keyHooks :</span><br><span class=\"line\">        &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会获取特殊事件的钩子，如果没有钩子，那需要判断事件是鼠标事件还是按键事件，这俩都需要特别处理。另外也会做缓存，获取到钩子后写入到fixHooks中，下次同样类型的事件就能直接获取钩子了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*获取鼠标事件或键盘事件应当拷贝的相关属性的列表*/</span></span><br><span class=\"line\">copy = fixHook.props ? <span class=\"keyword\">this</span>.props.concat( fixHook.props ) : <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*新建一个包装了原生事件对象的jq事件对象*/</span></span><br><span class=\"line\">event = <span class=\"keyword\">new</span> jQuery.Event( originalEvent );</span><br><span class=\"line\"><span class=\"comment\">/*将这些需要拷贝的属性全部拷贝到jq事件对象中*/</span></span><br><span class=\"line\">i = copy.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( i-- ) &#123;</span><br><span class=\"line\">    prop = copy[ i ];</span><br><span class=\"line\">    event[ prop ] = originalEvent[ prop ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>鼠标类型事件和按键类型时间都有自己的一些属性，当然还有些公有属性，这里需要获取事件应当从原生事件中拷贝值名称的列表。获取到列表后新建一个jq事件对象进行拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !event.target ) &#123;</span><br><span class=\"line\">    event.target = <span class=\"built_in\">document</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( event.target.nodeType === <span class=\"number\">3</span> ) &#123;</span><br><span class=\"line\">    event.target = event.target.parentNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里修复了一些事件target不正确的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> fixHook.filter ? fixHook.filter( event, originalEvent ) : event;</span><br></pre></td></tr></table></figure>\n<p>最后再通过filter钩子做一下最后的加工处理。处理完成之后，返回jq的事件对象</p>\n<p>###鼠标事件和键盘事件的处理<br>fix中都是调用钩子来获得元素列表和filter最后处理，在事件管理器中定义了鼠标事件和键盘事件需要的属性</p>\n<p>####公有属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: <span class=\"string\">\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\"</span>.split(<span class=\"string\">\" \"</span>),</span><br></pre></td></tr></table></figure>\n<p>这些是鼠标和键盘事件公有的属性</p>\n<p>####键盘事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keyHooks: &#123;</span><br><span class=\"line\">    props: <span class=\"string\">\"char charCode key keyCode\"</span>.split(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event, original </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Add which for key events</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( event.which == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            event.which = original.charCode != <span class=\"literal\">null</span> ? original.charCode : original.keyCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里是键盘钩子，定义了键盘事件特有属性以及其filter，filter主要是将如charCode、keyCode等进行统一，创建出符合W3C标准的which</p>\n<p>####鼠标事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouseHooks: &#123;</span><br><span class=\"line\">    props: <span class=\"string\">\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\"</span>.split(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">    filter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event, original </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> eventDoc, doc, body,</span><br><span class=\"line\">            button = original.button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( event.pageX == <span class=\"literal\">null</span> &amp;&amp; original.clientX != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            eventDoc = event.target.ownerDocument || <span class=\"built_in\">document</span>;</span><br><span class=\"line\">            doc = eventDoc.documentElement;</span><br><span class=\"line\">            body = eventDoc.body;</span><br><span class=\"line\">            event.pageX = original.clientX + ( doc &amp;&amp; doc.scrollLeft || body &amp;&amp; body.scrollLeft || <span class=\"number\">0</span> ) - ( doc &amp;&amp; doc.clientLeft || body &amp;&amp; body.clientLeft || <span class=\"number\">0</span> );</span><br><span class=\"line\">            event.pageY = original.clientY + ( doc &amp;&amp; doc.scrollTop  || body &amp;&amp; body.scrollTop  || <span class=\"number\">0</span> ) - ( doc &amp;&amp; doc.clientTop  || body &amp;&amp; body.clientTop  || <span class=\"number\">0</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !event.which &amp;&amp; button !== <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            event.which = ( button &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : ( button &amp; <span class=\"number\">2</span> ? <span class=\"number\">3</span> : ( button &amp; <span class=\"number\">4</span> ? <span class=\"number\">2</span> : <span class=\"number\">0</span> ) ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>同样的方式，定义了鼠标事件特有的属性，另外做了一个兼容，做出了pageX、pageY、which等属性</p>\n<p>##特殊事件<br>上一篇讲了jq事件核心，可以看到针对特殊事件，基本上每个地方都需要通过钩子特殊处理，那么有哪些特殊事件呢？这些在事件管理器的special里都有：</p>\n<p>###load</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Prevent triggered image.load events from bubbling to window.load</span></span><br><span class=\"line\">    noBubble: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>load事件不冒泡，需要注意<br>###focus和blur</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">focus: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fire native event if possible so blur/focus sequence is correct</span></span><br><span class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span> !== safeActiveElement() &amp;&amp; <span class=\"keyword\">this</span>.focus ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.focus();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delegateType: <span class=\"string\">\"focusin\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">blur: &#123;</span><br><span class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span> === safeActiveElement() &amp;&amp; <span class=\"keyword\">this</span>.blur ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.blur();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delegateType: <span class=\"string\">\"focusout\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>focus和blur事件，这俩有自己的trigger钩子，另外其使用代理时名称也不同。事实上focus和blur除了trigger钩子，还有在事件注册和事件删除时的setup和teardown钩子，可以看到代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !support.focusinBubbles ) &#123;</span><br><span class=\"line\">    jQuery.each(&#123; <span class=\"attr\">focus</span>: <span class=\"string\">\"focusin\"</span>, <span class=\"attr\">blur</span>: <span class=\"string\">\"focusout\"</span> &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> orig, fix </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Attach a single capturing handler on the document while someone wants focusin/focusout</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">                jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), <span class=\"literal\">true</span> );</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        jQuery.event.special[ fix ] = &#123;</span><br><span class=\"line\">            setup: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> doc = <span class=\"keyword\">this</span>.ownerDocument || <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    attaches = data_priv.access( doc, fix );</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( !attaches ) &#123;</span><br><span class=\"line\">                    doc.addEventListener( orig, handler, <span class=\"literal\">true</span> );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                data_priv.access( doc, fix, ( attaches || <span class=\"number\">0</span> ) + <span class=\"number\">1</span> );</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            teardown: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> doc = <span class=\"keyword\">this</span>.ownerDocument || <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    attaches = data_priv.access( doc, fix ) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( !attaches ) &#123;</span><br><span class=\"line\">                    doc.removeEventListener( orig, handler, <span class=\"literal\">true</span> );</span><br><span class=\"line\">                    data_priv.remove( doc, fix );</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    data_priv.access( doc, fix, attaches );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###click</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">click: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// For checkbox, fire native event so checked state will be right</span></span><br><span class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.type === <span class=\"string\">\"checkbox\"</span> &amp;&amp; <span class=\"keyword\">this</span>.click &amp;&amp; jQuery.nodeName( <span class=\"keyword\">this</span>, <span class=\"string\">\"input\"</span> ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.click();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/*浏览器兼容，如果元素是a标签，那么不触发原生click事件*/</span></span><br><span class=\"line\">    <span class=\"comment\">// For cross-browser consistency, don't fire native .click() on links</span></span><br><span class=\"line\">    _default: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jQuery.nodeName( event.target, <span class=\"string\">\"a\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>点击时间爱你，在checkbox上有钩子，调用其原生api。另外，当元素为a标签时，不触发原生click事件<br>###beforeunload</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeunload: &#123;</span><br><span class=\"line\">    postDispatch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Support: Firefox 20+</span></span><br><span class=\"line\">        <span class=\"comment\">// Firefox doesn't alert if the returnValue field is not set.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( event.result !== <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            event.originalEvent.returnValue = event.result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>beforeunlaod事件在ff中最后结果可能不同，需要做兼容<br>###mouseenter和mouseleave<br>mouseover和mouseout的问题在于，他们只监听最外层的大容器，而大容器中是由很多子元素的。如果鼠标在子元素上，而离开了大容器，mouseout事件也会触发。</p>\n<p>比如一个列式菜单，最上层菜单上有一些选项，鼠标悬停在选项上，右侧会出现该选项下的子选项。如果在菜单上使用mouseover和mouseout来绑定事件，当鼠标移动到子选项时，实际上移出了容器，会触发mouseout事件，菜单就被隐藏了…</p>\n<p>jq通过新建两个事件mouseenter和mouseleave来防止这种情况发生</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.each(&#123;</span><br><span class=\"line\">    mouseenter: <span class=\"string\">\"mouseover\"</span>,</span><br><span class=\"line\">    mouseleave: <span class=\"string\">\"mouseout\"</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> orig, fix </span>) </span>&#123;</span><br><span class=\"line\">    jQuery.event.special[ orig ] = &#123;</span><br><span class=\"line\">        delegateType: fix,</span><br><span class=\"line\">        bindType: fix,</span><br><span class=\"line\"></span><br><span class=\"line\">        handle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ret,</span><br><span class=\"line\">                target = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                related = event.relatedTarget,</span><br><span class=\"line\">                handleObj = event.handleObj;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// For mousenter/leave call the handler if related is outside the target.</span></span><br><span class=\"line\">            <span class=\"comment\">// NB: No relatedTarget if the mouse left/entered the browser window</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !related || (related !== target &amp;&amp; !jQuery.contains( target, related )) ) &#123;</span><br><span class=\"line\">                event.type = handleObj.origType;</span><br><span class=\"line\">                ret = handleObj.handler.apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">                event.type = fix;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以看到，这里可以看到，使用contains判断当前元素是否被包含在容器中，如果包含将不会执行回调函数</p>\n<p>##jQuery对象上的方法<br>我们需要一系列的方法将事件用于jQuery对象之上，依旧是在fn上扩展，有如下一些方法：</p>\n<ol>\n<li>on： 绑定事件添加回调</li>\n<li>one：绑定知识性一次的事件</li>\n<li>off：移除事件</li>\n<li>trigger：对每一个元素触发事件</li>\n<li>triggerHandler：对jq对象中的第一个元素触发事件</li>\n</ol>\n<p>###on (types, selector, data, fn, /*内部使用*/one)<br>jq使用on方法在元素时行绑定事件，这里types可以是一个<code>event1 event2</code>这样的字符串，同时绑定多个事件公用相同的回调函数fn。另外，当types为对象时，键为事件名称，值为回调函数，也可以一次绑定多个事件。这是一个多接口方法，需要根据传入的参数判断如何处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> types === <span class=\"string\">\"object\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ( types-Object, selector, data )</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> selector !== <span class=\"string\">\"string\"</span> ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ( types-Object, data )</span></span><br><span class=\"line\">        data = data || selector;</span><br><span class=\"line\">        selector = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*一次绑定多个事件*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( type <span class=\"keyword\">in</span> types ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.on( type, selector, data, types[ type ], one );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这里就是处理types为对象的情况，这里实际上根据types中的每个键值对，递归调用了on方法进行单个绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*可以不提供数据*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( data == <span class=\"literal\">null</span> &amp;&amp; fn == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ( types, fn )</span></span><br><span class=\"line\">    <span class=\"comment\">//情况1</span></span><br><span class=\"line\">    fn = selector;</span><br><span class=\"line\">    data = selector = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( fn == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> selector === <span class=\"string\">\"string\"</span> ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ( types, selector, fn )</span></span><br><span class=\"line\">        <span class=\"comment\">//情况2</span></span><br><span class=\"line\">        fn = data;</span><br><span class=\"line\">        data = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ( types, data, fn )</span></span><br><span class=\"line\">        <span class=\"comment\">//情况3</span></span><br><span class=\"line\">        fn = data;</span><br><span class=\"line\">        data = selector;</span><br><span class=\"line\">        selector = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( fn === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">    fn = returnFalse;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( !fn ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里处理了三种情况：</p>\n<ol>\n<li>只有事件名称和回调函数</li>\n<li>有事件名称，代理选择器和回调函数</li>\n<li>有事件名称，事件数据和回调函数</li>\n</ol>\n<p>如果没有回调函数，需要给与一个默认的回调函数，这个默认回调函数直接<code>return false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( one === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">    origFn = fn;</span><br><span class=\"line\">    fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> event </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can use an empty set, since event contains the info</span></span><br><span class=\"line\">        jQuery().off( event );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origFn.apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Use same guid so caller can remove using origFn</span></span><br><span class=\"line\">    fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以绑定一次性事件，实现骑士很简单，通过闭包对事件回调函数做一个包装，在其被运行之前，调用off移除掉事件就行了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    jQuery.event.add( <span class=\"keyword\">this</span>, types, fn, data, selector );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，确定好了配置，最后在jq对象中的每个元素上调用通过事件管理器的add方法添加事件回调函数</p>\n<p>###one ( types, selector, data, fn )<br>绑定一次性事件，上面的on已经做了实现，这里只不过是调用一下接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> types, selector, data, fn </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.on( types, selector, data, fn, <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>###off ( types, selector, fn )<br>同样是个多接口函数，在只有事件名称时，直接删除整个事件。如果有确定回调函数，那么删除对应时间的对应回调函数。需要注意代理的情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( types &amp;&amp; types.preventDefault &amp;&amp; types.handleObj ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ( event )  dispatched jQuery.Event</span></span><br><span class=\"line\">    handleObj = types.handleObj;</span><br><span class=\"line\">    jQuery( types.delegateTarget ).off(</span><br><span class=\"line\">        handleObj.namespace ? handleObj.origType + <span class=\"string\">\".\"</span> + handleObj.namespace : handleObj.origType,</span><br><span class=\"line\">        handleObj.selector,</span><br><span class=\"line\">        handleObj.handler</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里处理的是参数是事件对象的情况，这种情况会在使用one绑定事件回调执行后自动删除时发生。获取事件对象其中的属性，递归调用off删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> types === <span class=\"string\">\"object\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ( types-object [, selector] )</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( type <span class=\"keyword\">in</span> types ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.off( type, selector, types[ type ] );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果typs是事件名称到回调函数的键值对，那么对其中的每个键和值，分别进行删除，递归调用off删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( selector === <span class=\"literal\">false</span> || <span class=\"keyword\">typeof</span> selector === <span class=\"string\">\"function\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ( types [, fn] )</span></span><br><span class=\"line\">    fn = selector;</span><br><span class=\"line\">    selector = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( fn === <span class=\"literal\">false</span> ) &#123;</span><br><span class=\"line\">    fn = returnFalse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里处理了只有事件名称和回调函数的接口情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    jQuery.event.remove( <span class=\"keyword\">this</span>, types, fn, selector );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，对jq对象中的每个元素移除事件中的回调函数就好</p>\n<p>###trigger (type, data) 和 triggerHandler (type, data)<br>没啥说的，都是直接用的事件管理器的trigger方法。只不过前者对每个元素调用一次，后者只对第一个元素调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*对jq对象中的每个元素触发事件*/</span></span><br><span class=\"line\">trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> type, data </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        jQuery.event.trigger( type, data, <span class=\"keyword\">this</span> );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">/*对jq对象中的第一个元素触发事件*/</span></span><br><span class=\"line\">triggerHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> type, data </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( elem ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jQuery.event.trigger( type, data, elem, <span class=\"literal\">true</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>##总结<br>这一篇直接看的话，肯定会不知所云…最好能结合上一篇一起看，上一篇介绍了事件机制的核心方法，这一篇主要是jq事件对象和一些兼容性问题的解决方法（主要是钩子）。jq的钩子方式很不错，在写框架对付兼容性问题时可以多多使用</p>\n"}