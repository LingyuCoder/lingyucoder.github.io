{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":21},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":26},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":17},{"name":"动画","permalink":"http://lingyu.life/tags/%E5%8A%A8%E7%94%BB/","url":"/async/tags/动画.json","count":2},{"name":"Kissy","permalink":"http://lingyu.life/tags/Kissy/","url":"/async/tags/Kissy.json","count":1}],"categories":[{"name":"互动动画","permalink":"http://lingyu.life/categories/%E4%BA%92%E5%8A%A8%E5%8A%A8%E7%94%BB/","url":"/async/categories/互动动画.json","count":2}],"url":"/async/posts/2014/05/31/old/kissy-anime-plugin.json","date":1401465600000,"path":{"year":2014,"month":5,"day":31,"name":"old/kissy-anime-plugin"},"subtitle":"一个小作业","title":"如何写一个KISSY动画插件","permalink":"http://lingyu.life/2014/05/31/old/kissy-anime-plugin/","content":"<p>最近写东西写的比较少，并不代表我一直在划水。之前阿里的前辈布置了三个作业，其中一个就是基于KISSY写一个动画插件。事实上，KISSY已经有自己的动画模块，叫做<a href=\"http://docs.kissyui.com/1.4/docs/html/api/anim/index.html\" target=\"_blank\" rel=\"noopener\">anim</a>，这里前辈的意思就是让我再造一个轮子，<a href=\"http://lingyucoder.github.io/kissy-anime-plugin\" target=\"_blank\" rel=\"noopener\">DEMO页面</a>，<a href=\"https://github.com/LingyuCoder/kissy-anime-plugin\" target=\"_blank\" rel=\"noopener\">Github页面</a></p>\n<a id=\"more\"></a>\n\n<p>目前已经有很多比较优秀的JavaScript动画实现了，比如<a href=\"https://github.com/sole/tween.js\" target=\"_blank\" rel=\"noopener\">Tween.js</a>，jQuery中的animate就是在Tween的基础上做了一层封装（2.0版本是Tween，老版本的jQuery则是自己实现的动画）。这里多多少少参照了优秀动画模块的思想和内容（比如缓动函数）。</p>\n<h2 id=\"CSS与JavaScript动画对比\"><a href=\"#CSS与JavaScript动画对比\" class=\"headerlink\" title=\"CSS与JavaScript动画对比\"></a>CSS与JavaScript动画对比</h2><p>首先需要确定为什么要开发JavaScript的动画模块，毕竟现在已经有CSS3动画了。这里先对比一下CSS动画和JavaScript动画的区别，并从中提炼出我们需要的信息</p>\n<h3 id=\"CSS动画\"><a href=\"#CSS动画\" class=\"headerlink\" title=\"CSS动画\"></a>CSS动画</h3><h4 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h4><p>CSS3新增了一个<code>animation</code>属性，可以定义动画，相关的属性如下：</p>\n<ol>\n<li>animation-name：动画的名称，也就是定义的keyframes关键帧的名称</li>\n<li>animation-duration：一次动画的时长</li>\n<li>animation-timing-funciton：缓动函数，这个后面会有详细介绍</li>\n<li>animation-delay：动画延迟时间</li>\n<li>animation-iteration-count：动画的播放次数</li>\n<li>animation-direction：动画时正向播放还是倒着播放</li>\n<li>animation-play-state：动画的状态，暂停还是播放</li>\n<li>animation-fill-mode：动画播放时间之外的状态，是否重回动画初始</li>\n<li>animation：复合属性，上面属性合在一起的写法</li>\n</ol>\n<p>可以看到，这里定义了一个动画的整体属性，但并没有定义具体的样式改变。这个任务交给了<code>keyframes</code>去做。也即是说，<code>animation</code>不会单独存在，它总是通过<code>animation-name</code>关联到某个<code>keyframes</code>，这是一个多对一的关系。在<code>keyframes</code>中，具体定义了这个动画哪些样式需要改变，改变多少。</p>\n<h4 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h4><p>另外，还有一个<code>transition</code>属性，可以定义过渡效果，相关属性如下：</p>\n<ol>\n<li>transition-property：需要参与过渡的属性</li>\n<li>transition-duration 过渡的时长</li>\n<li>transition-timing-function：过渡的缓动函数</li>\n<li>transition-delay：过渡的延时</li>\n</ol>\n<p><code>transtion</code>定义的是过渡效果，所谓过渡，就是当某个样式改变时，浏览器不会立即赋予这个改变后的值，而是从初始值逐渐改变，平滑的转变成改变后的值。这样也能形成很优秀的动画效果。同时不需要与<code>keyframes</code>结合，可以自己独立存在。</p>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>先来说说优点，CSS3的动画的效率要比JavaScript要高，这不是通过优化JavaScript代码就能逆转的。由于CSS3动画作为浏览器渲染引擎实现的一部分，相对于JavaScript动画而言，省去了JavaScript部分，直接由底层语言实现，并且其内部可由浏览器做一系列相关的优化。比如webkit，它可以专门为动画元素创建一个图层，然后将这个元素的样式转变在主线程之外运行。</p>\n<p>但是，CSS3动画缺乏足够的控制能力，同时，如果我们动画改变的不是CSS属性（比如滚动，这也是视差滚动必须通过JavaScript实现的原因），CSS3的动画就没辙了。另外，其浏览器的兼容性也是很大问题。毕竟IE从9开始才逐渐开始实现CSS3，如果要在IE6~8中做动画效果，就得另寻他法了</p>\n<h3 id=\"JavaScript动画\"><a href=\"#JavaScript动画\" class=\"headerlink\" title=\"JavaScript动画\"></a>JavaScript动画</h3><p>JavaScript的动画，说白了就是每隔一小段时间修改元素的CSS样式。这个间隔时间一般是1000/60ms，也就是说，每秒钟该60次，达到一秒60帧的效果。每次修改，大致需要经过如下流程：</p>\n<ol>\n<li>计算当前元素样式</li>\n<li>修改元素样式</li>\n<li>重绘元素</li>\n</ol>\n<p>前两部都是通过JavaScript完成，这也意味着，它不精确。如我们所知，JavaScript的定时函数<code>setTimeout</code>和<code>setInterval</code>本来就不是很精确（现在可以使用requestAnimationFrame，但老版本IE不兼容），而JavaScript运行在主线程——UI线程上，上面运行的其他任务（样式计算、布局、绘制、其他JavaScript代码等）都可能造成线程的阻塞。这也是JavaScript动画的最大弊病。</p>\n<p>但JavaScript本身，拥有强大的控制能力，它可以随心所欲的控制动画，开始、暂停、倒放、中止、回放、单帧等等，这些JavaScript都能搞定。而像CSS动画无法做的滚动效果，JavaScript也可以轻松实现。而且，我们可以将动画扩展到IE 6~8上（当然transform还是不兼容）。</p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><h3 id=\"动画属性\"><a href=\"#动画属性\" class=\"headerlink\" title=\"动画属性\"></a>动画属性</h3><p>通过参考CSS动画实现，我们也可以很容易的确定，通过实现JavaScript实现动画时，动画应该具备的属性：</p>\n<ol>\n<li>涉及的元素（elems）</li>\n<li>需要改变的样式（styles）</li>\n<li>时长（duration）</li>\n<li>缓动函数（easing-function）</li>\n<li>播放次数（times）</li>\n</ol>\n<h3 id=\"动画控制\"><a href=\"#动画控制\" class=\"headerlink\" title=\"动画控制\"></a>动画控制</h3><p>而控制上，我们应该实现的功能：</p>\n<ol>\n<li>开始（run）</li>\n<li>暂停（pause）</li>\n<li>暂停恢复（resume）</li>\n<li>中止（stop）</li>\n<li>倒放（reverse）</li>\n<li>单帧（go）</li>\n</ol>\n<h3 id=\"动画能够改变的内容\"><a href=\"#动画能够改变的内容\" class=\"headerlink\" title=\"动画能够改变的内容\"></a>动画能够改变的内容</h3><p>需要能够改变的内容有：</p>\n<ol>\n<li>CSS样式</li>\n<li>滚动</li>\n</ol>\n<h2 id=\"动画对象\"><a href=\"#动画对象\" class=\"headerlink\" title=\"动画对象\"></a>动画对象</h2><p>如之前所说，JavaScript动画，实际上就是每隔一小段时间改变元素的样式。我们可以把动画看做一个对象，其内部有这个动画相关的元素、动画的属性，并提供一系列的接口控制这个动画</p>\n<p>所以，动画的对象大致上是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Anime</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Anime.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Anime.prototype.pause = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Anime.prototype.resume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Anime.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Anime.prototype.go = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>而倒放是事先定义好的，我们可以作为动画属性传入</p>\n<p>动画最终要的，就是参与动画的元素，和需要被改变的样式及其目标值。这两者，我们是没办法通过给默认值的形式来省略的。其他的，我们可以通过给一些默认值来简化API，所以将接口设计成如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Anime</span>(<span class=\"params\">elems, styles, config</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>conifg是一个对象，剩下的可选属性都在其中定义，通过mixin的方式加入到动画对象中，还可以提供一些默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> defaultConfig = &#123;</span><br><span class=\"line\">    callback: noop,</span><br><span class=\"line\">    duration: <span class=\"number\">1500</span>,</span><br><span class=\"line\">    reverse: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    easing: <span class=\"string\">\"linear\"</span>,</span><br><span class=\"line\">    times: <span class=\"number\">1</span>,</span><br><span class=\"line\">    spend: <span class=\"number\">0</span>,</span><br><span class=\"line\">    state: <span class=\"string\">\"running\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里还加了一些其他属性，比如spend和state，spend实际上就是当前动画运行了多长时间，state则是动画对象当前的状态，是播放中（running），还是暂停（paused），还是结束（ended）。state结合控制来做的话，就是一个状态机：</p>\n<ul>\n<li>running为初始状态，可以通过pause方法，转到paused状态，也可以通过stop方法，转到ended状态</li>\n<li>paused为暂停状态，通过resume方法，转到running状态，也可以通过stop转到ended状态</li>\n<li>ended为终止状态，可以通过run放法进行重放，转到running状态</li>\n</ul>\n<h2 id=\"动画队列\"><a href=\"#动画队列\" class=\"headerlink\" title=\"动画队列\"></a>动画队列</h2><p>光有动画对象是不够的，我们需要对所有的动画对象进行处理，获取其中running状态的对象，每隔一小段时间，修改其状态，并绘制到页面上。这里就需要一个动画队列了，实际上也就是一个数组，里面的每个元素都是状态为running的动画对象。每隔1000/60ms就遍历一遍这个数组，更新每一个动画对象的状态，并进行绘制。</p>\n<p>需要注意的地方是，队列中只有running状态的对象，也就是说，如果队列中没有元素，那么就不需要每隔一段时间去遍历了。另外，如果有动画运行结束，变成不是running状态，那么需要从动画队列中移除</p>\n<p>所以，队列首先得实现相关的添加删除操作，注意去重：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> animeQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAnime</span>(<span class=\"params\">anime</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.indexOf(anime, animeQueue) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        animeQueue.push(anime);</span><br><span class=\"line\">        checkRunning();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteAnime</span>(<span class=\"params\">anime</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = S.indexOf(anime, animeQueue);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        animeQueue.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        checkRunning();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，还有一个心跳函数，用于每隔一段时间遍历动画队列：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pulse</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deleteIndex = [],</span><br><span class=\"line\">        i, m, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (running) &#123;</span><br><span class=\"line\">        S.each(animeQueue, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">anime, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (anime.state === <span class=\"string\">\"running\"</span>) &#123;</span><br><span class=\"line\">                anime.go();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                deleteIndex.push(index);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = deleteIndex.length; i--;) &#123;</span><br><span class=\"line\">            animeQueue.splice(deleteIndex[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dealing = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        checkRunning();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>checkRunning函数，来决定下一帧，是否需要运行，如果队列中没有动画对象了，自然不需要运行了，否则就要继续遍历动画队列：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkRunning</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (animeQueue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dealing) &#123;</span><br><span class=\"line\">            dealing = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            requestAnimationFrame(pulse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        dealing = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓动函数\"><a href=\"#缓动函数\" class=\"headerlink\" title=\"缓动函数\"></a>缓动函数</h2><p>缓动函数的说明和教程网上还是比较多的，说白了就是一个进度的映射。一般都是使用一些现有的缓动函数，我直接从Tween中把它的缓动函数扒了出来…</p>\n<h2 id=\"样式处理\"><a href=\"#样式处理\" class=\"headerlink\" title=\"样式处理\"></a>样式处理</h2><p>动画可以理解为三个问题，从什么地方开始，经过什么样的过程，到什么地方去。我们可以通过构建动画对象时传入的styles来确定需要修改的样式，以及样式动画最终的目标值。这个目标值可以是绝对的，比如<code>width: 400px</code>，就是要修改宽度到400像素，但也可以相对的，比如<code>width: +=200px</code>，在原有基础上增大200像素的宽度。我们需要确定元素样式的起始值、绝对的目标值，才能算出某个时间点的中间值，并将中间值赋予给元素。所以，样式的处理应该包括四个部分：</p>\n<ol>\n<li>从元素获取样式的起始值（从什么地方开始）</li>\n<li>获取样式的绝对目标值，如果传入的是相对值，那么需要通过起始值来计算的处绝对目标值（到什么地方去）</li>\n<li>计算当前时间点的中间值（经过怎样的过程）</li>\n<li>向元素赋予计算出来的中间值（经过怎样的过程）</li>\n</ol>\n<p>后两个一个是计算，一个是展示，都属于过程内容。可以把这四个部分抽象成四个方法，分别是获取、解析、计算、赋值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCSS</span>(<span class=\"params\">elem, style</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hooks[style] &amp;&amp; hooks[style].get) &#123;</span><br><span class=\"line\">        val = hooks[style].get(elem, style);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = hooks._default.get(elem, style);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseCSS(val, style);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseCSS</span>(<span class=\"params\">val, style, from</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hooks[style] &amp;&amp; hooks[style].parse) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hooks[style].parse(val, <span class=\"keyword\">from</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hooks._default.parse(val, <span class=\"keyword\">from</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeCSS</span>(<span class=\"params\">style, from, to, pos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hooks[style] &amp;&amp; hooks[style].compute) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hooks[style].compute(<span class=\"keyword\">from</span>, to, pos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hooks._default.compute(<span class=\"keyword\">from</span>, to, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignCSS</span>(<span class=\"params\">elem, style, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hooks[style] &amp;&amp; hooks[style].assign) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hooks[style].assign(elem, style, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hooks._default.assign(elem, style, val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，可以看到很多hooks，阅读过jQuery源码的不会对这种方式陌生。钩子是为特别样式提供特别处理，如果不需要通过钩子进行处理，直接使用_default提供的默认处理方式就行了</p>\n<h2 id=\"特殊处理\"><a href=\"#特殊处理\" class=\"headerlink\" title=\"特殊处理\"></a>特殊处理</h2><p>一般的属性，可以通过<code>Dom.css</code>很轻松的获取起始值并计算出绝对目标值，但有一些则不然，这里列三个特例</p>\n<h3 id=\"颜色属性\"><a href=\"#颜色属性\" class=\"headerlink\" title=\"颜色属性\"></a>颜色属性</h3><p>如color、background等，这些我们应该为其提供渐变，但无论是用户传入的目标值，还是获取到的值，都有好几个形式：</p>\n<ol>\n<li>HEX：<code>#fff</code>或<code>#f0f0f0</code></li>\n<li>RGB：<code>rgb(245, 28, 33)</code></li>\n<li>RGBA：<code>rgba(245, 28, 33, .6)</code></li>\n<li>直接名称：<code>red</code>、<code>white</code>等等</li>\n<li>HSL和HSLA，这里不做实现</li>\n</ol>\n<h4 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h4><p>获取和一般CSS属性没差， 直接使用默认方式了</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>一般，是统一将其解析成RGBA的形式来做，如果不支持RGBA的浏览器，解析成RGB。这样我们就拥有了两个三个元素（RGB）或四个元素的数组（RGBA），一个数组为起始值，一个数组为目标值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseColor</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    val = val.replace(rClearSpace, <span class=\"string\">\"\"</span>).toLowerCase();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (normalColors[val]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> normalColors[val];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> color = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rHexColor.test(val)) &#123;</span><br><span class=\"line\">        tmp = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.length === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i--;) &#123;</span><br><span class=\"line\">                tmp[i] = val.charAt(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                tmp[i] += tmp[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val.length === <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i--;) &#123;</span><br><span class=\"line\">                tmp[i] = val.substr(<span class=\"number\">1</span> + i * <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i--;) &#123;</span><br><span class=\"line\">            color[i] = <span class=\"built_in\">parseInt</span>(tmp[i], <span class=\"number\">16</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        color[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!S.isNull(tmp = val.match(rRGB))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">3</span>; i--;) &#123;</span><br><span class=\"line\">            color[i] = <span class=\"built_in\">parseInt</span>(tmp[i + <span class=\"number\">1</span>], <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        color[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!S.isNull(tmp = val.match(rRGBA))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">4</span>; i--;) &#123;</span><br><span class=\"line\">            color[i] = <span class=\"built_in\">Number</span>(tmp[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h4><p>计算中间值的过程则是对颜色数组中的每一个元素（R或G或B或A）计算一下中间值就行了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeColor</span>(<span class=\"params\">from, to, pos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _default = hooks._default,</span><br><span class=\"line\">        result = [],</span><br><span class=\"line\">        i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        result.push(<span class=\"built_in\">parseInt</span>(_default.compute(<span class=\"keyword\">from</span>[i], to[i], pos), <span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result.push(_default.compute(<span class=\"keyword\">from</span>[<span class=\"number\">3</span>], to[<span class=\"number\">3</span>], pos));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>赋值的时候，我们需要将数组恢复成CSS中的方式，也就是恢复成RGB或RGBA的方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignColor</span>(<span class=\"params\">elem, style, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(KISSY.Features.isIELessThan(<span class=\"number\">9</span>))&#123;</span><br><span class=\"line\">        Dom.css(elem, style, <span class=\"string\">\"rgb(\"</span> + val.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>).join(<span class=\"string\">\",\"</span>) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Dom.css(elem, style, <span class=\"string\">\"rgba(\"</span> + val.join(<span class=\"string\">\",\"</span>) + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"滚动\"><a href=\"#滚动\" class=\"headerlink\" title=\"滚动\"></a>滚动</h3><h4 id=\"获取-1\"><a href=\"#获取-1\" class=\"headerlink\" title=\"获取\"></a>获取</h4><p>滚动并不属于CSS属性，但我们经常会使用，比如滚动到页首。KISSY本身提供了包装，可以获取当前滚动的高度</p>\n<h4 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>通过KISSY获取的滚动属性值无需解析，可以使用默认解析</p>\n<h4 id=\"计算-1\"><a href=\"#计算-1\" class=\"headerlink\" title=\"计算\"></a>计算</h4><p>计算过程也是，使用默认计算即可</p>\n<h4 id=\"赋值-1\"><a href=\"#赋值-1\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>赋值过程就和一般的CSS属性不一样了，使用KISSY提供的接口进行赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S.each(<span class=\"string\">\"scrollTop scrollLeft\"</span>.split(<span class=\"string\">\" \"</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _default = hooks._default;</span><br><span class=\"line\">    hooks[type] = &#123;</span><br><span class=\"line\">        assign: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, style, val</span>) </span>&#123;</span><br><span class=\"line\">            Dom[type](elem, val);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">get</span>: function(elem, style) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Dom[type](elem);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h3><p><strong>这里只处理了2D的transform</strong></p>\n<p>transform的值也有很多不同的形式：</p>\n<ol>\n<li>matrix</li>\n<li>rotate</li>\n<li>translate、translateX、translateY</li>\n<li>scale、scaleX、scaleY</li>\n<li>skew、skewX、skewY</li>\n</ol>\n<h4 id=\"获取-2\"><a href=\"#获取-2\" class=\"headerlink\" title=\"获取\"></a>获取</h4><p>获取的过程和一般CSS元素获取的过程没有差别，使用默认的方式就好</p>\n<h4 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>这里就比较麻烦了，需要处理所有的情况，我们将所有的情况转变成如下的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = &#123;</span><br><span class=\"line\">    translateX: <span class=\"number\">0</span>,</span><br><span class=\"line\">    translateY: <span class=\"number\">0</span>,</span><br><span class=\"line\">    rotate: <span class=\"number\">0</span>,</span><br><span class=\"line\">    skewX: <span class=\"number\">0</span>,</span><br><span class=\"line\">    skewY: <span class=\"number\">0</span>,</span><br><span class=\"line\">    scaleX: <span class=\"number\">1</span>,</span><br><span class=\"line\">    scaleY: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>代码较长</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decomposeMatrix</span>(<span class=\"params\">matrix</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scaleX, scaleY, skew,</span><br><span class=\"line\">        A = matrix[<span class=\"number\">0</span>],</span><br><span class=\"line\">        B = matrix[<span class=\"number\">1</span>],</span><br><span class=\"line\">        C = matrix[<span class=\"number\">2</span>],</span><br><span class=\"line\">        D = matrix[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make sure matrix is not singular</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A * D - B * C) &#123;</span><br><span class=\"line\">        scaleX = <span class=\"built_in\">Math</span>.sqrt(A * A + B * B);</span><br><span class=\"line\">        skew = (A * C + B * D) / (A * D - C * B);</span><br><span class=\"line\">        scaleY = (A * D - B * C) / scaleX;</span><br><span class=\"line\">        <span class=\"comment\">// step (6)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A * D &lt; B * C) &#123;</span><br><span class=\"line\">            skew = -skew;</span><br><span class=\"line\">            scaleX = -scaleX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// matrix is singular and cannot be interpolated</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// In this case the elem shouldn't be rendered, hence scale == 0</span></span><br><span class=\"line\">        scaleX = scaleY = skew = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The recomposition order is very important</span></span><br><span class=\"line\">    <span class=\"comment\">// see http://hg.mozilla.org/mozilla-central/file/7cb3e9795d04/layout/style/nsStyleAnimation.cpp#l971</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        translateX: myParse(matrix[<span class=\"number\">4</span>]),</span><br><span class=\"line\">        translateY: myParse(matrix[<span class=\"number\">5</span>]),</span><br><span class=\"line\">        rotate: myParse(<span class=\"built_in\">Math</span>.atan2(B, A) * <span class=\"number\">180</span> / <span class=\"built_in\">Math</span>.PI),</span><br><span class=\"line\">        skewX: myParse(<span class=\"built_in\">Math</span>.atan(skew) * <span class=\"number\">180</span> / <span class=\"built_in\">Math</span>.PI),</span><br><span class=\"line\">        skewY: <span class=\"number\">0</span>,</span><br><span class=\"line\">        scaleX: myParse(scaleX),</span><br><span class=\"line\">        scaleY: myParse(scaleY)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valueStringToArray</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = val.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    result = S.map(result, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myParse(value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseTransform</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;</span><br><span class=\"line\">        translateX: <span class=\"number\">0</span>,</span><br><span class=\"line\">        translateY: <span class=\"number\">0</span>,</span><br><span class=\"line\">        rotate: <span class=\"number\">0</span>,</span><br><span class=\"line\">        skewX: <span class=\"number\">0</span>,</span><br><span class=\"line\">        skewY: <span class=\"number\">0</span>,</span><br><span class=\"line\">        scaleX: <span class=\"number\">1</span>,</span><br><span class=\"line\">        scaleY: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> regResult;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, j, m;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strs;</span><br><span class=\"line\">    strs = val.replace(rClearSpace, <span class=\"string\">\"\"</span>).split(<span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, m = strs.length; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!strs[i] || strs[i] === <span class=\"string\">\"none\"</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        regResult = strs[i].split(<span class=\"string\">\"(\"</span>);</span><br><span class=\"line\">        name = regResult[<span class=\"number\">0</span>];</span><br><span class=\"line\">        value = valueStringToArray(regResult[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (name) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"matrix\"</span>:</span><br><span class=\"line\">                result = decomposeMatrix(value);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"translate\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"skew\"</span>:</span><br><span class=\"line\">                result[name + <span class=\"string\">\"X\"</span>] = value[<span class=\"number\">0</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">                result[name + <span class=\"string\">\"Y\"</span>] = value[<span class=\"number\">1</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"scale\"</span>:</span><br><span class=\"line\">                result[name + <span class=\"string\">\"X\"</span>] = value[<span class=\"number\">0</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">                result[name + <span class=\"string\">\"Y\"</span>] = value[<span class=\"number\">1</span>] || result[name + <span class=\"string\">\"X\"</span>];</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"translateX\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"translateY\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"scaleX\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"scaleY\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"skewX\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"skewY\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"rotate\"</span>:</span><br><span class=\"line\">                result[name] = value[<span class=\"number\">0</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这其中decomposeMatrix函数来自KISSY，将matrix转换成变换属性的形式。</p>\n<h4 id=\"计算-2\"><a href=\"#计算-2\" class=\"headerlink\" title=\"计算\"></a>计算</h4><p>获取到上面的结构后，只需要对其中的每一项计算中间值就可以了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computeTransform</span>(<span class=\"params\">from, to, pos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _default = hooks._default;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">    S.each(to, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">        result[key] = _default.compute(<span class=\"keyword\">from</span>[key], to[key], pos);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值-2\"><a href=\"#赋值-2\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><p>赋值也是一样，将上面的结构一一提取合并，组成一个字符串，另外需要注意添加上相应的单位：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assignTransform</span>(<span class=\"params\">elem, style, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> valueArray = [];</span><br><span class=\"line\">    S.each(val, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((key.indexOf(<span class=\"string\">\"scale\"</span>) &gt; <span class=\"number\">-1</span> &amp;&amp; value === <span class=\"number\">1</span>) || (key.indexOf(<span class=\"string\">\"scale\"</span>) === <span class=\"number\">-1</span> &amp;&amp; value === <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">\"rotate\"</span> || key.indexOf(<span class=\"string\">\"skew\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            value += <span class=\"string\">\"deg\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.indexOf(<span class=\"string\">\"translate\"</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            value += <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        valueArray.push(key + <span class=\"string\">\"(\"</span> + value + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Dom.css(elem, style, valueArray.join(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这是一次造轮子实验，效果还是出来了，基本的动画都能完成，且兼容IE 6，transform部分兼容到IE 9，虽然不可能直接替代KISSY的anim模块，但用起来也不算差，毕竟兼容问题都让KISSY去做了。毕竟这只是个作业，中间搞搞停停弄了3天，之后就是写DEMO之类的。后面打算优化一下代码</p>\n"}