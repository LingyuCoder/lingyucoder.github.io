{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":30},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":24},{"name":"思考","permalink":"http://lingyu.life/tags/%E6%80%9D%E8%80%83/","url":"/async/tags/思考.json","count":3}],"categories":[{"name":"思考总结","permalink":"http://lingyu.life/categories/%E6%80%9D%E8%80%83%E6%80%BB%E7%BB%93/","url":"/async/categories/思考总结.json","count":6}],"url":"/async/posts/2014/09/22/learn-fe.json","date":1411315200000,"path":{"year":2014,"month":9,"day":22,"name":"learn-fe"},"subtitle":"一些总结","title":"学前端的一点总结","permalink":"http://lingyu.life/2014/09/22/learn-fe/","content":"<p>最近<a href=\"https://github.com/qiu-deqing\" target=\"_blank\" rel=\"noopener\">Qiu</a>开了一个<a href=\"https://github.com/qiu-deqing/FE-learning/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">FE学习经验介绍</a>，并邀请我去写一点东西。感觉这种方式很有意思，趁着闲下来了，就随便扯了一些，希望能帮到想学前端的同学。我自己只是个前端初学者，希望能有更多的前端爱好者一同学习探讨~~</p>\n<a id=\"more\"></a>\n\n<p>####工具</p>\n<ul>\n<li>chrome dev tools：前端开发调试利器，着重注意几个功能：<ul>\n<li>console（废话）</li>\n<li>elements:元素样式调整，很常用</li>\n<li>sources：代码中添加断点，单步调试，以及单步调试过程中查看内存中的对象<ul>\n<li>watch expression：通过表达式查看当前内存中的值</li>\n<li>call stack：查看调用栈，开启async，可以看异步调用栈（这个非常有用，尤其是ajax调试的时候）</li>\n<li>scope variables：作用域链上的变量，非常有用</li>\n</ul>\n</li>\n<li>network：抓包查看每个请求，非常重要，前后端联调必备</li>\n<li>timeline：分析渲染、js执行等等各个阶段，性能优化利器</li>\n<li>emulation：模拟移动端环境，mobile页面开发必备</li>\n<li>一些插件:<ul>\n<li>liveload: 修改页面后自动刷新，不用按F5</li>\n<li>dimensions：直接在页面上测量的利器</li>\n<li>livestyle：css样式修改后自动起效果，不需要刷新，elements修改后也能同步到代码中</li>\n<li>image tool：测量，取色</li>\n<li>UC二维码：移动端调试扫码必备</li>\n<li>pagespeed，YSlow：页面性能分析和优化插件</li>\n<li>马克飞象：优秀的在线markdown编辑器，快速写周报，做记录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>sublime text2：编码方便，插件多，速度快，性能好<ul>\n<li>emmet：提升html编码速度必备</li>\n<li>sublimelinter + 各种语言的lint和hint：代码纠错</li>\n<li>一些snippets：自动补全，提升开发效率</li>\n</ul>\n</li>\n<li>Intellij IDEA和WebStorm：集成开发环境，集成了各种功能，开发比sublime要方便，但会比较吃性能</li>\n<li>Mark Men：测量、取色、标注利器，拿到视觉稿之后第一个打开的软件</li>\n<li>GFW Fucker：我用红杏，可以的话买个虚拟服务器当梯子</li>\n<li>iHosts：非常优秀的hosts管理软件，轻松修改hosts，开发调试必备</li>\n<li>Rythem：AlloyTeam出品的代理抓包软件，非常轻量，安装简单，移动端（真机）开发调试很好用</li>\n<li>Wunderlist：一个非常不错的Todo List，任务、需求多的时候管理起来很方便</li>\n</ul>\n<p>####技能<br>前端的技能其实除了JavaScript（包括NodeJS）、HTML、CSS以外，还有很多。其实前端的技能树很大，这里只能列一些我开发中见到的说一说<br>#####语言基础<br>JavaScript：</p>\n<ul>\n<li>作用域链、闭包、运行时上下文、this</li>\n<li>原型链、继承</li>\n<li>NodeJS基础和常用API</li>\n</ul>\n<p>CSS：</p>\n<ul>\n<li>选择器</li>\n<li>浏览器兼容性及常见的hack处理</li>\n<li>CSS布局的方式和原理（盒子模型、BFC、IFC等等）</li>\n<li>CSS 3，如animation、gradient、等等</li>\n</ul>\n<p>HTML：</p>\n<ul>\n<li>语义化标签</li>\n</ul>\n<p>#####进阶<br>JavaScript:</p>\n<ul>\n<li>异步控制（Promise、ES6 generator、Async）</li>\n<li>模块化的开发方式（AMD、CMD、KMD等等）</li>\n<li>JavaScript解释器的一些相关知识<ul>\n<li>异步IO实现</li>\n<li>垃圾回收</li>\n<li>事件队列</li>\n</ul>\n</li>\n<li>常用框架使用及其原理<ul>\n<li>jQuery：基于选择器的框架，但个人认为不能叫框架，应该算工具库，因为不具备模块加载机制，其中源码很适合阅读钻研</li>\n<li>AngularJS/Avalon等MVVM框架：着重理解MVVM模式本身的理念和双向绑定的实现，如何解耦</li>\n<li>underscore：优秀的工具库，方便的理解常用工具代码片段的实现</li>\n<li>polymer/React: 组件化开发，面向未来，理解组件化开发的原理</li>\n</ul>\n</li>\n</ul>\n<p>CSS和HTML：主要是CSS3的特性和HTML5的特性，以及浏览器处理的流程和绘制原理</p>\n<ul>\n<li>DOM树、CSSOM树、渲染树的构建流程及页面渲染的过程</li>\n<li>解析HTML、CSS、JavaScript时造成的阻塞</li>\n<li>HTML5相关<ul>\n<li>SVG及矢量图原理</li>\n<li>Canvas开发及动画原理（帧动画）</li>\n<li>Video和Audio</li>\n</ul>\n</li>\n<li>flex box布局方式</li>\n<li>icon fonts的使用</li>\n</ul>\n<p>常用NodeJs的package：</p>\n<ul>\n<li>koa</li>\n<li>express</li>\n<li>underscore</li>\n<li>async</li>\n<li>gulp</li>\n<li>grunt</li>\n<li>connect</li>\n<li>request</li>\n</ul>\n<p>一些理念：</p>\n<ul>\n<li>响应式Web</li>\n<li>优雅降级、渐进增强</li>\n<li>don`t make me think</li>\n<li>网页可用性、可访问性、其中的意义</li>\n<li>SEO搜索引擎优化，了解搜索引擎的原理</li>\n<li>SPA的好处和问题</li>\n</ul>\n<p>性能优化：</p>\n<ul>\n<li>减少请求数量（sprite、combo）</li>\n<li>善用缓存（application cache、http缓存、CDN、localstorage、sessionstorage，备忘录模式）</li>\n<li>减少选择器消耗（从右到左），减少DOM操作（DOM和JavaScript解释器的分离）</li>\n<li>CSS的回流与重绘</li>\n</ul>\n<p>#####项目</p>\n<ul>\n<li>版本管理：首推Git，用过Git都不会想用SVN了<ul>\n<li>Git：本地版本管理的机制</li>\n<li>SVN：远程中心的版本管理机制</li>\n</ul>\n</li>\n<li>自动化构建：主要就是less、模板、coffee等的预处理以及对代码压缩和合并<ul>\n<li>Gulp：基于流构建，速度快、模块质量好</li>\n<li>Grunt：独立任务构建，速度慢，配置蛋疼，灵活性高</li>\n</ul>\n</li>\n<li>预处理和模板引擎<ul>\n<li>less：语法简单，但功能有限</li>\n<li>jade、ejs、velocity等模板引擎，各有各的长处</li>\n<li>coffee：python工程师最爱，我没用过</li>\n</ul>\n</li>\n<li>环境搭建：主要是将线上代码映射到本地，并在本地启动一个demo服务器，至于模拟数据的mock，见仁见智了<ul>\n<li>本地代理：ihosts</li>\n</ul>\n</li>\n<li>自动化测试：在业务较为稳定的情况下，可以通过自动化测试来减少测试的事件，但需求较多的时候，维护测试用例的成本会很高，可能用自动化测试会起到反效果<ul>\n<li>jasmine</li>\n<li>mocha</li>\n</ul>\n</li>\n<li>生态系统<ul>\n<li>npm</li>\n<li>bower</li>\n<li>spm</li>\n</ul>\n</li>\n<li>搭建一个属于自己的博客<ul>\n<li>git pages</li>\n<li>hexo</li>\n<li>jekyll</li>\n</ul>\n</li>\n</ul>\n<p>#####未来</p>\n<ul>\n<li>Web Componets：面向未来的组件化开发方式<ul>\n<li>HTML模板</li>\n<li>Shadow DOM</li>\n<li>Custom Elements</li>\n<li>HTML Import</li>\n</ul>\n</li>\n<li>移动端Native开发：这也是需要了解的，以后前端工程师会经常地和webview打交道，也要了解native开发</li>\n</ul>\n<p>#####其他<br>有些东西不是考敲码就能弄好的，我参与实习的时候感受到了很多，这些是我遇到的也是我感觉自己做的不好的地方</p>\n<ul>\n<li><strong>对于业务的思考</strong>：我个人这方面非常欠缺，所以放在最前面，在敲码前要多思考业务</li>\n<li>交流和沟通能力：这个非常重要，前端同时需要与项目经理、产品、交互、后台打交道，沟通不善会导致很多无用功，延缓项目</li>\n<li>知识管理、时间管理：input和output的平衡，output是最好的input。如何做好分享，参与社区，做好交流，作好记录</li>\n<li>对新技术的渴望，以及敢于尝试</li>\n</ul>\n<p>####入门书<br>入门可以通过啃书，但书本上的东西很多都已经过时了，在啃书的同时，也要持续关注技术的新动态。这里推几本我觉着不错的书：</p>\n<ul>\n<li>《JavaScript高级编程》：可以作为入门书籍，但同时也是高级书籍，可以快速吸收基础，等到提升再回来重新看</li>\n<li>《JavaScript权威指南》：不太适合入门，但是必备，不理解的地方就去查阅一下，很有帮助</li>\n<li>《编写可维护的JavaScript》和：</li>\n<li>《Node.js开发指南》：不错的Nodejs入门书籍</li>\n<li>《深入浅出Node.js》：Nodejs进阶书籍，必备</li>\n<li>《JavaScript异步编程》：理解JS异步的编程理念</li>\n<li>《JavaScript模式》和《JavaScript设计模式》：JavaScript的代码模式和设计模式，将开发思维转变到JavaScript，非常好的书</li>\n<li>《JavaScript框架设计》：在用轮子同时，应当知道轮子是怎么转起来的，讲解很详细，从源码级别讲解框架的各个部分的实现，配合一个现有框架阅读，可以学到很多东西</li>\n<li>《Don`t make me think》：网页设计的理念，了解用户行为，非常不错</li>\n<li>《CSS禅意花园》：经久不衰的一部著作，同样传递了网页设计中的理念以及设计中需要注意的问题</li>\n<li>《高性能JavaScript》和《高性能HTML5》：强调性能的书，其中不只是性能优化，还有很多原理层面的东西值得学习</li>\n<li>《HTML5 Canvas核心技术》：我正在读的一本书，对于canvas的使用，动画的实现，以及动画框架的开发都非常有帮助</li>\n<li>《HTTP权威指南》：HTTP协议相关必备，前端开发调试的时候也会经常涉及到其中的知识</li>\n<li>《响应式Web设计》：技术本身不难，重要的是响应式网页的设计理念，以及移动先行的思想</li>\n<li>《JavaScript语言精粹》：老道的书，也是普及JavaScript的开发思维的一本好书，非常适合入门</li>\n</ul>\n<p>####一些不错的网站</p>\n<ul>\n<li><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a>：没啥好说的，多阅读别人的源码，多上传自己的源码，向世界各地的大牛学习</li>\n<li><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"noopener\">codepen</a>：感受前端之美的必选之地，里面有很多酷炫的效果和优秀的插件</li>\n<li><a href=\"http://www.echojs.com/\" target=\"_blank\" rel=\"noopener\">echojs</a>：快速了解js新资讯的网站</li>\n<li><a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">stackoverflow</a>和<a href=\"segmentfault.com\">segmentfault</a>：基本上各种问题都能在上面获得解答</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/\" target=\"_blank\" rel=\"noopener\">google web fundamentals</a>：每篇文章都适合仔细阅读</li>\n<li><a href=\"http://www.staticfile.org/\" target=\"_blank\" rel=\"noopener\">static files</a>：开放的CDN，很好用</li>\n<li><a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">iconfont</a>：阿里的矢量图标库，非常不错，支持CDN而且支持项目</li>\n<li><a href=\"http://www.html5rocks.com/\" target=\"_blank\" rel=\"noopener\">html5 rocks</a>: 一个不错的网站，很多浏览器的新特性以及前沿的技术，都能在这上面找到文章</li>\n<li><a href=\"http://css-tricks.com/\" target=\"_blank\" rel=\"noopener\">css tricks</a>：如何活用CSS，以及了解CSS新特性，这里可以满足你</li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#object.general\" target=\"_blank\" rel=\"noopener\">JavaScript 秘密花园</a> JavaScript初学必看，非常不错</li>\n<li><a href=\"http://www.w3cplus.com/\" target=\"_blank\" rel=\"noopener\">w3cplus</a>：一个前端学习的网站，里面的文章质量都挺不错的</li>\n<li><a href=\"http://nodeschool.io/\" target=\"_blank\" rel=\"noopener\">node school</a>：一个不错的node学习网站</li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/?demo\" target=\"_blank\" rel=\"noopener\">learn git branch</a>：一个git学习网站，交互很棒</li>\n<li><a href=\"http://www.html-js.com/\" target=\"_blank\" rel=\"noopener\">前端乱炖</a>：一个前端文章分享的社区，有很多优秀文章</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"noopener\">正则表达式</a>：一个正则表达式入门教程，非常值得一看</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰的博客</a>和<a href=\"http://www.zhangxinxu.com/wordpress/\" target=\"_blank\" rel=\"noopener\">张鑫旭的博客</a>：快速了解某些知识的捷径，但是如果需要深挖，还需要其他的资源</li>\n<li>各路大牛的博客：这个太多了，就不贴了，知乎上有很全的</li>\n<li>各种规范的官方网站，不懂得时候读规范</li>\n</ul>\n<p>####历程<br>以前是做Java SSH的，半路出家做的前端，所以水平比较弱，遇到问题也比较多。基本上入门靠看书和<a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"noopener\">W3C School</a>上的教程，以及一些前端博客，如<a href=\"http://www.cnblogs.com/TomXu/\" target=\"_blank\" rel=\"noopener\">汤姆大叔的博客</a>。以前也只是使用jQuery，原生js也没有太多的钻研，后来逐渐看了很多本动物书，比如老道的语言精粹等等。从这些书中学到了很多语言层面的知识。但这显然是不够的，所以我经常会去社区上看看大家在谈论什么，然后去看看相关的资料，感兴趣就会多找些资料看看，或者写一写demo。学CSS主要就是通过这种方式。后来开始更多的关注各路大牛的博客和一些比较深的书籍，以及关注一些新的知识和框架，并且不断地练手提交代码到github，这样也学到了很多知识。在实习的过程中，切身参与到实际项目开发之中，能学到很多在学校学不到的理念和思维，这点也有很大的帮助。不说了，我要去搬砖求offer了…</p>\n"}