{"tags":[{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":26},{"name":"语言特性","permalink":"http://lingyu.life/tags/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/","url":"/async/tags/语言特性.json","count":4}],"categories":[{"name":"页面开发","permalink":"http://lingyu.life/categories/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/","url":"/async/categories/页面开发.json","count":15}],"url":"/async/posts/2014/03/30/old/js-type-convert.json","date":1396108800000,"path":{"year":2014,"month":3,"day":30,"name":"old/js-type-convert"},"subtitle":"转啊转啊转啊转啊转啊转啊转啊转啊转啊转，开始想念Java了","title":"JavaScript隐式类型转换","permalink":"http://lingyu.life/2014/03/30/old/js-type-convert/","content":"<p>从大犀牛上汇总一下隐式类型转换，并配上一些实例帮助理解，希望以后面试的时候不会被坑</p>\n<a id=\"more\"></a>\n\n<h2 id=\"对象转原始值\"><a href=\"#对象转原始值\" class=\"headerlink\" title=\"对象转原始值\"></a>对象转原始值</h2><h3 id=\"对象转布尔\"><a href=\"#对象转布尔\" class=\"headerlink\" title=\"对象转布尔\"></a>对象转布尔</h3><p>对象转Boolean很简单，所有对象都是true</p>\n<p>举个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; !!<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象转字符串\"><a href=\"#对象转字符串\" class=\"headerlink\" title=\"对象转字符串\"></a>对象转字符串</h3><p>对象转字符串经过如下步骤：</p>\n<ul>\n<li>如果对象有toString()方法，则调用toString()。如果toString()返回一个原始值，那么将这个值转为字符串（如果它不是字符串的话），并返回</li>\n<li>如果对象没有toString()方法，或者调用toString()方法返回的不是一个原始值，那么调用valueOf()方法。 如果valueOf()方法返回的是原始值，那么将它转换为字符串，并返回</li>\n<li>如果无法从toString()或valueOf()获得一个原始值，那么将抛出一个类型错误异常</li>\n</ul>\n<p>来个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"callToString\"</span>&#125;</span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"callValueOf\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"callToString\"</span> : <span class=\"string\">\"callToString\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"callValueOf\"</span> : <span class=\"string\">\"callValueOf\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data[<span class=\"keyword\">new</span> Obj()]);<span class=\"comment\">//输出\"callToString\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> &#123;&#125;;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data[<span class=\"keyword\">new</span> Obj()]);<span class=\"comment\">//输出\"callValueOf\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象转数字\"><a href=\"#对象转数字\" class=\"headerlink\" title=\"对象转数字\"></a>对象转数字</h3><p>对象转数字经过如下步骤：</p>\n<ul>\n<li>如果对象有valueOf()方法，后者返回一个原始值，那么将这个原始值转换为数字并返回</li>\n<li>如果对象没有valueOf()方法，或返的不是一个原始值，尝试toString()方法。如果有toString()方法，且返回一个原始值，那么将其转换成数字并返回</li>\n<li>如果无法从valueOf()或toString()获得一个原始值，那么将抛出一个类型错误异常</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"20\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Obj() * <span class=\"number\">1</span>);<span class=\"comment\">//输出20</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"10\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Obj() * <span class=\"number\">1</span>);<span class=\"comment\">//输出10</span></span><br></pre></td></tr></table></figure>\n<p>由这个栗子可以看到，转数字时会优先尝试valueOf()方法，然后尝试toString()方法，虽然获得的原始类型都是字符串，但会将字符串转换为数字</p>\n<h2 id=\"运算符与隐式类型转换\"><a href=\"#运算符与隐式类型转换\" class=\"headerlink\" title=\"运算符与隐式类型转换\"></a>运算符与隐式类型转换</h2><p>###“+”运算符<br>“+”运算符的行为如下：</p>\n<ul>\n<li>如果其中一个操作数是对象，那么会将对象转换为原始值类型（Date通过toString方法，其他对象依次尝试valueOf和toString()）</li>\n<li>如果对象转换到原始值后，其中一个是字符串，那么另一个也被转成字符串，进行字符串连接</li>\n<li>否则两个操作数都将转换为数字（或NaN），然后想加</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"234\"</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + <span class=\"keyword\">new</span> Obj());<span class=\"comment\">//输出\"123234\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">234</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + <span class=\"keyword\">new</span> Obj());<span class=\"comment\">//输出\"357\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + <span class=\"keyword\">new</span> Obj());<span class=\"comment\">//输出\"124\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());<span class=\"comment\">//输出\"123Sun Mar 30 2014 12:53:02 GMT+0800 (中国标准时间)\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他算数运算符\"><a href=\"#其他算数运算符\" class=\"headerlink\" title=\"其他算数运算符\"></a>其他算数运算符</h3><p>乘法(*)，除法()，取模(%)，减法(-)，以及一元算数运算符（+，-，++，–）都是在需要的时候将操作数转化为数字，就是根据上面先尝试valueOf，后尝试toString的方式来转换。如果有一个操作数是NaN，那么运算结果也是NaN</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>位运算符需要它的操作数是整数，这些整数表示32位整型而不是64位浮点数，所以在进行位运算之前，首先将操作数转换为数字，然后转换为32位整型，之后进行操作。而NaN，Infinity和-Infinity都转换成0。</p>\n<h3 id=\"关系表达式\"><a href=\"#关系表达式\" class=\"headerlink\" title=\"关系表达式\"></a>关系表达式</h3><p>严格相等（===）不会进行类型转换，而使用相等（==）会进行隐式的类型转换。严格相等会比较类型和值，类型不一致的两个值肯定不相等，具体规则如下：- 两个值类型不同，他们不相等</p>\n<ul>\n<li>都是null或都是undefined，他们不相等</li>\n<li>都是布尔true或布尔false，他们相等</li>\n<li>有一个值是NaN，那么不相等，NaN也不等于自身</li>\n<li>都位数字时，且他们值相等，那么相等，0与-0相等</li>\n<li>两个值都为字符串，如果他们长度或内容不同，则不相等</li>\n<li>两个值都引用对象、数组或函数，如果它们引用同一个对象，他们相等，否则不相等</li>\n</ul>\n<p>举一些栗子来验证一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; (&#123;&#125;) === (&#123;&#125;)</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [] === []</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> a, b;</span><br><span class=\"line\">&gt; a = b = &#123;&#125;;</span><br><span class=\"line\">&gt; a === b</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">null</span> === <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"number\">0</span> === <span class=\"number\">-0</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> === <span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> === -<span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>相等运算符（==）会进行隐式类型转换，规则如下：</p>\n<ul>\n<li>如果两个操作数类型相等，则和上面严格相等的比较规则一样</li>\n<li>如果其中一个值是null，另一个是undefined，他们相等</li>\n<li>如果一个是数字，另一个是字符串，则会先将字符串转为数字再比较</li>\n<li>如果其中一个是布尔类型，也会将其转换为数字，然后在比较，true转换为1，false转换为0</li>\n<li>如果一个值为对象，另一个值为数字或字符串，那么像将其转换为原始值。JavaScript语言核心的内置类会优先尝试valueOf，然后尝试toString。但Date类只是用toString转换</li>\n<li>其他不同类型之间的比较均不相等</li>\n</ul>\n<p>举一些栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">null</span> == <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; (&#123;&#125;) == (&#123;&#125;)</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [] == []</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"string\">\"123\"</span> == <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">true</span> == <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&gt; Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"tostring\"</span>;&#125;</span><br><span class=\"line\">&gt; Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"valueof\"</span>;&#125;</span><br><span class=\"line\">&gt; <span class=\"keyword\">new</span> Obj() == <span class=\"string\">\"valueof\"</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> == <span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> == -<span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>小于、大于，小于等于、大于等于这些比较运算符的操作数可能是任意类型，但只有数字和字符串才能真正进行比较操作，所以会对其进行转换：</p>\n<ul>\n<li>如果操作数是对象，那么这个对象会转换为原始值，同样有限使用valueOf，然后使用toString</li>\n<li>对象转换为原始值后，如果都是字符串，按照字典序比较</li>\n<li>如果至少有一个操作数不是字符串，那么两个操作数都将转换为数字进行比较，0与-0相等，Infinity比任何数字都大（除了Infinity本身），-Infinity比任何数字都小，如果其中一个操作数是NaN，比较操作符返回false</li>\n</ul>\n<p>举几个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">NaN</span> &lt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">NaN</span> &gt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> &lt; <span class=\"literal\">Infinity</span></span><br><span class=\"line\">fasle</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> &gt; <span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"literal\">Infinity</span> &gt; -<span class=\"literal\">Infinity</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"string\">\"a\"</span> &lt; <span class=\"string\">\"b\"</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"string\">\"abcd\"</span> &lt; <span class=\"string\">\"abce\"</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h3><p>in运算符永远期望左操作数是字符串，右操作数是一个对象，所以左操作数会隐式类型转换：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"callToString\"</span>&#125;</span><br><span class=\"line\">Obj.prototype.valueOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"callValueOf\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"callToString\"</span> : <span class=\"string\">\"callToString\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Obj() <span class=\"keyword\">in</span> data);<span class=\"comment\">//输出true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> &#123;&#125;;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Obj() <span class=\"keyword\">in</span> data);<span class=\"comment\">//输出false</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.callValueOf = <span class=\"string\">\"callValueOf\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Obj() <span class=\"keyword\">in</span> data);<span class=\"comment\">//输出true</span></span><br></pre></td></tr></table></figure>\n<p>第一个console时，首先将<code>new Obj()</code>创建的对象转换为字符串，先尝试toString方法，获得callToString字符串，而它在data对象中存在，所以输出true</p>\n<p>第二个console时，首先将<code>new Obj()</code>创建的对象转换为字符串，先尝试toString方法，获得一个对象，不是原始值，于是尝试valueOf方法，获得callValueOf字符串，而它在data对象中不存在，所以输出false</p>\n<p>第三个console和第二个console过程一样，不过这一次data中存在callValueOf字符串，所以输出true</p>\n<h3 id=\"instanceof运算符\"><a href=\"#instanceof运算符\" class=\"headerlink\" title=\"instanceof运算符\"></a>instanceof运算符</h3><p>instanceof运算符总是希望左操作数是一个对象，右操作数是一个函数。instanceof一次检查左操作数的对象的原型链的VO，如果存在右操作数函数的prototype存在于左操作数对象的原型链上，那么返回true，否则返回false</p>\n<h3 id=\"逻辑表达式\"><a href=\"#逻辑表达式\" class=\"headerlink\" title=\"逻辑表达式\"></a>逻辑表达式</h3><p>逻辑操作符实际上并不总是作用于Boolean类型，它是根据左右操作数是真值还是假值来判定的</p>\n<p>假值包括：</p>\n<ul>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>-0</li>\n<li>NaN</li>\n<li>“”</li>\n</ul>\n<p>除了假值以外的所有值都是真值</p>\n<p>逻辑&amp;&amp;运算符中，如果左操作数是假值，那么不计算右操作数，直接返回左操作数（短路）。如果左操作符是真值，返回右操作数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a,b;</span><br><span class=\"line\">a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">b = <span class=\"string\">\"something\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a &amp;&amp; b);<span class=\"comment\">//输出null</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">\"something\"</span>;</span><br><span class=\"line\">b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a &amp;&amp; b);<span class=\"comment\">//输出null</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">\"something\"</span>;</span><br><span class=\"line\">b = <span class=\"string\">\"otherthing\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a &amp;&amp; b);<span class=\"comment\">//输出\"otherthing\"</span></span><br></pre></td></tr></table></figure>\n\n<p>逻辑||运算符也是一样会出现短路，不过短路的条件时左值为真值。所以当左操作数为真值时，不计算右操作数而直接返回左操作数，否则返回右操作数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a,b;</span><br><span class=\"line\">a = <span class=\"string\">\"something\"</span>;</span><br><span class=\"line\">b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a || b);<span class=\"comment\">//输出\"something\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a || b);<span class=\"comment\">//输出null</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">b = <span class=\"string\">\"something\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a || b);<span class=\"comment\">//输出\"something\"</span></span><br></pre></td></tr></table></figure>\n\n<p>逻辑非（!）是一元运算符，它会先将操作数转换为布尔值（真值转true，假值转false）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; !<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; !<span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; !<span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>一般我们需要将任意类型根据其真假值转换为Boolean时，可以使用如下方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = !!param;</span><br></pre></td></tr></table></figure>\n\n"}