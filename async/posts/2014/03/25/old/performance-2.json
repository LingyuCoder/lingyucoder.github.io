{"tags":[{"name":"CSS","permalink":"http://lingyu.life/tags/CSS/","url":"/async/tags/CSS.json","count":30},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32},{"name":"HTML","permalink":"http://lingyu.life/tags/HTML/","url":"/async/tags/HTML.json","count":24}],"categories":[{"name":"性能优化","permalink":"http://lingyu.life/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/","url":"/async/categories/性能优化.json","count":5}],"url":"/async/posts/2014/03/25/old/performance-2.json","date":1395676800000,"path":{"year":2014,"month":3,"day":25,"name":"old/performance-2"},"subtitle":"前端性能优化系列","title":"前端性能优化（JavaScript篇）","permalink":"http://lingyu.life/2014/03/25/old/performance-2/","content":"<p>最近准备笔试面试题的时候看到很多关于前端性能优化的问题，所以提前调研做做准备，加上我之前写的两篇博客，组成一个新系列</p>\n<a id=\"more\"></a>\n\n<h2 id=\"优化循环\"><a href=\"#优化循环\" class=\"headerlink\" title=\"优化循环\"></a>优化循环</h2><p>如果现在有个一个<code>data[]</code>数组，需要对其进行遍历，应当怎么做？最简单的代码是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里每次循环开始前都需要判断i是否小于<code>data.length</code>，JavaScript并不会对<code>data.length</code>进行缓存，而是每次比较都会进行一次取值。如我们所知，JavaScript数组其实是一个对象，里面有个length属性，所以这里实际上就是取得对象的属性。如果直接使用变量的话就会少一次索引对象，如果数组的元素很多，效率提升还是很可观的。所以我们通常将代码改成如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, m = data.length; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里多加了一个变量m用于存放<code>data.length</code>属性，这样就可以在每次循环时，减少一次索引对象，但是代价是增加了一个变量的空间，如果遍历不要求顺序，我们甚至可以不用m这个变量存储长度，在不要求顺序的时候可以使用如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = data.length; i--; ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然我们可以使用while来替代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = data.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do someting</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可只使用一个变量了</p>\n<h2 id=\"运算结果缓存\"><a href=\"#运算结果缓存\" class=\"headerlink\" title=\"运算结果缓存\"></a>运算结果缓存</h2><p>由于JavaScript中的函数也是对象（JavaScript中一切都是对象），所以我们可以给函数添加任意的属性。这也就为我们提供符合备忘录模式的缓存运算结果的功能，比如我们有一个需要大量运算才能得出结果的函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculator</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//大量的耗时的计算 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果其中不涉及随机，参数一样时所返回的结果一致，我们就可以将运算结果进行缓存从而避免重复的计算：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculator</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cacheKey = <span class=\"built_in\">JSON</span>.stringify(params);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = calculator.cache = calculator.cache || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> cache[cacheKey] !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache[cacheKey];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//大量耗时的计算</span></span><br><span class=\"line\">    cache[cacheKey] = result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里将参数转化为JSON字符串作为key，如果这个参数已经被计算过，那么就直接返回，否则进行计算。计算完毕后再添加入cache中，如果需要，可以直接查看cache的内容：<code>calculator.cache</code></p>\n<p>这是一种典型的空间换时间的方式，由于浏览器的页面存活时间一般不会很长，占用的内存会很快被释放（当然也有例外，比如一些WEB应用），所以可以通过这种空间换时间的方式来减少响应时间，提升用户体验。这种方式并不适用于如下场合：</p>\n<ol>\n<li>相同参数可能产生不同结果的情况（包含随机数之类的）</li>\n<li>运算结果占用特别多内存的情况</li>\n</ol>\n<h2 id=\"不要在循环中创建函数\"><a href=\"#不要在循环中创建函数\" class=\"headerlink\" title=\"不要在循环中创建函数\"></a>不要在循环中创建函数</h2><p>这个很好理解，每创建一个函数对象是需要大批量空间的。所以在一个循环中创建函数是很不明智的，尽量将函数移动到循环之前创建，比如如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, m = data.length; i &lt; m; i++) &#123;</span><br><span class=\"line\">    handlerData(data[i], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就可以修改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, m = data.length; i &lt; m; i++) &#123;</span><br><span class=\"line\">    handlerData(data[i], handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"让垃圾回收器回收那些不再需要的对象\"><a href=\"#让垃圾回收器回收那些不再需要的对象\" class=\"headerlink\" title=\"让垃圾回收器回收那些不再需要的对象\"></a>让垃圾回收器回收那些不再需要的对象</h2><p>之前我曾在 <a href=\"http://lingyu.wang#/art/blog/2014/03/19/v8-gc/\" target=\"_blank\" rel=\"noopener\">浅谈V8引擎中的垃圾回收机制</a> 中讲到了V8引擎如何进行垃圾回收。可以从中看到，如果长时间保存对象，老生代中占用的空间将增大，每次在老生代中的垃圾回收过程将会相当漫长。而垃圾回收器判断一个对象为活对象还是死对象，是按照是否有活对象或根对象含有对它的引用来判定的。如果有根对象或者活对象引用了这个对象，它将被判定为活对象。所以我们需要通过手动消除这些引用来让垃圾回收器对回收这些对象。</p>\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><p>一种方式是通过<code>delete</code>方式来消除对象中的键值对，从而消除引用。但这种方式并不提倡，它会改变对象的结构，可能导致引擎中对对象的存储方式变更，降级为字典方式进行存储（详细请见<a href=\"http://newhtml.net/v8-object-representation/\" target=\"_blank\" rel=\"noopener\">V8 之旅：对象表示</a>），不利于JavaScript引擎的优化，所以尽量减少使用</p>\n<h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><p>另一种方式是通过将值设为null来消除引用。通过将变量或对象的属性设为null，可以消除引用，使原本引用的对象成为一个“孤岛”，然后在垃圾回收的时候对其进行回收。这种方式不会改变对象的结构，比使用<code>delete</code>要好</p>\n<h3 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h3><p>另外需要注意的是，垃圾回收器认为根对象永远是活对象，永远不会对其进行垃圾回收。而全局对象就是根对象，所以全局作用域中的变量将会一直存在</p>\n<h3 id=\"事件处理器的回收\"><a href=\"#事件处理器的回收\" class=\"headerlink\" title=\"事件处理器的回收\"></a>事件处理器的回收</h3><p>在平常写代码的时候，我们经常会给一个DOM节点绑定事件处理器，但有时候我们不需要这些事件处理器后，就不管它们了，它们默默的在内存中保存着。所以在某些DOM节点绑定的事件处理器不需要后，我们应当销毁它们。同时绑定的时候也尽量使用事件代理的方式进行绑定，以免造成多次重复的绑定导致内存空间的浪费，事件代理可见<a href=\"http://skyinlayer.com/blog/2014/03/25/performance-1/\" target=\"_blank\" rel=\"noopener\">前端性能优化（DOM操作篇）</a></p>\n<h3 id=\"闭包导致的内存泄露\"><a href=\"#闭包导致的内存泄露\" class=\"headerlink\" title=\"闭包导致的内存泄露\"></a>闭包导致的内存泄露</h3><p>JavaScript的闭包可以说即是“天使”又是“魔鬼”，它“天使”的一面是我们可以通过它突破作用域的限制，而其魔鬼的一面就是和容易导致内存泄露，比如如下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> small = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> big = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(big.indexOf(<span class=\"string\">\"someValue\"</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这里，创建了一个闭包。使得返回的函数存储在result中，而result函数能够访问其作用域内的small对象和big对象。由于big对象和small对象都可能被访问，所以垃圾回收器不会去碰这两个对象，它们不会被回收。我们将上述代码改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> small = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> big = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasSomeValue;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">    hasSomeValue = big.indexOf(<span class=\"string\">\"someValue\"</span>) !== <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasSomeValue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> small;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这样，函数内部只能够访问到hasSomeValue变量和small变量了，big没有办法通过任何形式被访问到，垃圾回收器将会对其进行回收，节省了大量的内存。</p>\n<h2 id=\"慎用eval和with\"><a href=\"#慎用eval和with\" class=\"headerlink\" title=\"慎用eval和with\"></a>慎用eval和with</h2><p>Douglas Crockford将eval比作魔鬼，确实在很多方面我们可以找到更好地替代方式。使用它时需要在运行时调用解释引擎对<code>eval()</code>函数内部的字符串进行解释运行，这需要消耗大量的时间。像<code>Function</code>、<code>setInterval</code>、<code>setTimeout</code>也是类似的</p>\n<p>Douglas Crockford也不建议使用with，with会降低性能，通过with包裹的代码块，作用域链将会额外增加一层，降低索引效率</p>\n<h2 id=\"对象的优化\"><a href=\"#对象的优化\" class=\"headerlink\" title=\"对象的优化\"></a>对象的优化</h2><h3 id=\"缓存需要被使用的对象\"><a href=\"#缓存需要被使用的对象\" class=\"headerlink\" title=\"缓存需要被使用的对象\"></a>缓存需要被使用的对象</h3><p>JavaScript获取数据的性能有如下顺序（从快到慢）：变量获取 &gt; 数组下标获取（对象的整数索引获取） &gt; 对象属性获取（对象非整数索引获取）。我们可以通过最快的方式代替最慢的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxLength = someArray.length;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>需要考虑，作用域链和原型链中的对象索引。如果作用域链和原型链较长，也需要对所需要的变量继续缓存，否则沿着作用域链和原型链向上查找时也会额外消耗时间</p>\n<h3 id=\"缓存正则表达式对象\"><a href=\"#缓存正则表达式对象\" class=\"headerlink\" title=\"缓存正则表达式对象\"></a>缓存正则表达式对象</h3><p>需要注意，正则表达式对象的创建非常消耗时间，尽量不要在循环中创建正则表达式，尽可能多的对正则表达式对象进行复用</p>\n<h3 id=\"考虑对象和数组\"><a href=\"#考虑对象和数组\" class=\"headerlink\" title=\"考虑对象和数组\"></a>考虑对象和数组</h3><p>在JavaScript中我们可以使用两种存放数据：对象和数组。由于JavaScript数组可以存放任意类型数据这样的灵活性，导致我们经常需要考虑何时使用数组，何时使用对象。我们应当在如下情况下做出考虑：</p>\n<ol>\n<li>存储一串相同类型的对象，应当使用数组</li>\n<li>存储一堆键值对，值的类型多样，应当使用对象</li>\n<li>所有值都是通过整数索引，应当使用数组</li>\n</ol>\n<h3 id=\"数组使用时的优化\"><a href=\"#数组使用时的优化\" class=\"headerlink\" title=\"数组使用时的优化\"></a>数组使用时的优化</h3><ol>\n<li>往数组中插入混合类型很容易降低数组使用的效率，尽量保持数组中元素的类型一致</li>\n<li>如果使用稀疏数组，它的元素访问将远慢于满数组的元素访问。因为V8为了节省空间，会将稀疏数组通过字典方式保存在内存中，节约了空间，但增加了访问时间</li>\n</ol>\n<h3 id=\"对象的拷贝\"><a href=\"#对象的拷贝\" class=\"headerlink\" title=\"对象的拷贝\"></a>对象的拷贝</h3><p>需要注意的是，JavaScript遍历对象和数组时，使用<code>for...in</code>的效率相当低，所以在拷贝对象时，如果已知需要被拷贝的对象的属性，通过直接赋值的方式比使用<code>for...in</code>方式要来得快，我们可以通过定一个拷贝构造函数来实现，比如如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        result[item] = source[item];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> backup = copy(source);</span><br></pre></td></tr></table></figure>\n<p>可修改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.property1 = source.property1;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.property2 = source.property2;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.property3 = source.property3;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> backup = <span class=\"keyword\">new</span> copy(source);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字面量代替构造函数\"><a href=\"#字面量代替构造函数\" class=\"headerlink\" title=\"字面量代替构造函数\"></a>字面量代替构造函数</h3><p>JavaScript可以通过字面量来构造对象，比如通过<code>[]</code>构造一个数组，<code>{}</code>构造一个对象，<code>/regexp/</code>构造一个正则表达式，我们应当尽力使用字面量来构造对象，因为字面量是引擎直接解释执行的，而如果使用构造函数的话，需要调用一个内部构造器，所以字面量略微要快一点点。</p>\n<h2 id=\"缓存AJAX\"><a href=\"#缓存AJAX\" class=\"headerlink\" title=\"缓存AJAX\"></a>缓存AJAX</h2><p>曾经听过一个访问时间比较（当然不精确）：</p>\n<ul>\n<li>cpu cache ≈ 100 * 寄存器</li>\n<li>内存 ≈ 100 * cpu cache</li>\n<li>外存 ≈ 100 * 内存</li>\n<li>网络 ≈ 100 * 外存</li>\n</ul>\n<p>可看到访问网络资源是相当慢的，而AJAX就是JavaScript访问网络资源的方式，所以对一些AJAX结果进行缓存，可以大大减少响应时间。那么如何缓存AJAX结果呢</p>\n<h3 id=\"函数缓存\"><a href=\"#函数缓存\" class=\"headerlink\" title=\"函数缓存\"></a>函数缓存</h3><p>我们可以使用前面缓存复杂计算函数结果的方式进行缓存，通过在函数对象上构造cache对象，原理一样，这里略过。这种方式是精确到函数，而不精确到请求</p>\n<h3 id=\"本地缓存\"><a href=\"#本地缓存\" class=\"headerlink\" title=\"本地缓存\"></a>本地缓存</h3><p>HTML5提供了本地缓存sessionStorage和localStorage，区别就是前者在浏览器关闭后会自动释放，而后者则是永久的，不会被释放。它提供的缓存大小以MB为单位，比cookie（4KB）要大得多，所以我们可以根据AJAX数据的存活时间来判断是存放在sessionStorage还是localStorage当中，在这里以存储到sessionStorage中为例(localStorage只需把第一行的<code>window.sessionStorage</code>修改为<code>window.localStorage</code>)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, url, type, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> storage = <span class=\"built_in\">window</span>.sessionStorage;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">        url : url,</span><br><span class=\"line\">        type : type,</span><br><span class=\"line\">        data : data</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = storage.getItem(key);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        callback.call(<span class=\"literal\">null</span>, result);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                    storage.setItem(key, xhr.responseText);</span><br><span class=\"line\">                    callback.call(<span class=\"literal\">null</span>, xhr.responseText);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.open(type, url, <span class=\"keyword\">async</span>);</span><br><span class=\"line\">        xhr.send(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用布尔表达式的短路\"><a href=\"#使用布尔表达式的短路\" class=\"headerlink\" title=\"使用布尔表达式的短路\"></a>使用布尔表达式的短路</h2><p>在很多语言中，如果bool表达式的值已经能通过前面的条件确定，那么后面的判断条件将不再会执行，比如如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calCondition</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">    <span class=\"comment\">//do lots of work</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(otherCondition &amp;&amp; calCondition(someParams)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里首先会计算<code>otherCondition</code>的值，如果它为false，那么整个正则表达式就为false了，后续的需要消耗大量时间的<code>calCondition()</code>函数就不会被调用和计算了，节省了时间</p>\n<h2 id=\"使用原生方法\"><a href=\"#使用原生方法\" class=\"headerlink\" title=\"使用原生方法\"></a>使用原生方法</h2><p>在JavaScript中，大多数原生方法是使用C++编写的，比js写的方法要快得多，所以尽量使用诸如<code>Math</code>之类的原生对象和方法</p>\n<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>在IE和FF下，使用直接<code>+=</code>的方式或是<code>+</code>的方式进行字符串拼接，将会很慢。我们可以通过Array的<code>join()</code>方法进行字符串拼接。不过并不是所有浏览器都是这样，现在很多浏览器使用<code>+=</code>比join()方法还要快</p>\n<h2 id=\"使用web-worker\"><a href=\"#使用web-worker\" class=\"headerlink\" title=\"使用web worker\"></a>使用web worker</h2><p>web worker是HTML5提出的一项新技术，通过多线程的方式为JavaScript提供并行计算的能力，通过message的方式进行相互之间的信息传递，我还没有仔细研究过</p>\n<h2 id=\"JavaScript文件的优化\"><a href=\"#JavaScript文件的优化\" class=\"headerlink\" title=\"JavaScript文件的优化\"></a>JavaScript文件的优化</h2><h3 id=\"使用CDN\"><a href=\"#使用CDN\" class=\"headerlink\" title=\"使用CDN\"></a>使用CDN</h3><p>在编写JavaScript代码中，我们经常会使用库（jQuery等等），这些JS库通常不会对其进行更改，我们可以将这些库文件放在CDN（内容分发网络上），这样能大大减少响应时间</p>\n<h3 id=\"压缩与合并JavaScript文件\"><a href=\"#压缩与合并JavaScript文件\" class=\"headerlink\" title=\"压缩与合并JavaScript文件\"></a>压缩与合并JavaScript文件</h3><p>在网络中传输JS文件，文件越长，需要的时间越多。所以在上线前，通常都会对JS文件进行压缩，去掉其中的注释、回车、不必要的空格等多余内容，如果通过uglify的算法，还可以缩减变量名和函数名，从而将JS代码压缩，节约传输时的带宽。另外经常也会将JavaScript代码合并，使所有代码在一个文件之中，这样就能够减少HTTP的请求次数。合并的原理和sprite技术相同</p>\n<h3 id=\"使用Application-Cache缓存\"><a href=\"#使用Application-Cache缓存\" class=\"headerlink\" title=\"使用Application Cache缓存\"></a>使用Application Cache缓存</h3><p>这个在之前的文章<a href=\"http://skyinlayer.com/blog/2014/02/20/application-cache/\" target=\"_blank\" rel=\"noopener\">前端性能优化（Application Cache篇）</a>中已有描述，就不赘述了</p>\n"}