{"tags":[{"name":"WebSocket","permalink":"http://lingyu.life/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8},{"name":"NodeJs","permalink":"http://lingyu.life/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.life/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.life/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"即时通信","permalink":"http://lingyu.life/categories/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/03/17/SkyRTC-client-doc.json","date":1394985600000,"path":{"year":2014,"month":3,"day":17,"name":"SkyRTC-client-doc"},"subtitle":"使用SkyRTC搭建视频、音频聊天室","title":"开源WebRTC库——SkyRTC-client文档(客户端部分)","permalink":"http://lingyu.life/2014/03/17/SkyRTC-client-doc/","content":"<p>忙了几天终于把SkyRTC库上传到NPM上了，并写了一份详细的使用文档，标明了基本的使用方法和类，修正了几个小bug，更多的bug还需要更多的测试，把文档发一下，具体项目见<a href=\"https://github.com/LingyuCoder/SkyRTC-client\" target=\"_blank\" rel=\"noopener\">我在Github上的SkyRTC-client项目</a></p>\n<a id=\"more\"></a>\n\n<p>##简介<br>一个Node.js编写的WebRTC浏览器端库，为客户端库，需要配合服务器端库<a href=\"https://github.com/LingyuCoder/SkyRTC\" target=\"_blank\" rel=\"noopener\">SkyRTC</a>共同使用，用于搭建基于WebRTC和WebSocket技术的在线音频、视频聊天室</p>\n<p>##SkyRTC客户端库<br><a href=\"https://github.com/LingyuCoder/SkyRTC\" target=\"_blank\" rel=\"noopener\">SkyRTC</a></p>\n<p>可使用npm进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install skyrtc</span><br></pre></td></tr></table></figure>\n\n<p>##SkyRTC实例<br><a href=\"https://github.com/LingyuCoder/SkyRTC-demo\" target=\"_blank\" rel=\"noopener\">SkyRTC-demo</a>是一个基于SkyRTC搭建的多房间的在线音频、视频、文字聊天室，并能够共享文件</p>\n<p>##SkyRTC-client的使用<br>通过在HTML中引入JavaScript文件的方式引入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/SkyRTC-client.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可通过如下方式监听SkyRTC-client的事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SkyRTC.on(<span class=\"string\">'someEvent'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>连接后台WebSocket服务器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SkyRTC.connect(<span class=\"string\">\"ws:\"</span> + <span class=\"built_in\">window</span>.location.href.substring(<span class=\"built_in\">window</span>.location.protocol.length).split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>], <span class=\"built_in\">window</span>.location.hash.slice(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n<p>##方法</p>\n<ul>\n<li>connect</li>\n<li>on</li>\n<li>sendFile</li>\n<li>shareFile</li>\n<li>sendMessage</li>\n<li>broadcast</li>\n<li>sendFileAccept</li>\n<li>sendFileRefuse</li>\n<li>createStream</li>\n<li>attachStream</li>\n</ul>\n<p>###connect<br>连接WebSocket后台服务器，建立信令交互的信道，并加入到一个房间之中</p>\n<p>参数：</p>\n<ul>\n<li>server——服务器地址</li>\n<li>room——房间名称</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###on<br>向SkyRTC-client相关事件绑定回调函数</p>\n<p>参数：</p>\n<ul>\n<li>eventName——事件名称</li>\n<li>callback——事件触发时的回调函数</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###sendFile<br>向所在房间中的某个特定用户请求发送文件</p>\n<p>参数：</p>\n<ul>\n<li>dom——包含需要被发送的文件的input[type=’file’]的id或者dom对象</li>\n<li>socketId——接收文件的用户的id</li>\n</ul>\n<p>###shareFile<br>向所在房间中的所有其他用户请求发送文件</p>\n<p>参数：</p>\n<ul>\n<li>dom——包含需要被发送的文件的input[type=’file’]的id或者dom对象</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###sendMessage<br>向所在房间内的某个特定用户发送消息</p>\n<p>参数：</p>\n<ul>\n<li>message——需要被发送的消息内容</li>\n<li>socketId——接收消息用户的id</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###broadcast<br>向所在房间中的所有其他用户发送文字消息</p>\n<p>参数：</p>\n<ul>\n<li>msg——需要被发送的消息字符串</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###sendFileAccept<br>接收到文件发送请求后，同意接收文件</p>\n<p>参数：</p>\n<ul>\n<li>sendId——发送文件的id</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###sendFileRefuse<br>接收到文件发送请求后，拒绝接收文件</p>\n<p>参数：</p>\n<ul>\n<li>sendId——发送文件的id</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###createStream<br>创建本地视频流</p>\n<p>参数：</p>\n<ul>\n<li>constraints——创建的视频流的约束对象</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>###attachStream<br>接收到远程视频流后，将视频流绑定到video标签上</p>\n<p>参数：</p>\n<ul>\n<li>stream——远程视频流对象</li>\n<li>domId——需要被绑定的video标签的id</li>\n</ul>\n<p>返回值：<br>无</p>\n<p>##原生事件<br>###连接建立</p>\n<ul>\n<li>connected</li>\n<li>socket_opened</li>\n<li>socket_error</li>\n<li>socket_closed</li>\n<li>socket_receive_message</li>\n</ul>\n<p>###信令交换</p>\n<ul>\n<li>get_peers</li>\n<li>get_ice_candidate</li>\n<li>get_offer</li>\n<li>get_answer</li>\n<li>new_peer</li>\n<li>remove_peer</li>\n</ul>\n<p>###建立流</p>\n<ul>\n<li>stream_created</li>\n<li>stream_created_error</li>\n</ul>\n<p>###PeerConnection相关事件</p>\n<ul>\n<li>pc_get_ice_candidate</li>\n<li>pc_opened</li>\n<li>pc_add_stream</li>\n<li>pc_add_data_channel</li>\n</ul>\n<p>###DataChannel相关事件</p>\n<ul>\n<li>data_channel_create_error</li>\n<li>data_channel_opened</li>\n<li>data_channel_closed</li>\n<li>data_channel_message</li>\n<li>data_channel_error</li>\n</ul>\n<p>###文件发送相关</p>\n<ul>\n<li>send_file_error</li>\n<li>send_file</li>\n<li>send_file_refused</li>\n<li>send_file_accepted</li>\n<li>send_file_chunk</li>\n<li>sended_file</li>\n<li>receive_file_chunk</li>\n<li>receive_file</li>\n<li>receive_file_ask</li>\n<li>receive_file_error</li>\n</ul>\n<p>##连接建立事件详解<br>###connected<br>在于后台服务器成功创立WebSocket连接后触发</p>\n<p>参数：</p>\n<ul>\n<li>socket——与后台连接的WebSocket实例</li>\n</ul>\n<p>###socket_opened<br>WebSocket连接开启后触发</p>\n<p>参数：</p>\n<ul>\n<li>socket——与后台连接的WebSocket实例</li>\n</ul>\n<p>###socket_error<br>WebSocket连接发生错误后触发</p>\n<p>参数：</p>\n<ul>\n<li>error——错误对象</li>\n<li>socket——与后台连接的WebSocket实例</li>\n</ul>\n<p>###socket_closed<br>WebSocket连接关闭后触发</p>\n<p>参数：</p>\n<ul>\n<li>socket——与后台连接的WebSocket实例</li>\n</ul>\n<p>###socket_receive_message<br>WebSocket连接接收到非自定义事件格式的信息时触发</p>\n<p>参数：</p>\n<ul>\n<li>socket——与后台连接的WebSocket实例</li>\n<li>jsonMsg——JSON格式的message</li>\n</ul>\n<p>##信令交换事件详解<br>###get_peers<br>在获取当前房间所有用户的id后调用</p>\n<p>参数：</p>\n<ul>\n<li>socketIds——房间内其他用户的id字符串列表</li>\n</ul>\n<p>###get_ice_candidate<br>在获得了ICE Candidate信令后调用</p>\n<p>参数：</p>\n<ul>\n<li>candidate——ICE Candidate信令数据</li>\n</ul>\n<p>###get_offer<br>在获得offer信令后调用</p>\n<p>参数：</p>\n<ul>\n<li>offer——offer信令数据<br>###get_answer<br>在获得answer信令后调用</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li>answer——answer信令数据</li>\n</ul>\n<p>###new_peer<br>在有新用户加入后调用</p>\n<p>参数：</p>\n<ul>\n<li>socketId：新用户的id</li>\n</ul>\n<p>###remove_peer<br>有用户断开连接后调用</p>\n<p>参数：</p>\n<ul>\n<li>socketId：断开连接的用户的socket id</li>\n</ul>\n<p>##建立流<br>###stream_created<br>成功建立本地视频流时触发</p>\n<p>参数：</p>\n<ul>\n<li>stream——本地视频流对象</li>\n</ul>\n<p>###stream_created_error<br>建立本地视频流失败时触发</p>\n<p>参数：</p>\n<ul>\n<li>error——错误对象</li>\n</ul>\n<p>##PeerConnection相关事件<br>###pc_opened<br>PeerConnection成功开启后触发</p>\n<p>参数：</p>\n<ul>\n<li>socketId——PeerConnection所连接用户的id</li>\n<li>pc——成功开启的PeerConnection实例</li>\n</ul>\n<p>###pc_get_ice_candidate<br>获得从ICE Candidate消息时触发</p>\n<p>参数：</p>\n<ul>\n<li>candidate——ICE Candidate信令内容</li>\n<li>socketId——PeerConnection所连接用户的id</li>\n<li>pc——获得信令PeerConnection实例</li>\n</ul>\n<p>###pc_add_stream<br>通过PeerConnection上接收到视频流后触发</p>\n<p>参数：</p>\n<ul>\n<li>stream——添加的流对象</li>\n<li>socketId——PeerConnection所连接用户的id</li>\n<li>pc——增加流的PeerConnection实例</li>\n</ul>\n<p>###pc_add_data_channel<br>通过PeerConnection上接收到data channel后触发</p>\n<p>参数：</p>\n<ul>\n<li>channel——添加的data channel</li>\n<li>socketId——PeerConnection所连接用户的id</li>\n<li>pc——增加data channel的PeerConnection实例</li>\n</ul>\n<p>##DataChannel相关事件<br>###data_channel_create_error<br>data channel创建失败时触发</p>\n<p>参数：</p>\n<ul>\n<li>socketId——data channel所连接用户的id</li>\n<li>error——错误对象</li>\n</ul>\n<p>###data_channel_opened<br>data channel成功开启后触发</p>\n<p>参数：</p>\n<ul>\n<li>channel——开启的data channel实例</li>\n<li>socketId——data channel所连接用户的id</li>\n</ul>\n<p>###data_channel_closed<br>data channel关闭后触发</p>\n<p>参数：</p>\n<ul>\n<li>channel——被关闭的data channel实例</li>\n<li>socketId——data channel所连接用户的id</li>\n</ul>\n<p>###data_channel_message<br>data channel上接收到数据且非文件信令类型时触发</p>\n<p>参数：</p>\n<ul>\n<li>channel——接收到数据的data channel实例</li>\n<li>socketId——data channel所属用户的id</li>\n<li>message——json格式的接收到的具体数据信息</li>\n</ul>\n<p>###data_channel_error<br>data channel发生错误时触发</p>\n<p>参数：</p>\n<ul>\n<li>channel——发生错误的data channel实例</li>\n<li>socketId——data channel所连接用户的id</li>\n<li>error——错误对象</li>\n</ul>\n<p>##文件发送相关<br>###send_file<br>读取需要发送的文件完毕，并请求对方接收时触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId：发送的文件id</li>\n<li>socketId：接收者的id</li>\n<li>file：被发送的文件对象</li>\n</ul>\n<p>###send_file_error<br>发送方发送文件失败时触发</p>\n<p>参数：</p>\n<ul>\n<li>error——错误对象</li>\n<li>socketId——接收者的id</li>\n<li>sendId——发送失败的文件的id，为空则表示获取文件失败</li>\n<li>file——发送失败的文件对象，为空则表示获取文件失败</li>\n</ul>\n<p>###send_file_refused<br>对方拒绝接收文件时触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——被拒绝接收的文件id</li>\n<li>socketId——接收者的id</li>\n<li>file——被拒绝接收的文件</li>\n</ul>\n<p>###send_file_accepted<br>对方同意接收文件时触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——被同意接收的文件id</li>\n<li>socketId——接收者的id</li>\n<li>file——被同意接收的文件</li>\n</ul>\n<p>###send_file_chunk<br>文件碎片发送后触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——文件碎片所属文件的id</li>\n<li>socketId——接收者的id</li>\n<li>percent——已发送的百分比</li>\n<li>file——被发送的文件对象</li>\n</ul>\n<p>###sended_file<br>文件发送完成后触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——被发送的文件Id</li>\n<li>socketId——接收者的id</li>\n<li>file——被发送的文件对象<br>###receive_file_chunk<br>接收到文件碎片时触发</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li>sendId——接收的文件的Id</li>\n<li>socketId——发送者的id</li>\n<li>fileName——文件的名称</li>\n<li>percent——文件接收到的百分比</li>\n</ul>\n<p>###receive_file<br>接收完整个文件后触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——接收的文件的Id</li>\n<li>socketId——发送者的id</li>\n<li>name——接收到的文件的名称</li>\n</ul>\n<p>###receive_file_ask<br>接收到文件发送请求后触发</p>\n<p>参数：</p>\n<ul>\n<li>sendId——被请求接收的文件的id</li>\n<li>socketId——发送者的id</li>\n<li>fileName——被请求接收的文件的名称</li>\n<li>fileSize——被请求接收的文件的大小</li>\n</ul>\n<p>###receive_file_error<br>接收文件错误时触发</p>\n<p>参数：</p>\n<ul>\n<li>error——错误对象</li>\n<li>sendId——接收文件的id</li>\n<li>socketId——发送者的id</li>\n</ul>\n"}