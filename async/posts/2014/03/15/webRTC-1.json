{"tags":[{"name":"WebSocket","permalink":"http://lingyu.life/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8},{"name":"NodeJs","permalink":"http://lingyu.life/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.life/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.life/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"即时通信","permalink":"http://lingyu.life/categories/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/03/15/webRTC-1.json","date":1394812800000,"path":{"year":2014,"month":3,"day":15,"name":"webRTC-1"},"subtitle":"使用WebRTC + WebSocket搭建视频聊天室","title":"使用WebRTC搭建前端视频聊天室——入门篇","permalink":"http://lingyu.life/2014/03/15/webRTC-1/","content":"<p>由于毕设研究定的题目是即时通信相关，于是乎决定研究一下WebRTC来实现浏览器内的音频聊天，同时探究一下WebRTC能做些什么</p>\n<a id=\"more\"></a>\n\n<p>##什么是WebRTC？<br>众所周知，浏览器本身不支持相互之间直接建立信道进行通信，都是通过服务器进行中转。比如现在有两个客户端，甲和乙，他们俩想要通信，首先需要甲和服务器、乙和服务器之间建立信道。甲给乙发送消息时，甲先将消息发送到服务器上，服务器对甲的消息进行中转，发送到乙处，反过来也是一样。这样甲与乙之间的一次消息要通过两段信道，通信的效率同时受制于这两段信道的带宽。同时这样的信道并不适合数据流的传输，如何建立浏览器之间的点对点传输，一直困扰着开发者。WebRTC应运而生</p>\n<p>WebRTC是一个开源项目，旨在使得浏览器能为实时通信（RTC）提供简单的JavaScript接口。说的简单明了一点就是让浏览器提供JS的即时通信接口。这个接口所创立的信道并不是像WebSocket一样，打通一个浏览器与WebSocket服务器之间的通信，而是通过一系列的信令，建立一个浏览器与浏览器之间（peer-to-peer）的信道，这个信道可以发送任何数据，而不需要经过服务器。并且WebRTC通过实现MediaStream，通过浏览器调用设备的摄像头、话筒，使得浏览器之间可以传递音频和视频</p>\n<p>##WebRTC已经在我们的浏览器中<br>这么好的功能，各大浏览器厂商自然不会置之不理。现在WebRTC已经可以在较新版的Chrome、Opera和Firefox中使用了，著名的浏览器兼容性查询网站caniuse上给出了一份详尽的浏览器兼容情况</p>\n<p><img src=\"http://lingyu.wang/img/WebRTC/1.png\" alt=\"WebRTC浏览器兼容性from caniuse.com\"></p>\n<p>另外根据36Kr前段时间的新闻<a href=\"http://www.36kr.com/p/205614.html\" target=\"_blank\" rel=\"noopener\">Google推出支持WebRTC及Web Audio的Android 版Chrome 29@36kr</a>和<a href=\"http://www.36kr.com/p/210209.html\" target=\"_blank\" rel=\"noopener\">Android版Opera开始支持WebRTC，允许用户在没有任何插件的情况下实现语音和视频聊天</a>，Android也开始支持WebRTC</p>\n<p>##三个接口<br>WebRTC实现了三个API，分别是:</p>\n<ul>\n<li>MediaStream：通过MediaStream的API能够通过设备的摄像头及话筒获得视频、音频的同步流</li>\n<li>RTCPeerConnection：RTCPeerConnection是WebRTC用于构建点对点之间稳定、高效的流传输的组件</li>\n<li>RTCDataChannel：RTCDataChannel使得浏览器之间（点对点）建立一个高吞吐量、低延时的信道，用于传输任意数据</li>\n</ul>\n<p>这里大致上介绍一下这三个API</p>\n<p>##MediaStream（getUserMedia）<br>MediaStream API为WebRTC提供了从设备的摄像头、话筒获取视频、音频流数据的功能<br>###W3C标准<br><a href=\"http://dev.w3.org/2011/webrtc/editor/getusermedia.html\" target=\"_blank\" rel=\"noopener\">W3C标准传送门</a><br>###如何调用<br>同门可以通过调用navigator.getUserMedia()，这个方法接受三个参数：</p>\n<ol>\n<li>一个约束对象（constraints object），这个后面会单独讲</li>\n<li>一个调用成功的回调函数，如果调用成功，传递给它一个流对象</li>\n<li>一个调用失败的回调函数，如果调用失败，传递给它一个错误对象</li>\n</ol>\n<p>###浏览器兼容性<br>由于浏览器实现不同，他们经常会在实现标准版本之前，在方法前面加上前缀，所以一个兼容版本就像这样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var getUserMedia &#x3D; (navigator.getUserMedia || </span><br><span class=\"line\">                    navigator.webkitGetUserMedia || </span><br><span class=\"line\">                    navigator.mozGetUserMedia || </span><br><span class=\"line\">                    navigator.msGetUserMedia);</span><br></pre></td></tr></table></figure>\n\n<p>###一个超级简单的例子<br>这里写一个超级简单的例子，用来展现getUserMedia的效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>GetUserMedia实例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">autoplay</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    getUserMedia.call(navigator, &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        video: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        audio: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(localMediaStream)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'video'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        video.src = <span class=\"built_in\">window</span>.URL.createObjectURL(localMediaStream);</span></span><br><span class=\"line\"><span class=\"actionscript\">        video.onloadedmetadata = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Label: \"</span> + localMediaStream.label);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AudioTracks\"</span> , localMediaStream.getAudioTracks());</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"VideoTracks\"</span> , localMediaStream.getVideoTracks());</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"><span class=\"actionscript\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Reeeejected!'</span>, e);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将这段内容保存在一个HTML文件中，放在服务器上。用较新版本的Opera、Firefox、Chrome打开，在浏览器弹出询问是否允许访问摄像头和话筒，选同意，浏览器上就会出现摄像头所拍摄到的画面了</p>\n<p>注意，HTML文件要放在服务器上，否则会得到一个NavigatorUserMediaError的错误，显示PermissionDeniedError，最简单方法就是cd到HTML文件所在目录下，然后<code>python -m SimpleHTTPServer</code>（装了python的话），然后在浏览器中输入<code>http://localhost:8000/{文件名称}.html</code></p>\n<p>这里使用<code>getUserMedia</code>获得流之后，需要将其输出，一般是绑定到<code>video</code>标签上输出，需要使用<code>window.URL.createObjectURL(localMediaStream)</code>来创造能在<code>video</code>中使用<code>src</code>属性播放的Blob URL，注意在<code>video</code>上加入<code>autoplay</code>属性，否则只能捕获到一张图片</p>\n<p>流创建完毕后可以通过<code>label</code>属性来获得其唯一的标识，还可以通过<code>getAudioTracks()</code>和<code>getVideoTracks()</code>方法来获得流的追踪对象数组（如果没有开启某种流，它的追踪对象数组将是一个空数组）</p>\n<p>###约束对象（Constraints）<br>约束对象可以被设置在<code>getUserMedia()</code>和RTCPeerConnection的<code>addStream</code>方法中，这个约束对象是WebRTC用来指定接受什么样的流的，其中可以定义如下属性：</p>\n<ul>\n<li>video: 是否接受视频流</li>\n<li>audio：是否接受音频流</li>\n<li>MinWidth: 视频流的最小宽度</li>\n<li>MaxWidth：视频流的最大宽度</li>\n<li>MinHeight：视频流的最小高度</li>\n<li>MaxHiehgt：视频流的最大高度</li>\n<li>MinAspectRatio：视频流的最小宽高比</li>\n<li>MaxAspectRatio：视频流的最大宽高比</li>\n<li>MinFramerate：视频流的最小帧速率</li>\n<li>MaxFramerate：视频流的最大帧速率</li>\n</ul>\n<p>详情见<a href=\"http://tools.ietf.org/html/draft-alvestrand-constraints-resolution-00\" target=\"_blank\" rel=\"noopener\">Resolution Constraints in Web Real Time Communications draft-alvestrand-constraints-resolution-00</a></p>\n<p>##RTCPeerConnection<br>WebRTC使用RTCPeerConnection来在浏览器之间传递流数据，这个流数据通道是点对点的，不需要经过服务器进行中转。但是这并不意味着我们能抛弃服务器，我们仍然需要它来为我们传递信令（signaling）来建立这个信道。WebRTC没有定义用于建立信道的信令的协议：信令并不是RTCPeerConnection API的一部分</p>\n<p>###信令<br>既然没有定义具体的信令的协议，我们就可以选择任意方式（AJAX、WebSocket），采用任意的协议（SIP、XMPP）来传递信令，建立信道，比如我写的<a href=\"https://github.com/LingyuCoder/SkyRTC-demo\" target=\"_blank\" rel=\"noopener\">demo</a>，就是用的node的ws模块，在WebSocket上传递信令</p>\n<ul>\n<li>session的信息：用来初始化通信还有报错<br>这些信息的交换应该在点对点的流传输之前就全部完成，一个大致的架构图如下：</li>\n</ul>\n<p><img src=\"http://lingyu.wang/img/WebRTC/2.png\" alt=\"JSEP架构\"></p>\n<p>###通过服务器建立信道<br>这里再次重申，就算WebRTC提供浏览器之间的点对点信道进行数据传输，但是建立这个信道，必须有服务器的参与。WebRTC需要服务器对其进行四方面的功能支持：</p>\n<ol>\n<li>用户发现以及通信</li>\n<li>信令传输</li>\n<li>NAT/防火墙穿越</li>\n<li>如果点对点通信建立失败，可以作为中转服务器</li>\n</ol>\n<p>###NAT/防火墙穿越技术<br>建立点对点信道的一个常见问题，就是NAT穿越技术。在处于使用了NAT设备的私有TCP/IP网络中的主机之间需要建立连接时需要使用NAT穿越技术。以往在VoIP领域经常会遇到这个问题。目前已经有很多NAT穿越技术，但没有一项是完美的，因为NAT的行为是非标准化的。这些技术中大多使用了一个公共服务器，这个服务使用了一个从全球任何地方都能访问得到的IP地址。在RTCPeeConnection中，使用ICE框架来保证RTCPeerConnection能实现NAT穿越</p>\n<p><img src=\"http://lingyu.wang/img/WebRTC/3.png\" alt=\"整合了ICE框架的WebRTC应用架构\"></p>\n<p>###浏览器兼容<br>还是前缀不同的问题，采用和上面类似的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> PeerConnection = (<span class=\"built_in\">window</span>.PeerConnection ||</span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.webkitPeerConnection00 || </span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.webkitRTCPeerConnection || </span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.mozRTCPeerConnection);</span><br></pre></td></tr></table></figure>\n\n<p>###创建和使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用Google的stun服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iceServer = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"iceServers\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"string\">\"url\"</span>: <span class=\"string\">\"stun:stun.l.google.com:19302\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//兼容浏览器的getUserMedia写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getUserMedia = (navigator.getUserMedia ||</span><br><span class=\"line\">                    navigator.webkitGetUserMedia || </span><br><span class=\"line\">                    navigator.mozGetUserMedia || </span><br><span class=\"line\">                    navigator.msGetUserMedia);</span><br><span class=\"line\"><span class=\"comment\">//兼容浏览器的PeerConnection写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> PeerConnection = (<span class=\"built_in\">window</span>.PeerConnection ||</span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.webkitPeerConnection00 || </span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.webkitRTCPeerConnection || </span><br><span class=\"line\">                    <span class=\"built_in\">window</span>.mozRTCPeerConnection);</span><br><span class=\"line\"><span class=\"comment\">//与后台服务器的WebSocket连接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = __createWebSocketChannel();</span><br><span class=\"line\"><span class=\"comment\">//创建PeerConnection实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pc = <span class=\"keyword\">new</span> PeerConnection(iceServer);</span><br><span class=\"line\"><span class=\"comment\">//发送ICE候选到其他客户端</span></span><br><span class=\"line\">pc.onicecandidate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    socket.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"event\"</span>: <span class=\"string\">\"__ice_candidate\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"candidate\"</span>: event.candidate</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//如果检测到媒体流连接到本地，将其绑定到一个video标签上输出</span></span><br><span class=\"line\">pc.onaddstream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    someVideoElement.src = URL.createObjectURL(event.stream);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端</span></span><br><span class=\"line\">getUserMedia.call(navigator, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"audio\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"video\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stream</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发送offer和answer的函数，发送本地session描述</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sendOfferFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">desc</span>)</span>&#123;</span><br><span class=\"line\">            pc.setLocalDescription(desc);</span><br><span class=\"line\">            socket.send(<span class=\"built_in\">JSON</span>.stringify(&#123; </span><br><span class=\"line\">                <span class=\"string\">\"event\"</span>: <span class=\"string\">\"__offer\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"sdp\"</span>: desc</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sendAnswerFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">desc</span>)</span>&#123;</span><br><span class=\"line\">            pc.setLocalDescription(desc);</span><br><span class=\"line\">            socket.send(<span class=\"built_in\">JSON</span>.stringify(&#123; </span><br><span class=\"line\">                <span class=\"string\">\"event\"</span>: <span class=\"string\">\"__answer\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"sdp\"</span>: desc</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//绑定本地媒体流到video标签用于输出</span></span><br><span class=\"line\">    myselfVideoElement.src = URL.createObjectURL(stream);</span><br><span class=\"line\">    <span class=\"comment\">//向PeerConnection中加入需要发送的流</span></span><br><span class=\"line\">    pc.addStream(stream);</span><br><span class=\"line\">    <span class=\"comment\">//如果是发送方则发送一个offer信令，否则发送一个answer信令</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isCaller)&#123;</span><br><span class=\"line\">        pc.createOffer(sendOfferFn);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pc.createAnswer(sendAnswerFn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理媒体流创建失败错误</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//处理到来的信令</span></span><br><span class=\"line\">socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parse(event.data);</span><br><span class=\"line\">    <span class=\"comment\">//如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( json.event === <span class=\"string\">\"__ice_candidate\"</span> )&#123;</span><br><span class=\"line\">        pc.addIceCandidate(<span class=\"keyword\">new</span> RTCIceCandidate(json.data.candidate));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         pc.setRemoteDescription(<span class=\"keyword\">new</span> RTCSessionDescription(json.data.sdp));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>###实例<br>由于涉及较为复杂灵活的信令传输，故这里不做简短的实例，可以直接移步到最后</p>\n<p>##RTCDataChannel<br>既然能建立点对点的信道来传递实时的视频、音频数据流，为什么不能用这个信道传一点其他数据呢？RTCDataChannel API就是用来干这个的，基于它我们可以在浏览器之间传输任意数据。DataChannel是建立在PeerConnection上的，不能单独使用<br>###使用DataChannel<br>我们可以使用<code>channel = pc.createDataCHannel(&quot;someLabel&quot;);</code>来在PeerConnection的实例上创建Data Channel，并给与它一个标签</p>\n<p>DataChannel使用方式几乎和WebSocket一样，有几个事件：</p>\n<ul>\n<li>onopen</li>\n<li>onclose</li>\n<li>onmessage</li>\n<li>onerror</li>\n</ul>\n<p>同时它有几个状态，可以通过<code>readyState</code>获取：</p>\n<ul>\n<li>connecting: 浏览器之间正在试图建立channel</li>\n<li>open：建立成功，可以使用<code>send</code>方法发送数据了</li>\n<li>closing：浏览器正在关闭channel</li>\n<li>closed：channel已经被关闭了</li>\n</ul>\n<p>两个暴露的方法:</p>\n<ul>\n<li>close(): 用于关闭channel</li>\n<li>send()：用于通过channel向对方发送数据</li>\n</ul>\n<p>###通过Data Channel发送文件大致思路<br>JavaScript已经提供了File API从<code>input[type=&#39;file&#39;]</code>的元素中提取文件，并通过FileReader来将文件的转换成DataURL，这也意味着我们可以将DataURL分成多个碎片来通过Channel来进行文件传输</p>\n<p>##一个综合的Demo<br><a href=\"https://github.com/LingyuCoder/SkyRTC-demo\" target=\"_blank\" rel=\"noopener\">SkyRTC-demo</a>，这是我写的一个Demo。建立一个视频聊天室，并能够广播文件，当然也支持单对单文件传输，写得还很粗糙，后期会继续完善</p>\n<p>###使用方式</p>\n<ol>\n<li>下载解压并cd到目录下</li>\n<li>运行<code>npm install</code>安装依赖的库（express, ws, node-uuid）</li>\n<li>运行<code>node server.js</code>，访问<code>localhost:3000</code>，允许摄像头访问</li>\n<li>打开另一台电脑，在浏览器（Chrome和Opera，还未兼容Firefox）打开<code>{server所在IP}:3000</code>，允许摄像头和话筒访问</li>\n<li>广播文件：在左下角选定一个文件，点击“发送文件”按钮</li>\n<li>广播信息：左下角input框输入信息，点击发送</li>\n<li>可能会出错，注意F12对话框，一般F5能解决</li>\n</ol>\n<p>###功能<br>视频音频聊天（连接了摄像头和话筒，至少要有摄像头），广播文件（可单独传播，提供API，广播就是基于单独传播实现的，可同时传播多个，小文件还好说，大文件坐等内存吃光），广播聊天信息</p>\n<p>##参考资料</p>\n<ul>\n<li><a href=\"http://www.webrtc.org/\" target=\"_blank\" rel=\"noopener\">WebRTC官方网站</a></li>\n<li><a href=\"http://dev.w3.org/2011/webrtc/editor/getusermedia.html\" target=\"_blank\" rel=\"noopener\">W3C-GetUserMedia</a></li>\n<li><a href=\"http://dev.w3.org/2011/webrtc/editor/webrtc.html\" target=\"_blank\" rel=\"noopener\">W3C-WebRTC</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/getusermedia/intro/\" target=\"_blank\" rel=\"noopener\">Capturing Audio &amp; Video in HTML5@html5rocks</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/webrtc/basics/\" target=\"_blank\" rel=\"noopener\">Getting Started with WebRTC@html5rocks</a></li>\n<li><a href=\"http://caniuse.com\" target=\"_blank\" rel=\"noopener\">caniuse</a></li>\n<li><a href=\"http://zh.wikipedia.org/wiki/%E4%BA%92%E5%8B%95%E5%BC%8F%E9%80%A3%E6%8E%A5%E5%BB%BA%E7%AB%8B\" target=\"_blank\" rel=\"noopener\">ICE交互式连接建立</a></li>\n</ul>\n"}