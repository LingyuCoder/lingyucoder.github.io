{"tags":[{"name":"WebSocket","permalink":"http://lingyu.life/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":8},{"name":"NodeJs","permalink":"http://lingyu.life/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":14},{"name":"WebIM","permalink":"http://lingyu.life/tags/WebIM/","url":"/async/tags/WebIM.json","count":9},{"name":"WebRTC","permalink":"http://lingyu.life/tags/WebRTC/","url":"/async/tags/WebRTC.json","count":8},{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"即时通信","permalink":"http://lingyu.life/categories/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/","url":"/async/categories/即时通信.json","count":9}],"url":"/async/posts/2014/03/18/webRTC-2.json","date":1395072000000,"path":{"year":2014,"month":3,"day":18,"name":"webRTC-2"},"subtitle":"使用WebRTC + WebSocket搭建视频聊天室","title":"使用WebRTC搭建前端视频聊天室——信令篇","permalink":"http://lingyu.life/2014/03/18/webRTC-2/","content":"<p>由于毕设研究定的题目是即时通信相关，于是乎决定研究一下WebRTC来实现浏览器内的音频聊天，同时探究一下WebRTC能做些什么</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h2><p>这篇文章讲述了WebRTC中所涉及的信令交换以及聊天室中的信令交换，主要内容来自<a href=\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/\" target=\"_blank\" rel=\"noopener\">WebRTC in the real world: STUN, TURN and signaling</a>，我在这里提取出的一些信息，并添加了自己在开发时的一些想法</p>\n<h2 id=\"WebRTC的服务器\"><a href=\"#WebRTC的服务器\" class=\"headerlink\" title=\"WebRTC的服务器\"></a>WebRTC的服务器</h2><p>WebRTC提供了浏览器到浏览器（点对点）之间的通信，但并不意味着WebRTC不需要服务器。暂且不说基于服务器的一些扩展业务，WebRTC至少有两件事必须要用到服务器：</p>\n<ol>\n<li>浏览器之间交换建立通信的元数据（信令）必须通过服务器</li>\n<li>为了穿越NAT和防火墙</li>\n</ol>\n<h2 id=\"为什么需要信令？\"><a href=\"#为什么需要信令？\" class=\"headerlink\" title=\"为什么需要信令？\"></a>为什么需要信令？</h2><p>我们需要通过一系列的信令来建立浏览器之间的通信。而具体需要通过信令交换哪些内容呢？这里大概列了一下：</p>\n<ol>\n<li>用来控制通信开启或者关闭的连接控制消息</li>\n<li>发生错误时用来彼此告知的消息</li>\n<li>媒体流元数据，比如像解码器、解码器的配置、带宽、媒体类型等等</li>\n<li>用来建立安全连接的关键数据</li>\n<li>外界所看到的的网络上的数据，比如IP地址、端口等</li>\n</ol>\n<p>在建立连接之前，浏览器之间显然没有办法传递数据。所以我们需要通过服务器的中转，在浏览器之间传递这些数据，然后建立浏览器之间的点对点连接。但是WebRTC API中并没有实现这些。</p>\n<h2 id=\"为什么WebRTC不去实现信令交换？\"><a href=\"#为什么WebRTC不去实现信令交换？\" class=\"headerlink\" title=\"为什么WebRTC不去实现信令交换？\"></a>为什么WebRTC不去实现信令交换？</h2><p>不去由WebRTC实现信令交换的原因很简单：WebRTC标准的制定者们希望能够最大限度地兼容已有的成熟技术。具体的连接建立方式由一种叫JSEP（JavaScript Session Establishment Protocol）的协议来规定，使用JSEP有两个好处：</p>\n<ol>\n<li>在JSEP中，需要交换的关键信息是多媒体会话描述（multimedia session description）。由于开发者在其所开发的应用程序中信令所使用的协议不同（SIP或是XMPP或是开发者自己定义的协议），WebRTC建立呼叫的思想建立在媒体流控制层面上，从而与上层信令传输相分离，防止相互之间的信令污染。只要上层信令为其提供了多媒体会话描述符这样的关键信息就可以建立连接，不管开发者用何种方式来传递。</li>\n<li>JSEP的架构同时也避免了在浏览器上保存连接的状态，防止其像一个状态机一样工作。由于页面经常被频繁的刷新，如果连接的状态保存在浏览器中，每次刷新都会丢失。使用JSEP能使得状态被保存在服务器上</li>\n</ol>\n<p><img src=\"http://lingyu.wang/img/WebRTC/2.png\" alt=\"JSEP的架构图\"></p>\n<h2 id=\"会话描述协议（Session-Description-Protocol）\"><a href=\"#会话描述协议（Session-Description-Protocol）\" class=\"headerlink\" title=\"会话描述协议（Session Description Protocol）\"></a>会话描述协议（Session Description Protocol）</h2><p>JSEP将客户端之间传递的信令分为两种:offer信令和answer信令。他们主要内容的格式都遵循会话描述协议（Session Description Protocal，简称SDP）。一个SDP的信令的内容大致上如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v&#x3D;0</span><br><span class=\"line\">o&#x3D;- 7806956 075423448571 2 IN IP4 127.0.0.1</span><br><span class=\"line\">s&#x3D;-</span><br><span class=\"line\">t&#x3D;0 0</span><br><span class=\"line\">a&#x3D;group:BUNDLE audio video data</span><br><span class=\"line\">a&#x3D;msid-semantic: WMS 5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g</span><br><span class=\"line\">m&#x3D;audio 1 RTP&#x2F;SAVPF 111 103 104 0 8 106 105 13 126</span><br><span class=\"line\">c&#x3D;IN IP4 0.0.0.0</span><br><span class=\"line\">a&#x3D;rtcp:1 IN IP4 0.0.0.0</span><br><span class=\"line\">a&#x3D;ice-ufrag:grnpQ0BSTSnBLroq</span><br><span class=\"line\">a&#x3D;ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</span><br><span class=\"line\">a&#x3D;ice-options:google-ice</span><br><span class=\"line\">a&#x3D;fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</span><br><span class=\"line\">a&#x3D;setup:actpass</span><br><span class=\"line\">a&#x3D;mid:audio</span><br><span class=\"line\">a&#x3D;extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level</span><br><span class=\"line\">a&#x3D;recvonly</span><br><span class=\"line\">a&#x3D;rtcp-mux</span><br><span class=\"line\">a&#x3D;crypto:1 AES_CM_128_HMAC_SHA1_80 inline:qzcKu22ar1+lYah6o8ggzGcQ5obCttoOO2IzXwFV</span><br><span class=\"line\">a&#x3D;rtpmap:111 opus&#x2F;48000&#x2F;2</span><br><span class=\"line\">a&#x3D;fmtp:111 minptime&#x3D;10</span><br><span class=\"line\">a&#x3D;rtpmap:103 ISAC&#x2F;16000</span><br><span class=\"line\">a&#x3D;rtpmap:104 ISAC&#x2F;32000</span><br><span class=\"line\">a&#x3D;rtpmap:0 PCMU&#x2F;8000</span><br><span class=\"line\">a&#x3D;rtpmap:8 PCMA&#x2F;8000</span><br><span class=\"line\">a&#x3D;rtpmap:106 CN&#x2F;32000</span><br><span class=\"line\">a&#x3D;rtpmap:105 CN&#x2F;16000</span><br><span class=\"line\">a&#x3D;rtpmap:13 CN&#x2F;8000</span><br><span class=\"line\">a&#x3D;rtpmap:126 telephone-event&#x2F;8000</span><br><span class=\"line\">a&#x3D;maxptime:60</span><br><span class=\"line\">m&#x3D;video 1 RTP&#x2F;SAVPF 100 116 117</span><br><span class=\"line\">c&#x3D;IN IP4 0.0.0.0</span><br><span class=\"line\">a&#x3D;rtcp:1 IN IP4 0.0.0.0</span><br><span class=\"line\">a&#x3D;ice-ufrag:grnpQ0BSTSnBLroq</span><br><span class=\"line\">a&#x3D;ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</span><br><span class=\"line\">a&#x3D;ice-options:google-ice</span><br><span class=\"line\">a&#x3D;fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</span><br><span class=\"line\">a&#x3D;setup:actpass</span><br><span class=\"line\">a&#x3D;mid:video</span><br><span class=\"line\">a&#x3D;extmap:2 urn:ietf:params:rtp-hdrext:toffset</span><br><span class=\"line\">a&#x3D;extmap:3 http:&#x2F;&#x2F;www.webrtc.org&#x2F;experiments&#x2F;rtp-hdrext&#x2F;abs-send-time</span><br><span class=\"line\">a&#x3D;sendrecv</span><br><span class=\"line\">a&#x3D;rtcp-mux</span><br><span class=\"line\">a&#x3D;crypto:1 AES_CM_128_HMAC_SHA1_80 inline:qzcKu22ar1+lYah6o8ggzGcQ5obCttoOO2IzXwFV</span><br><span class=\"line\">a&#x3D;rtpmap:100 VP8&#x2F;90000</span><br><span class=\"line\">a&#x3D;rtcp-fb:100 ccm fir</span><br><span class=\"line\">a&#x3D;rtcp-fb:100 nack</span><br><span class=\"line\">a&#x3D;rtcp-fb:100 goog-remb</span><br><span class=\"line\">a&#x3D;rtpmap:116 red&#x2F;90000</span><br><span class=\"line\">a&#x3D;rtpmap:117 ulpfec&#x2F;90000</span><br><span class=\"line\">a&#x3D;ssrc:3162115896 cname:&#x2F;nERF7Ern+udqf++</span><br><span class=\"line\">a&#x3D;ssrc:3162115896 msid:5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g 221b204e-c9a0-4b01-b361-e17e9bf8f639</span><br><span class=\"line\">a&#x3D;ssrc:3162115896 mslabel:5UhOcZZB1uXtVbYAU5thB0SpkXbzk9FHo30g</span><br><span class=\"line\">a&#x3D;ssrc:3162115896 label:221b204e-c9a0-4b01-b361-e17e9bf8f639</span><br><span class=\"line\">m&#x3D;application 1 DTLS&#x2F;SCTP 5000</span><br><span class=\"line\">c&#x3D;IN IP40.0.0.0</span><br><span class=\"line\">a&#x3D;ice-ufrag:grnpQ0BSTSnBLroq</span><br><span class=\"line\">a&#x3D;ice-pwd:N5i4DZKMM2L7FEYnhO8V7Kg5</span><br><span class=\"line\">a&#x3D;ice-options:google-ice</span><br><span class=\"line\">a&#x3D;fingerprint:sha-256 01:A3:18:0E:36:5E:EF:24:18:8C:8B:0C:9E:B0:84:F6:34:E9:42:E3:0F:43:64:ED:EC:46:2C:3C:23:E3:78:7B</span><br><span class=\"line\">a&#x3D;setup:actpass</span><br><span class=\"line\">a&#x3D;mid:data</span><br><span class=\"line\">a&#x3D;sctpmap:5000 webrtc-datachannel 1024</span><br></pre></td></tr></table></figure>\n<p>这些都什么玩意？说实话我不知道，我这里放这么一大段出来，只是为了让文章内容显得很多…如果想深入了解的话，可以参考<a href=\"http://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1\" target=\"_blank\" rel=\"noopener\">SDP for the WebRTC draft-nandakumar-rtcweb-sdp-04</a>自行进行解析</p>\n<p>其实可以将其简化一下，它就是一个在点对点连接中描述自己的字符串，我们可以将其封装在JSON中进行传输，在PeerConnection建立后将其通过服务器中转后，将自己的SDP描述符和对方的SDP描述符交给PeerConnection就行了</p>\n<h2 id=\"信令与RTCPeerConnection建立\"><a href=\"#信令与RTCPeerConnection建立\" class=\"headerlink\" title=\"信令与RTCPeerConnection建立\"></a>信令与RTCPeerConnection建立</h2><p>在前一篇文章中介绍过，WebRTC使用RTCPeerConnection来在浏览器之间传递流数据，在建立RTCPeerConnection实例之后，想要使用其建立一个点对点的信道，我们需要做两件事：</p>\n<ol>\n<li>确定本机上的媒体流的特性，比如分辨率、编解码能力啥的（SDP描述符）</li>\n<li>连接两端的主机的网络地址（ICE Candidate）</li>\n</ol>\n<p>需要注意的是，由于连接两端的主机都可能在内网或是在防火墙之后，我们需要一种对所有联网的计算机都通用的定位方式。这其中就涉及NAT/防火墙穿越技术，以及WebRTC用来达到这个目的所ICE框架。这一部分在上一篇文章中有介绍，这里不再赘述。</p>\n<h3 id=\"通过offer和answer交换SDP描述符\"><a href=\"#通过offer和answer交换SDP描述符\" class=\"headerlink\" title=\"通过offer和answer交换SDP描述符\"></a>通过offer和answer交换SDP描述符</h3><p>大致上在两个用户（甲和乙）之间建立点对点连接流程应该是这个样子（这里不考虑错误的情况，RTCPeerConnection简称PC）：</p>\n<ol>\n<li>甲和乙各自建立一个PC实例</li>\n<li>甲通过PC所提供的<code>createOffer()</code>方法建立一个包含甲的SDP描述符的offer信令</li>\n<li>甲通过PC所提供的<code>setLocalDescription()</code>方法，将甲的SDP描述符交给甲的PC实例</li>\n<li>甲将offer信令通过服务器发送给乙</li>\n<li>乙将甲的offer信令中所包含的的SDP描述符提取出来，通过PC所提供的<code>setRemoteDescription()</code>方法交给乙的PC实例</li>\n<li>乙通过PC所提供的<code>createAnswer()</code>方法建立一个包含乙的SDP描述符answer信令</li>\n<li>乙通过PC所提供的<code>setLocalDescription()</code>方法，将乙的SDP描述符交给乙的PC实例</li>\n<li>乙将answer信令通过服务器发送给甲</li>\n<li>甲接收到乙的answer信令后，将其中乙的SDP描述符提取出来，调用<code>setRemoteDescripttion()</code>方法交给甲自己的PC实例</li>\n</ol>\n<p>通过在这一系列的信令交换之后，甲和乙所创建的PC实例都包含甲和乙的SDP描述符了，完成了两件事的第一件。我们还需要完成第二件事——获取连接两端主机的网络地址</p>\n<h3 id=\"通过ICE框架建立NAT-防火墙穿越的连接\"><a href=\"#通过ICE框架建立NAT-防火墙穿越的连接\" class=\"headerlink\" title=\"通过ICE框架建立NAT/防火墙穿越的连接\"></a>通过ICE框架建立NAT/防火墙穿越的连接</h3><p>这个网络地址应该是能从外界直接访问，WebRTC使用ICE框架来获得这个地址。RTCPeerConnection在创立的时候可以将ICE服务器的地址传递进去，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iceServer = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"iceServers\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"string\">\"url\"</span>: <span class=\"string\">\"stun:stun.l.google.com:19302\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pc = <span class=\"keyword\">new</span> RTCPeerConnection(iceServer);</span><br></pre></td></tr></table></figure>\n<p>当然这个地址也需要交换，还是以甲乙两位为例，交换的流程如下（RTCPeerConnection简称PC）：</p>\n<ol>\n<li>甲、乙各创建配置了ICE服务器的PC实例，并为其添加<code>onicecandidate</code>事件回调</li>\n<li>当网络候选可用时，将会调用<code>onicecandidate</code>函数</li>\n<li>在回调函数内部，甲或乙将网络候选的消息封装在ICE Candidate信令中，通过服务器中转，传递给对方</li>\n<li>甲或乙接收到对方通过服务器中转所发送过来ICE Candidate信令时，将其解析并获得网络候选，将其通过PC实例的<code>addIceCandidate()</code>方法加入到PC实例中</li>\n</ol>\n<p>这样连接就创立完成了，可以向RTCPeerConnection中通过<code>addStream()</code>加入流来传输媒体流数据。将流加入到RTCPeerConnection实例中后，对方就可以通过<code>onaddstream</code>所绑定的回调函数监听到了。调用<code>addStream()</code>可以在连接完成之前，在连接建立之后，对方一样能监听到媒体流</p>\n<h2 id=\"聊天室中的信令\"><a href=\"#聊天室中的信令\" class=\"headerlink\" title=\"聊天室中的信令\"></a>聊天室中的信令</h2><p>上面是两个用户之间的信令交换流程，但我们需要建立一个多用户在线视频聊天的聊天室。所以需要进行一些扩展，来达到这个要求</p>\n<h3 id=\"用户操作\"><a href=\"#用户操作\" class=\"headerlink\" title=\"用户操作\"></a>用户操作</h3><p>首先需要确定一个用户在聊天室中的操作大致流程：</p>\n<ol>\n<li>打开页面连接到服务器上</li>\n<li>进入聊天室</li>\n<li>与其他所有已在聊天室的用户建立点对点的连接，并输出在页面上</li>\n<li>若有聊天室内的其他用户离开，应得到通知，关闭与其的连接并移除其在页面中的输出</li>\n<li>若又有其他用户加入，应得到通知，建立于新加入用户的连接，并输出在页面上</li>\n<li>离开页面，关闭所有连接</li>\n</ol>\n<p>从上面可以看出来，除了点对点连接的建立，还需要服务器至少做如下几件事：</p>\n<ol>\n<li>新用户加入房间时，发送新用户的信息给房间内的其他用户</li>\n<li>新用户加入房间时，发送房间内的其他用户信息给新加入房间的用户</li>\n<li>用户离开房间时，发送离开用户的信息给房间内的其他用户</li>\n</ol>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>以使用WebSocket为例，上面用户操作的流程可以进行以下修改：</p>\n<ol>\n<li>浏览器与服务器建立WebSocket连接</li>\n<li>发送一个加入聊天室的信令（join），信令中需要包含用户所进入的聊天室名称</li>\n<li>服务器根据用户所加入的房间，发送一个其他用户信令（peers），信令中包含聊天室中其他用户的信息，浏览器根据信息来逐个构建与其他用户的点对点连接</li>\n<li>若有用户离开，服务器发送一个用户离开信令（remove_peer），信令中包含离开的用户的信息，浏览器根据信息关闭与离开用户的信息，并作相应的清除操作</li>\n<li>若有新用户加入，服务器发送一个用户加入信令（new_peer），信令中包含新加入的用户的信息，浏览器根据信息来建立与这个新用户的点对点连接</li>\n<li>用户离开页面，关闭WebSocket连接</li>\n</ol>\n<h3 id=\"服务器实现\"><a href=\"#服务器实现\" class=\"headerlink\" title=\"服务器实现\"></a>服务器实现</h3><p>由于用户可以只是建立连接，可能还没有进入具体房间，所以首先我们需要一个容器来保存所有用户的连接，同时监听用户是否与服务器建立了WebSocket的连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> WebSocketServer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> sockets = [];</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)</span>&#123;</span><br><span class=\"line\">    socket.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = sockets.indexOf(socket);</span><br><span class=\"line\">        sockets.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//关闭连接后的其他操作</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    sockets.push(socket);</span><br><span class=\"line\">    <span class=\"comment\">//连接建立后的其他操作</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于有房间的划分，所以我们需要在服务器上建立一个容器，用来保存房间内的用户信息。显然对象较为合适，键为房间名称，值为用户信息列表。</p>\n<p>同时我们需要监听上面所说的用户加入房间的信令（join），新用户加入之后需要向新用户发送房间内其他用户信息（peers）和向房间内其他用户发送新用户信息（new_peer），以及用户离开时向其他用户发送离开用户的信息（remove_peer）:</p>\n<p>于是乎代码大致就变成这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> WebSocketServer();</span><br><span class=\"line\"><span class=\"keyword\">var</span> sockets = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> rooms = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">join信令所接收的格式</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    \"eventName\": \"join\",</span></span><br><span class=\"line\"><span class=\"comment\">    \"data\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        \"room\": \"roomName\"</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> joinRoom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, socket</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> room = data.room || <span class=\"string\">\"__default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> curRoomSockets; <span class=\"comment\">//当前房间的socket列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> socketIds = []; <span class=\"comment\">//房间其他用户的id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    curRoomSockets = rooms[room] = rooms[room] || [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//给所有房间内的其他人发送新用户的id</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = curRoomSockets.length; i--;) &#123;</span><br><span class=\"line\">        socketIds.push(curRoomSockets[i].id);</span><br><span class=\"line\">        curRoomSockets[i].send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"eventName\"</span>: <span class=\"string\">\"new_peer\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"socketId\"</span>: socket.id</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将新用户的连接加入到房间的连接列表中</span></span><br><span class=\"line\">    curRoomSockets.push(socket);</span><br><span class=\"line\">    socket.room = room;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//给新用户发送其他用户的信息，及服务器给新用户自己赋予的id</span></span><br><span class=\"line\">    socket.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"eventName\"</span>: <span class=\"string\">\"peers\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"socketIds\"</span>: socketIds,</span><br><span class=\"line\">            <span class=\"string\">\"you\"</span>: socket.id</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//为socket构建一个特有的id，用来作为区分用户的标记</span></span><br><span class=\"line\">    socket.id = getRandomString();</span><br><span class=\"line\">    <span class=\"comment\">//用户关闭连接后，应做的处理</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = sockets.indexOf(socket);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> room = socket.room;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> curRoomSockets = rooms[room];</span><br><span class=\"line\">        sockets.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通知房间内其他用户</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curRoomSockets) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = curRoomSockets.length; i--;) &#123;</span><br><span class=\"line\">                curRoomSockets[i].send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">                    <span class=\"string\">\"eventName\"</span>: <span class=\"string\">\"remove_peer\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"socketId\"</span>: socket.id</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//从room中删除socket</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (room) &#123;</span><br><span class=\"line\">            i = <span class=\"keyword\">this</span>.rooms[room].indexOf(socket);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.rooms[room].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rooms[room].length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.rooms[room];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//关闭连接后的其他操作</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//根据前台页面传递过来的信令进行解析，确定应该如何处理</span></span><br><span class=\"line\">    socket.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (json.eventName) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (json.eventName === <span class=\"string\">\"join\"</span>) &#123;</span><br><span class=\"line\">                joinRoom(data, socket);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//将连接保存</span></span><br><span class=\"line\">    sockets.push(socket);</span><br><span class=\"line\">    <span class=\"comment\">//连接建立后的其他操作</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后再加上点对点的信令转发就行了，一份完整的代码可参照我写的<a href=\"https://github.com/LingyuCoder/SkyRTC/blob/master/SkyRTC.js\" target=\"_blank\" rel=\"noopener\">SkyRTC项目源码</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/\" target=\"_blank\" rel=\"noopener\">WebRTC in the real world: STUN, TURN and signaling</a></p>\n<p><a href=\"http://datatracker.ietf.org/doc/draft-nandakumar-rtcweb-sdp/?include_text=1\" target=\"_blank\" rel=\"noopener\">SDP for the WebRTC draft-nandakumar-rtcweb-sdp-04</a></p>\n"}