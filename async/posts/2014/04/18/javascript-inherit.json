{"tags":[{"name":"JavaScript","permalink":"http://lingyu.life/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":32}],"categories":[{"name":"JS技术","permalink":"http://lingyu.life/categories/JS%E6%8A%80%E6%9C%AF/","url":"/async/categories/JS技术.json","count":13}],"url":"/async/posts/2014/04/18/javascript-inherit.json","date":1397750400000,"path":{"year":2014,"month":4,"day":18,"name":"javascript-inherit"},"subtitle":"对JavaScript继承的一些思考和实践","title":"JavaScript的继承","permalink":"http://lingyu.life/2014/04/18/javascript-inherit/","content":"<p>面试遇到了继承的问题，虽然以前有在《JavaScript模式》里读过，不过由于记得不是很牢直接花样作死了。面试官也说继承的知识相当重要，于是乎又在闲暇的时候写了些继承的实现</p>\n<a id=\"more\"></a>\n\n<h2 id=\"new都干了些什么\"><a href=\"#new都干了些什么\" class=\"headerlink\" title=\"##new都干了些什么\"></a>##new都干了些什么</h2><p>###大致流程<br>通过new创建的对象，大致过程如下：</p>\n<ol>\n<li>首先创建个Object</li>\n<li>修改这个对象的<code>__proto__</code>，使其指向构造函数的<code>prototype</code></li>\n<li>将这个对象交给构造函数的<code>this</code>，调用构造函数</li>\n<li>如果构造函数没有return，那么返回这个对象。否则构造函数返回return语句后面的内容</li>\n</ol>\n<p>###模拟一下<br>我们可以通过在Function.prototype上创建个新方法来模拟new：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.__new__ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newObj;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultObj;</span><br><span class=\"line\">    newObj = &#123;&#125;;</span><br><span class=\"line\">    newObj.__proto__ = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    resultObj = <span class=\"keyword\">this</span>.apply(newObj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> resultObj === <span class=\"string\">'object'</span> &amp;&amp; resultObj) || newObj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>##constructor的问题<br>在创建一个函数时，会为这个函数增加一个<code>prototype</code>属性指向一个对象，而这个<code>prototype</code>对象内有一个属性就是<code>constructor</code>，这样在使用构造函数创建一个新对象时，新对象的<code>__proto__</code>自然指向含有<code>constructor</code>的构造函数的<code>prototype</code>对象。但当更换了这个构造函数的<code>prototype</code>，一切就不一样了。比如如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">A.prototype = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> A().constructor)</span><br><span class=\"line\"><span class=\"comment\">//输出：function Object() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>这里并没有输出<code>function A(){}</code>。因为A的<code>prototype</code>对象已经被重写了，其为一个Object实例，A的<code>prototype</code>对象中不包含<code>constructor</code>属性。而输出Object构造函数是因为Object实例的<code>__proto__</code>指向<code>function Object(){}</code>的prototype属性，而它内部有constructor：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tmp.__proto__.hasOwnProperty(<span class=\"string\">\"constructor\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//输出：false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tmp.__proto__.__proto__.hasOwnProperty(<span class=\"string\">\"constructor\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n\n<p>所以，如果直接使用通过修改<code>prototype</code>的方式实现继承，这将导致<code>constructor</code>不正确，比如如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child().constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Parent()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想要<code>new Child().constructor</code>指向Child，我们需要显示的修改其<code>prototype</code>的<code>constructor</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child().constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Child()&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>##继承方法<br>###直接继承<br>这种方式也就是上面的例子了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Child);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Parent);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst.constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Child()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出如下图</span></span><br></pre></td></tr></table></figure>\n<p>整个childIst对象如下图所示：</p>\n<p><img src=\"http://lingyu.wang/img/js_inherit/1.png\" alt=\"直接继承时的对象\"></p>\n<p>这种方式实现简单，这种方式有如下特点：</p>\n<ol>\n<li>所有子类实例共用一个父类实例，节省空间</li>\n<li>父类的所有属性都会被暴露给子类</li>\n<li>父类的属性子类无法直接修改，只能覆盖</li>\n<li>无法实现多继承</li>\n</ol>\n<p>###Object.create方式<br>在ECMAScript5中新增了<code>Object.create</code>方法用于实现继承，其大致实现如下（不考虑属性添加）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>所以一种可行的继承方式变成如下这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Parent.prototype);</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Child);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Parent);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst.constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Child()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：如下图所示</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://lingyu.wang/img/js_inherit/2.png\" alt=\"Object.create继承时的对象\"></p>\n<p>没有parentName属性，因为这种方式实现的继承并没有创建父类实例，而是通过一个临时函数复制了父类的<code>prototype</code>来创建。这样的话父类不在其<code>prototype</code>中的属性不会被复制到临时构造函数中，这些属性对子类是不可见的</p>\n<p>这种继承方式的特点是：</p>\n<ol>\n<li>父类仅其prototype上的属性对子类可见</li>\n<li>同样无法多继承</li>\n<li>所有子类实例公用的一个父类实例</li>\n<li>ES5方法，兼容性，ie9+，不兼容时需要polyfill</li>\n</ol>\n<p>这种通过创建一个临时对象的方式可以用在很多地方，只要需要隐藏父类自身属性的场景都可以用到</p>\n<p>###复制属性实现继承——共用原型<br>传统的类继承，子类实例不会共享父类实例，每一个子类实例拥有自己的父类实例。而JS中并没有这样的继承方式，可以通过将父类的所有值拷贝给子类实例的方式来实现继承：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parentName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Parent.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = Parent.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Child);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Parent);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst.constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Child()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：见下图</span></span><br></pre></td></tr></table></figure>\n<p>子类实例的结构图如下所示：</p>\n<p><img src=\"http://lingyu.wang/img/js_inherit/3.png\" alt=\"复制属性，共用原型时的对象\"></p>\n<p>这种方式，通过<code>Parent.apply(this)</code>将子类实例传递给父类构造函数，让父类构造函数将其属性写入子类之中，这里只复制了父类<code>this</code>上的属性，没有复制原型上的属性。然后再子类构造函数中定义子类属性，若与父类属性同名，将会覆盖父类属性。最后将子类构造函数指向父类构造函数的<code>prototype</code>，使得子类实例拥有父类实例的原型链</p>\n<p>这种方式继承有如下特点：</p>\n<ol>\n<li>子类属性覆盖掉了父类属性，同时每个子类实例可修改其父类属性而不影响到其他对象</li>\n<li>可以通过<code>delete</code>来对父类不想要暴露的属性进行删除</li>\n<li>每个子类实例拥有自己的父类属性</li>\n<li>子类与父类同名属性发生覆盖，覆盖后无法再获取覆盖前的父类属性值</li>\n<li>由于父类和子类共享<code>prototype</code>，若修改子类的<code>prototype</code>属性会影响到所有继承于父类的子类，所以不能修改</li>\n</ol>\n<p>###复制属性实现继承——不共用原型<br>可通过修改上述方法实现不共用原型的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parentName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Parent.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：见下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://lingyu.wang/img/js_inherit/4.png\" alt=\"复制属性，不共用原型时的对象\"></p>\n<p>还是通过原型链的方式，这样子类实例就有可修改的父类属性了。但这样会重复调用父类构造函数，导致创建重复属性（比如parentName）浪费内存空间，但这样就去除了上面的共用构造函数<code>prototype</code>所带来的问题。</p>\n<p>###扁平复制<br>由于继承的目标就是让子类拥有父类的特性，那么最为简单粗暴的方法，就是把父类的所有属性和方法全部复制到子类上去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parentName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> parentIst = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> parentIst) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[item] = parentIst[item];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Child);</span><br><span class=\"line\"><span class=\"comment\">//输出：true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst <span class=\"keyword\">instanceof</span> Parent);</span><br><span class=\"line\"><span class=\"comment\">//输出：false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst.constructor);</span><br><span class=\"line\"><span class=\"comment\">//输出：function Child()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：见下图</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://lingyu.wang/img/js_inherit/5.png\" alt=\"扁平复制所有属性时的对象\"></p>\n<p>这种方式实现的继承比较扁平，由于没有使用原型继承，其原型链层数不会增加，有如下特点：</p>\n<ol>\n<li>可以实现多继承</li>\n<li>会发生属性覆盖，被覆盖的属性无法获得</li>\n<li><code>instanceof</code>操作符无法检测父类</li>\n<li>子类实例拥有所有父类实例的所有属性，且可修改和删除</li>\n<li>父类所有属性均进入到子类中（可能后面会被覆盖，可以通过<code>Object.create</code>所提供的方式修改实现）</li>\n</ol>\n<p>###隐藏属性的扁平复制——仅复制父类原型属性<br>考虑到属性隐藏，可以使用Object.create的方式来进行属性隐藏，那么代码就变成下面这样了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parentName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmpFnIst;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item;</span><br><span class=\"line\">    tmpFn.prototype = Parent.prototype;</span><br><span class=\"line\">    tmpFnIst = <span class=\"keyword\">new</span> tmpFn();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> tmpFnIst) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>[item] = tmpFnIst[item];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：见下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://lingyu.wang/img/js_inherit/6.png\" alt=\"扁平复制父类原型属性时的对象\"></p>\n<p>可以看到，通过临时构造函数，将父类中不在其<code>prototype</code>中的属性进行了隐藏</p>\n<p>###隐藏属性的扁平复制——仅复制父类自身属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parentName = <span class=\"string\">\"parent\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.parentName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Parent.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.childName = <span class=\"string\">\"child\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> childIst = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(childIst);</span><br><span class=\"line\"><span class=\"comment\">//输出：见下图</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://lingyu.wang/img/js_inherit/7.png\" alt=\"扁平复制父类自身属性的对象\"></p>\n<p>这种方式和上面方式刚好相反，仅仅复制父类自身方法，而不复制其原型链上的方法</p>\n"}