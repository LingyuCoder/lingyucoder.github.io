{"tags":[{"name":"WebSocket","permalink":"http://lingyu.life/tags/WebSocket/","url":"/async/tags/WebSocket.json","count":5},{"name":"NodeJs","permalink":"http://lingyu.life/tags/NodeJs/","url":"/async/tags/NodeJs.json","count":11},{"name":"WebIM","permalink":"http://lingyu.life/tags/WebIM/","url":"/async/tags/WebIM.json","count":6},{"name":"xmpp","permalink":"http://lingyu.life/tags/xmpp/","url":"/async/tags/xmpp.json","count":1}],"categories":[{"name":"即时通信","permalink":"http://lingyu.life/categories/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/","url":"/async/categories/即时通信.json","count":6}],"url":"/async/posts/2013/12/08/websocket.json","date":1386432000000,"path":{"year":2013,"month":12,"day":8,"name":"websocket"},"subtitle":"使用WebSocket+NodeJs搭建聊天室","title":"搭建HTML5简易聊天室","permalink":"http://lingyu.life/2013/12/08/websocket/","content":"<h3 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话###\"></a>前面的话###</h3><hr>\n<p>之前曾经写过一个符合xmpp协议的Web IM，但使用的是JSJaC，后台用的也是与之配套的jabber client，发现nodejs的事件模式更适合作为Web IM的客户端。</p>\n<p>而传统的ajax轮询机制也早晚被全双工websocket所取代，所以就打算在我的毕业设计的Web IM平台中使用websocket。</p>\n<p>在这里调研一下并作出了一个简单的版聊demo，这里讲一下这个简单demo的实现方式</p>\n<a id=\"more\"></a>\n\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket###\"></a>WebSocket###</h3><hr>\n<p>什么是WebSocket？</p>\n<p><a href=\"http://datatracker.ietf.org/doc/rfc6455/?include_text=1\" target=\"_blank\" rel=\"noopener\">WebSocket的协议</a> 目前还没有仔细去研读，有时间研读一下</p>\n<p>根据<a href=\"http://www.websocket.org\" target=\"_blank\" rel=\"noopener\">WebSocket.org</a>上的定义：</p>\n<blockquote>\n<p>The WebSocket specification—developed as part of the HTML5 initiative—      introduced the WebSocket JavaScript interface, which defines a full-duplex single socket connection over which messages can be sent between client and server. The WebSocket standard simplifies much of the complexity around bi-directional web communication and connection management.</p>\n</blockquote>\n<p>如上所述websocket定义了一个浏览器和服务器之间的全双工的单一的socket连接。</p>\n<p>WebSocket的API？</p>\n<p><a href=\"http://dev.w3.org/html5/websockets\" target=\"_blank\" rel=\"noopener\">W3C的WS的API</a> ，定义了具体的WS的接口，而一般只要注意怎么使用就行了，可以清楚地看到WS客户端的几个事件：</p>\n<ol>\n<li>onopen  在WS客户端和WS服务器建立连接成功后调用</li>\n<li>onmessage 在WS服务器给WS客户端发送数据时调用</li>\n<li>onerror 如果连接失败，发送、接收数据失败或者处理数据出现错误，则会被调用</li>\n<li>onclose 在WS客户端接收到WS服务器关闭时进行调用</li>\n</ol>\n<h3 id=\"WebSocket服务器实现\"><a href=\"#WebSocket服务器实现\" class=\"headerlink\" title=\"WebSocket服务器实现###\"></a>WebSocket服务器实现###</h3><hr>\n<p>nodejs有很多websocket的三方库，都很实用，在stackoverflow上有人问过具体应该使用哪个库，而回答者给与了<a href=\"http://stackoverflow.com/questions/16392260/which-websocket-library-to-use-with-node-js\" target=\"_blank\" rel=\"noopener\">较为全面的解答</a></p>\n<p>这里面对各个websocket库进行了一个对比，可以根据自己的需要选择。</p>\n<p>其中可以注意一下<a href=\"http://socket.io/#home\" target=\"_blank\" rel=\"noopener\">socket.io</a>，它对不同的浏览器有比较好的支持，在不支持websocket的时候可以转变成ajax的轮询等其他的替换，浏览器的支持也相当不错。同时还能和目前比较流行的node的web框架express相结合，其文档的例子写的很好。</p>\n<p>由于我只是想搭建一个简单快捷的WS服务器，所以选用了号称probably the fastest WebSocket library for node.js的<a href=\"https://github.com/einaros/ws\" target=\"_blank\" rel=\"noopener\">ws</a> </p>\n<p>在项目中使用npm安装：</p>\n<pre><code>npm install ws</code></pre><p>如果需要使用命令行的简易WS客户端，可以：</p>\n<pre><code>npm install ws -g</code></pre><p>创建一个WS服务器：</p>\n<pre><code>var WebSocketServer = require(&apos;ws&apos;).Server,\n    wss = new WebSocketServer({\n    port: process.env.WSPORT || 3001\n});</code></pre><p>这样wss就成为了一个监听3001端口的WS服务器，我们需要为WS服务器创建WS客户端连接时候的事件：</p>\n<pre><code>wss.on(&apos;connection&apos;, function(ws) {});</code></pre><p>这样，在有WS客户端连接我们的WS服务器时就会触发这个事件，但连接之后我么还需要传递信息，所以需要丰富这个事件的回调函数。</p>\n<p>回调函数有一个参数ws，这个ws掌管着和WS客户端的连接，其事件也和WS客户端相同，不过不需要onopen。需要绑定的还有message，close：</p>\n<pre><code>wss.on(&apos;connection&apos;, function(ws) {\n    ws.on(&apos;message&apos;, function(data) {\n\n    });\n    ws.on(&apos;close&apos;, function() {\n\n    });\n});</code></pre><p>message事件在WS客户端给这个WS服务器发数据时调用，data就是这个数据，一般为string类型</p>\n<p>close事件在WS客服端给这个WS服务器发送关闭请求时调用</p>\n<p>一个简单的聊天室，需要在一个用户加入时告诉其他所有用户有新用户加入，也就是需要一个广播的方法，我们可以根据ws的示例来定义广播方法：</p>\n<pre><code>wss.broadcast = function(data) {\n    for (var i in this.clients) this.clients[i].send(JSON.stringify(data));\n};</code></pre><p>这里可以看到wss的clients存放了所有与wss相连的WS客户端连接。</p>\n<p>在一个WS客户端连接了WS服务器，我们需要把现有的所有房间内用户的信息给新进入房间的用户，并告诉所有房间内的用户有新用户加入，默认新进入房间的用户叫“游客”，修改代码：</p>\n<pre><code>wss.on(&apos;connection&apos;, function(ws) {\n    ws.on(&apos;message&apos;, function(data) {\n    });\n    ws.on(&apos;close&apos;, function() {\n    });\n    //给每个用户一个单独的id\n    ws.uid = uuid.v4();\n    //新进入房间的用户的昵称\n    ws.nick = &quot;游客&quot;;\n    //把目前所有房间内人员的信息发给新用户\n    for (var i in this.clients) {\n        ws.send(JSON.stringify({\n            nick: this.clients[i].nick,\n            uid: this.clients[i].uid,\n            type: &quot;join&quot;\n        }));\n    }\n    //将新加入用户的信息告诉所有房间内的用户\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        type: &quot;join&quot;\n    });\n});</code></pre><p>这样新用户加入时的服务器端处理就完成了</p>\n<p>在一个用户向服务器发送信息时,需要广播这条信息,同时也要指出发送人的信息,所以修改代码:</p>\n<pre><code>ws.on(&apos;message&apos;, function(data) {\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        time: moment(data.time).format(&quot;HH:mm:ss&quot;),\n        message: data.message,\n        type: &quot;message&quot;\n    });\n});</code></pre><p>在一个WS客户端向WS服务器发送关闭请求时，需要通知其他所有房间内的用户，所以修改代码：</p>\n<pre><code>ws.on(&apos;close&apos;, function() {\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        type: &quot;exit&quot;\n    });\n});</code></pre><p>在一个用户要修改自己的昵称，WS客户端需要向WS服务器发送申请，所以修改代码：</p>\n<pre><code>ws.on(&apos;message&apos;, function(data) {\n    //解析数据\n    data = JSON.parse(data);\n    //若为message,则为WS客户端向WS服务器发送信息,进行广播\n    if (data.type === &quot;message&quot;) {\n        wss.broadcast({\n            nick: ws.nick,\n            uid: ws.uid,\n            time: moment(data.time).format(&quot;HH:mm:ss&quot;),\n            message: data.message,\n            type: &quot;message&quot;\n        });\n    //若为nickname,则为WS客户端向WS服务器发送昵称修改请求,则修改用户昵称,并进行广播\n    } else if (data.type === &quot;nickname&quot;) {\n        wss.broadcast({\n            oldnick: ws.nick,\n            nick: data.nick,\n            uid: ws.uid,\n            type: &quot;nickname&quot;\n        });\n        ws.nick = data.nick;\n    }\n});</code></pre><p>这样一个简单的聊天室的WS服务器就完成了,所有代码如下:</p>\n<pre><code>var WebSocketServer = require(&apos;ws&apos;).Server,\n    wss = new WebSocketServer({\n        port: process.env.WSPORT || 3001\n    });\n\nwss.broadcast = function(data) {\n    for (var i in this.clients) this.clients[i].send(JSON.stringify(data));\n};\n\nwss.on(&apos;connection&apos;, function(ws) {\n    ws.on(&apos;message&apos;, function(data) {\n        data = JSON.parse(data);\n        if (data.type === &quot;message&quot;) {\n            wss.broadcast({\n                nick: ws.nick,\n                uid: ws.uid,\n                time: moment(data.time).format(&quot;HH:mm:ss&quot;),\n                message: data.message,\n                type: &quot;message&quot;\n            });\n        } else if (data.type === &quot;nickname&quot;) {\n            wss.broadcast({\n                oldnick: ws.nick,\n                nick: data.nick,\n                uid: ws.uid,\n                type: &quot;nickname&quot;\n            });\n            ws.nick = data.nick;\n        }\n    });\n    ws.on(&apos;close&apos;, function() {\n        wss.broadcast({\n            nick: ws.nick,\n            uid: ws.uid,\n            type: &quot;exit&quot;\n        });\n    });\n    ws.uid = uuid.v4();\n    ws.nick = &quot;游客&quot;;\n    for (var i in this.clients) {\n        ws.send(JSON.stringify({\n            nick: this.clients[i].nick,\n            uid: this.clients[i].uid,\n            type: &quot;join&quot;\n        }));\n    }\n    wss.broadcast({\n        nick: ws.nick,\n        uid: ws.uid,\n        type: &quot;join&quot;\n    });\n});</code></pre><h3 id=\"WebSocket客户端实现\"><a href=\"#WebSocket客户端实现\" class=\"headerlink\" title=\"WebSocket客户端实现###\"></a>WebSocket客户端实现###</h3><hr>\n<p>在浏览器中,则需要建立一个WS客户端</p>\n<pre><code>//创建一个WS客户端\nvar ws = new WebSocket(&quot;ws://localhost:3001&quot;);</code></pre><p>给它按照WebSocket的API绑定事件:</p>\n<pre><code>//WS客户端连接到WS服务器后, 设定默认昵称,并加入版聊\nws.onopen = function(event) {\n    $(&quot;#nickname&quot;).val(&quot;游客&quot;);\n    $logs.append(&quot;&lt;div class=&apos;alert alert-success&apos;&gt;您已加入版聊&lt;/div&gt;&quot;);\n};\n//如果WS服务器关闭,给予断开提示\nws.onclose = function(event) {\n    $logs.append(&quot;&lt;div class=&apos;alert alert-danger&apos;&gt;您已断开版聊&lt;/div&gt;&quot;);\n};\n//如果WS服务器向这个WS客户端发送信息:\nws.onmessage = function(event) {\n    var data = JSON.parse(event.data);\n    //发送文本信息, 显示到页面上\n    if (data.type === &quot;message&quot;) {\n        $chat.append(&quot;&lt;p&gt;&quot; + data.nick + &quot;(&quot; + data.time + &quot;): &quot; + data.message + &quot;&lt;/p&gt;&quot;);\n    //有新用户加入, 显示用户加入通知, 并修改当前用户列表\n    } else if (data.type === &quot;join&quot;) {\n        if ($(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).length === 0) {\n            $users.append(&quot;&lt;p uid=&apos;&quot; + data.uid + &quot;&apos;&gt;&quot; + data.nick + &quot;&lt;/p&gt;&quot;);\n            $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.nick + &quot;加入了版聊&lt;/div&gt;&quot;);\n        }\n    //有用户离开, 显示用户离开通知, 并修改当前用户列表\n    } else if (data.type === &quot;exit&quot;) {\n        $(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).remove();\n        $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.nick + &quot;离开了版聊&lt;/div&gt;&quot;);\n    //有用户修改昵称, 显示用户修改昵称, 修改用户列表\n    } else if (data.type === &quot;nickname&quot;) {\n        $(&quot;#nickname&quot;).val(data.nick);\n        $(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).text(data.nick);\n        $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.oldnick + &quot; 修改昵称为 &quot; + data.nick + &quot;&lt;/div&gt;&quot;);\n    }\n};</code></pre><p>具体需要发送信息时,使用ws.send发送：</p>\n<pre><code>//从WS客户端向WS服务器发送信息数据\nws.send(JSON.stringify({\n    time: new Date().getTime(),\n    message: message,\n    type: &quot;message&quot;\n}));</code></pre><p>需要发送修改昵称请求时，采用同样的方式：</p>\n<pre><code>//从WS客户端向WS服务器发送昵称修改请求\nws.send(JSON.stringify({\n    nick: nick,\n    type: &quot;nickname&quot;\n}));</code></pre><p>这样一个完整的WS客户端代码：</p>\n<pre><code>//创建一个WS客户端\nvar ws = new WebSocket(&quot;ws://localhost:3001&quot;);\n//WS客户端连接到WS服务器后, 设定默认昵称,并加入版聊\nws.onopen = function(event) {\n    $(&quot;#nickname&quot;).val(&quot;游客&quot;);\n    $logs.append(&quot;&lt;div class=&apos;alert alert-success&apos;&gt;您已加入版聊&lt;/div&gt;&quot;);\n};\n//如果WS服务器关闭,给予断开提示\nws.onclose = function(event) {\n    $logs.append(&quot;&lt;div class=&apos;alert alert-danger&apos;&gt;您已断开版聊&lt;/div&gt;&quot;);\n};\n//如果WS服务器向这个WS客户端发送信息:\nws.onmessage = function(event) {\n    var data = JSON.parse(event.data);\n    //发送文本信息, 显示到页面上\n    if (data.type === &quot;message&quot;) {\n        $chat.append(&quot;&lt;p&gt;&quot; + data.nick + &quot;(&quot; + data.time + &quot;): &quot; + data.message + &quot;&lt;/p&gt;&quot;);\n    //有新用户加入, 显示用户加入通知, 并修改当前用户列表\n    } else if (data.type === &quot;join&quot;) {\n        if ($(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).length === 0) {\n            $users.append(&quot;&lt;p uid=&apos;&quot; + data.uid + &quot;&apos;&gt;&quot; + data.nick + &quot;&lt;/p&gt;&quot;);\n            $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.nick + &quot;加入了版聊&lt;/div&gt;&quot;);\n        }\n    //有用户离开, 显示用户离开通知, 并修改当前用户列表\n    } else if (data.type === &quot;exit&quot;) {\n        $(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).remove();\n        $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.nick + &quot;离开了版聊&lt;/div&gt;&quot;);\n    //有用户修改昵称, 显示用户修改昵称, 修改用户列表\n    } else if (data.type === &quot;nickname&quot;) {\n        $(&quot;#nickname&quot;).val(data.nick);\n        $(&quot;p[uid=&apos;&quot; + data.uid + &quot;&apos;]&quot;, $users).text(data.nick);\n        $logs.append(&quot;&lt;div class=&apos;alert alert-warning&apos;&gt;&quot; + data.oldnick + &quot; 修改昵称为 &quot; + data.nick + &quot;&lt;/div&gt;&quot;);\n    }\n};\n//发送消息按钮事件\n$(&quot;#send&quot;).click(function(event) {\n    var message = $(&quot;#message&quot;).val();\n    if (message.trim() !== &quot;&quot;) {\n        //从WS客户端向WS服务器发送信息数据\n        ws.send(JSON.stringify({\n            time: new Date().getTime(),\n            message: message,\n            type: &quot;message&quot;\n        }));\n    }\n});\n//修改昵称按钮事件\n$(&quot;#changeNick&quot;).click(function(event) {\n    var nick = $(&quot;#nickname&quot;).val();\n    if (nick.trim() !== &quot;&quot;) {\n        //从WS客户端向WS服务器发送昵称修改请求\n        ws.send(JSON.stringify({\n            nick: nick,\n            type: &quot;nickname&quot;\n        }));\n    }\n});</code></pre><h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后###\"></a>写在最后###</h3><hr>\n<p>这样一个完整的基于WebSocket的简单聊天室就完成了，试用一下，虽然功能不完善，但是已经可以用了，并且兼容firefox25和chrome</p>\n"}